
MSF_Scan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000dc  00800100  00002100  00002194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002100  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000407  008001dc  008001dc  00002270  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002270  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000022e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e81  00000000  00000000  00002430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a8d  00000000  00000000  000052b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009b2  00000000  00000000  00005d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000043c  00000000  00000000  000066f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a6b  00000000  00000000  00006b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002427  00000000  00000000  00007597  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  000099be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 25 04 	jmp	0x84a	; 0x84a <__ctors_end>
       4:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
       8:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
       c:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      10:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      14:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      18:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      1c:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      20:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      24:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      28:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      2c:	0c 94 a2 07 	jmp	0xf44	; 0xf44 <__vector_11>
      30:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      34:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      38:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      3c:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      40:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      44:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      48:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      4c:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      50:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      54:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      58:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      5c:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      60:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      64:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      68:	4c 06       	cpc	r4, r28
      6a:	06 06       	cpc	r0, r22
      6c:	08 06       	cpc	r0, r24
      6e:	0a 06       	cpc	r0, r26
      70:	0c 06       	cpc	r0, r28
      72:	0e 06       	cpc	r0, r30
      74:	10 06       	cpc	r1, r16
      76:	12 06       	cpc	r1, r18
      78:	14 06       	cpc	r1, r20
      7a:	16 06       	cpc	r1, r22
      7c:	18 06       	cpc	r1, r24
      7e:	1a 06       	cpc	r1, r26
      80:	1c 06       	cpc	r1, r28
      82:	1e 06       	cpc	r1, r30
      84:	20 06       	cpc	r2, r16
      86:	22 06       	cpc	r2, r18
      88:	4a 06       	cpc	r4, r26
      8a:	4a 06       	cpc	r4, r26
      8c:	4a 06       	cpc	r4, r26
      8e:	4a 06       	cpc	r4, r26
      90:	4a 06       	cpc	r4, r26
      92:	4a 06       	cpc	r4, r26
      94:	4a 06       	cpc	r4, r26
      96:	4a 06       	cpc	r4, r26
      98:	4a 06       	cpc	r4, r26
      9a:	24 06       	cpc	r2, r20
      9c:	26 06       	cpc	r2, r22
      9e:	28 06       	cpc	r2, r24
      a0:	2a 06       	cpc	r2, r26
      a2:	2c 06       	cpc	r2, r28
      a4:	2e 06       	cpc	r2, r30
      a6:	30 06       	cpc	r3, r16
      a8:	32 06       	cpc	r3, r18
      aa:	4a 06       	cpc	r4, r26
      ac:	4a 06       	cpc	r4, r26
      ae:	4a 06       	cpc	r4, r26
      b0:	4a 06       	cpc	r4, r26
      b2:	4a 06       	cpc	r4, r26
      b4:	4a 06       	cpc	r4, r26
      b6:	4a 06       	cpc	r4, r26
      b8:	4a 06       	cpc	r4, r26
      ba:	4a 06       	cpc	r4, r26
      bc:	4a 06       	cpc	r4, r26
      be:	4a 06       	cpc	r4, r26
      c0:	4a 06       	cpc	r4, r26
      c2:	4a 06       	cpc	r4, r26
      c4:	4a 06       	cpc	r4, r26
      c6:	4a 06       	cpc	r4, r26
      c8:	4a 06       	cpc	r4, r26
      ca:	4a 06       	cpc	r4, r26
      cc:	4a 06       	cpc	r4, r26
      ce:	4a 06       	cpc	r4, r26
      d0:	4a 06       	cpc	r4, r26
      d2:	4a 06       	cpc	r4, r26
      d4:	4a 06       	cpc	r4, r26
      d6:	4a 06       	cpc	r4, r26
      d8:	4a 06       	cpc	r4, r26
      da:	4a 06       	cpc	r4, r26
      dc:	34 06       	cpc	r3, r20
      de:	36 06       	cpc	r3, r22
      e0:	38 06       	cpc	r3, r24
      e2:	3a 06       	cpc	r3, r26
      e4:	3c 06       	cpc	r3, r28
      e6:	3e 06       	cpc	r3, r30
      e8:	40 06       	cpc	r4, r16
      ea:	4a 06       	cpc	r4, r26
      ec:	4a 06       	cpc	r4, r26
      ee:	4a 06       	cpc	r4, r26
      f0:	4a 06       	cpc	r4, r26
      f2:	4a 06       	cpc	r4, r26
      f4:	4a 06       	cpc	r4, r26
      f6:	4a 06       	cpc	r4, r26
      f8:	4a 06       	cpc	r4, r26
      fa:	4a 06       	cpc	r4, r26
      fc:	4a 06       	cpc	r4, r26
      fe:	4a 06       	cpc	r4, r26
     100:	4a 06       	cpc	r4, r26
     102:	4a 06       	cpc	r4, r26
     104:	4a 06       	cpc	r4, r26
     106:	4a 06       	cpc	r4, r26
     108:	4a 06       	cpc	r4, r26
     10a:	4a 06       	cpc	r4, r26
     10c:	4a 06       	cpc	r4, r26
     10e:	4a 06       	cpc	r4, r26
     110:	4a 06       	cpc	r4, r26
     112:	4a 06       	cpc	r4, r26
     114:	4a 06       	cpc	r4, r26
     116:	4a 06       	cpc	r4, r26
     118:	4a 06       	cpc	r4, r26
     11a:	4a 06       	cpc	r4, r26
     11c:	42 06       	cpc	r4, r18
     11e:	44 06       	cpc	r4, r20
     120:	46 06       	cpc	r4, r22
     122:	48 06       	cpc	r4, r24

00000124 <IM8_Descriptors>:
     124:	01 00 00 05 0b 00 07 16 00 05 21 00 07 2c 00 07     ..........!..,..
     134:	37 00 01 42 00 04 4d 00 04 58 00 05 63 00 05 6e     7..B..M..X..c..n
     144:	00 03 79 00 05 84 00 03 8f 00 05 9a 00 05 a5 00     ..y.............
     154:	06 b0 00 05 bb 00 05 c6 00 06 d1 00 05 dc 00 05     ................
     164:	e7 00 05 f2 00 05 fd 00 05 08 01 03 13 01 03 1e     ................
     174:	01 05 29 01 05 34 01 05 3f 01 06 4a 01 05 55 01     ..)..4..?..J..U.
     184:	07 60 01 05 6b 01 05 76 01 05 81 01 05 8c 01 05     .`..k..v........
     194:	97 01 05 a2 01 05 ad 01 05 b8 01 05 c3 01 06 ce     ................
     1a4:	01 05 d9 01 05 e4 01 05 ef 01 05 fa 01 05 05 02     ................
     1b4:	06 10 02 06 1b 02 05 26 02 07 31 02 05 3c 02 07     .......&..1..<..
     1c4:	47 02 07 52 02 07 5d 02 07 68 02 05 73 02 04 7e     G..R..]..h..s..~
     1d4:	02 05 89 02 04 94 02 07 9f 02 05 aa 02 03 b5 02     ................
     1e4:	06 c0 02 05 cb 02 05 d6 02 05 e1 02 05 ec 02 05     ................
     1f4:	f7 02 07 02 03 05 0d 03 05 18 03 04 23 03 05 2e     ............#...
     204:	03 05 39 03 05 44 03 05 4f 03 05 5a 03 05 65 03     ..9..D..O..Z..e.
     214:	05 70 03 05 7b 03 05 86 03 05 91 03 05 9c 03 05     .p..{...........
     224:	a7 03 07 b2 03 05 bd 03 05 c8 03 05 d3 03 06 de     ................
     234:	03 01 e9 03 06 f4 03 05 ff 03                       ..........

0000023e <IM8_Bitmaps>:
     23e:	00 80 80 80 80 80 00 80 80 00 00 00 d8 d8 d8 d8     ................
     24e:	00 00 00 00 00 00 00 28 28 fe 28 28 fe 28 28 00     .......((.((.((.
     25e:	00 20 78 b0 a0 70 28 a8 f0 20 20 00 00 60 a4 a6     . x..p(..  ..`..
     26e:	68 3c 72 92 0c 00 00 00 30 48 48 30 64 98 c8 76     h<r.....0HH0d..v
     27e:	00 00 00 80 80 80 80 00 00 00 00 00 00 00 30 40     ..............0@
     28e:	c0 80 80 80 80 c0 40 30 00 c0 20 30 10 10 10 10     ......@0.. 0....
     29e:	30 20 c0 00 20 a8 70 70 a8 20 00 00 00 00 00 00     0 .. .pp. ......
     2ae:	20 20 20 f8 20 20 20 00 00 00 00 00 00 00 00 00        .   .........
     2be:	60 40 c0 80 00 00 00 00 00 f8 00 00 00 00 00 00     `@..............
     2ce:	00 00 00 00 00 00 e0 e0 00 00 00 08 10 10 10 20     ............... 
     2de:	20 40 40 40 80 00 70 88 88 a8 a8 88 88 70 00 00      @@@..p......p..
     2ee:	00 30 f0 30 30 30 30 30 fc 00 00 00 70 88 88 08     .0.00000....p...
     2fe:	70 80 80 f8 00 00 00 70 88 08 70 08 08 88 f0 00     p......p..p.....
     30e:	00 00 18 38 78 58 98 fc 18 18 00 00 00 f8 80 80     ...8xX..........
     31e:	f8 08 08 88 f0 00 00 00 70 88 80 f0 88 88 88 70     ........p......p
     32e:	00 00 00 f8 08 10 10 20 20 20 60 00 00 00 f8 88     .......   `.....
     33e:	88 70 88 88 88 f8 00 00 00 70 88 88 88 78 08 88     .p.......p...x..
     34e:	70 00 00 00 00 00 e0 e0 00 00 e0 e0 00 00 00 00     p...............
     35e:	00 e0 e0 00 00 60 40 c0 80 00 00 08 30 40 80 40     .....`@.....0@.@
     36e:	30 08 00 00 00 00 00 00 f8 00 00 f8 00 00 00 00     0...............
     37e:	00 80 60 10 08 10 60 80 00 00 00 7c 44 44 84 38     ..`...`....|DD.8
     38e:	00 30 30 00 00 00 70 88 b8 a8 a8 a8 b8 80 78 00     .00...p.......x.
     39e:	00 10 30 28 28 28 7c 44 c6 00 00 00 f0 88 88 f0     ..0(((|D........
     3ae:	88 88 88 f8 00 00 00 70 88 88 80 80 88 88 78 00     .......p......x.
     3be:	00 00 f0 88 88 88 88 88 88 f0 00 00 00 f8 80 80     ................
     3ce:	f8 80 80 80 f8 00 00 00 f8 80 80 f8 80 80 80 80     ................
     3de:	00 00 00 70 88 88 80 b8 88 88 70 00 00 00 88 88     ...p......p.....
     3ee:	88 f8 88 88 88 88 00 00 00 f8 20 20 20 20 20 20     ..........      
     3fe:	f8 00 00 00 38 08 08 08 08 88 88 f0 00 00 00 8c     ....8...........
     40e:	90 a0 c0 a0 b0 90 8c 00 00 00 c0 c0 c0 c0 c0 c0     ................
     41e:	c0 f8 00 00 00 88 c8 d8 d8 e8 a8 88 88 00 00 00     ................
     42e:	c8 c8 c8 a8 a8 98 98 98 00 00 00 70 88 88 88 88     ...........p....
     43e:	88 88 70 00 00 00 f8 88 88 88 f8 80 80 80 00 00     ..p.............
     44e:	00 70 88 88 88 88 88 88 70 30 1c 00 f8 88 8c 88     .p......p0......
     45e:	f8 90 98 8c 00 00 00 70 88 80 70 08 08 88 70 00     .......p..p...p.
     46e:	00 00 fe 10 10 10 10 10 10 10 00 00 00 88 88 88     ................
     47e:	88 88 88 88 70 00 00 00 c6 44 44 28 28 28 28 10     ....p....DD((((.
     48e:	00 00 00 82 82 54 74 6c 6c 6c 44 00 00 00 c6 64     .....TtlllD....d
     49e:	28 10 18 28 44 c6 00 00 00 c6 44 28 28 10 10 10     (..(D.....D((...
     4ae:	10 00 00 00 f8 08 10 20 20 40 80 f8 00 00 00 f0     .......  @......
     4be:	80 80 80 80 80 80 80 80 f0 00 80 40 40 40 20 20     ...........@@@  
     4ce:	10 10 10 08 00 f0 10 10 10 10 10 10 10 10 f0 00     ................
     4de:	10 28 28 44 44 c6 00 00 00 00 00 00 00 00 00 00     .((DD...........
     4ee:	00 00 00 00 f8 00 c0 40 40 20 00 00 00 00 00 00     .......@@ ......
     4fe:	00 00 00 70 90 18 f8 98 ec 00 00 00 80 80 b0 c8     ...p............
     50e:	88 88 88 f0 00 00 00 00 00 70 88 80 80 88 70 00     .........p....p.
     51e:	00 00 08 08 78 88 88 88 88 78 00 00 00 00 00 70     ....x....x.....p
     52e:	88 f8 80 88 70 00 00 00 38 20 f8 60 60 60 60 60     ....p...8 .`````
     53e:	00 00 00 00 00 3c 48 4c 78 40 7c 46 fc 00 80 80     .....<HLx@|F....
     54e:	b0 c8 88 88 88 88 00 00 00 30 00 e0 20 20 20 20     .........0..    
     55e:	f8 00 00 00 30 00 f0 10 10 10 10 10 10 e0 00 c0     ....0...........
     56e:	c0 d8 f0 e0 e0 d0 c8 00 00 00 e0 20 20 20 20 20     ...........     
     57e:	20 f8 00 00 00 00 00 f8 a8 a8 a8 a8 a8 00 00 00      ...............
     58e:	00 00 b0 c8 88 88 88 88 00 00 00 00 00 70 88 88     .............p..
     59e:	88 88 70 00 00 00 00 00 b0 c8 88 88 88 f0 80 80     ..p.............
     5ae:	00 00 00 78 88 88 88 88 78 08 08 00 00 00 f8 c8     ...x....x.......
     5be:	c0 c0 c0 c0 00 00 00 00 00 f8 80 f0 08 88 70 00     ..............p.
     5ce:	00 00 40 40 f8 40 40 40 60 38 00 00 00 00 00 88     ..@@.@@@`8......
     5de:	88 88 88 98 68 00 00 00 00 00 88 88 50 50 50 20     ....h.......PPP 
     5ee:	00 00 00 00 00 82 54 74 6c 6c 6c 00 00 00 00 00     ......Ttlll.....
     5fe:	88 50 20 20 50 88 00 00 00 00 00 88 88 50 50 50     .P  P........PPP
     60e:	20 20 c0 00 00 00 f8 10 30 60 40 f8 00 00 00 3c       ......0`@....<
     61e:	20 60 30 10 e0 10 20 20 7c 00 80 80 80 80 80 80      `0...  |.......
     62e:	80 80 80 80 00 f0 10 18 30 20 1c 20 10 10 f8 00     ........0 . ....
     63e:	00 00 c8 a8 a8 98 00 00 00 00                       ..........

00000648 <_ZL6Atomic>:
     648:	00 00 00 07 c0 00 00 00 00 00 00 0f f0 00 00 00     ................
     658:	00 00 00 3c 38 00 00 00 00 00 00 70 1c 00 00 00     ...<8......p....
     668:	00 00 00 60 0e 00 00 00 00 00 00 e0 07 00 00 00     ...`............
     678:	00 00 01 c0 03 00 00 00 00 00 01 80 03 80 00 00     ................
     688:	00 00 03 80 01 80 00 00 00 00 03 00 01 c0 00 00     ................
     698:	00 00 03 00 00 c0 00 00 00 00 06 00 00 c0 00 00     ................
     6a8:	00 3f c6 00 00 67 fc 00 01 ff fe 00 00 ff ff 80     .?...g..........
     6b8:	07 c0 3f c0 03 fc 03 c0 07 00 0f f8 1f f0 00 e0     ..?.............
     6c8:	0c 00 0c 3e fc 30 00 70 0c 00 0c 0f e0 30 00 30     ...>.0.p.....0.0
     6d8:	18 00 1c 0f f0 30 00 38 18 00 18 3e 78 30 00 38     .....0.8...>x0.8
     6e8:	18 00 18 78 1e 18 00 38 1c 00 19 e0 07 98 00 30     ...x...8.......0
     6f8:	0c 00 1f 80 01 f8 00 30 0c 00 1f 00 00 f8 00 70     .......0.......p
     708:	06 00 3c 00 00 38 00 60 06 00 78 00 00 1e 00 e0     ..<..8.`..x.....
     718:	03 00 f0 00 00 1f 00 c0 03 81 f0 00 00 1f 81 c0     ................
     728:	01 c7 b0 03 80 19 c3 80 00 ce 30 07 e0 1c f7 00     ..........0.....
     738:	00 fc 30 0f e0 1c 3e 00 00 78 30 0f f0 1c 1c 00     ..0...>..x0.....
     748:	00 78 30 0f f0 1c 1c 00 00 fc 30 0f e0 1c 3e 00     .x0.......0...>.
     758:	00 ce 30 07 e0 1c f7 00 01 c7 b0 03 c0 19 c3 80     ..0.............
     768:	03 81 f0 00 00 1f 81 c0 03 00 f0 00 00 1f 00 c0     ................
     778:	06 00 78 00 00 1e 00 e0 06 00 3c 00 00 38 00 60     ..x.......<..8.`
     788:	0c 00 1f 00 00 f8 00 30 0c 00 1f 80 01 f8 00 30     .......0.......0
     798:	1c 00 19 e0 07 98 00 30 18 00 18 f8 1e 18 00 38     .......0.......8
     7a8:	18 00 18 3e 7c 30 00 18 18 00 1c 0f f0 30 00 38     ...>|0.......0.8
     7b8:	1c 00 0c 07 e0 30 00 30 0c 00 0c 3f fc 30 00 30     .....0.0...?.0.0
     7c8:	0e 00 0f f8 1f f0 00 60 07 c0 3f c0 07 f8 03 e0     .......`..?.....
     7d8:	01 ff fe 00 00 ff ff 80 00 7f e6 00 00 67 fe 00     .............g..
     7e8:	00 00 06 00 00 c0 00 00 00 00 03 00 00 c0 00 00     ................
     7f8:	00 00 03 00 01 c0 00 00 00 00 03 80 01 80 00 00     ................
     808:	00 00 01 80 03 80 00 00 00 00 01 c0 03 00 00 00     ................
     818:	00 00 00 e0 07 00 00 00 00 00 00 60 0e 00 00 00     ...........`....
     828:	00 00 00 30 1c 00 00 00 00 00 00 3c 38 00 00 00     ...0.......<8...
     838:	00 00 00 0f f0 00 00 00 00 00 00 07 c0 00 00 00     ................

00000848 <__ctors_start>:
     848:	ca 0e       	add	r12, r26

0000084a <__ctors_end>:
     84a:	11 24       	eor	r1, r1
     84c:	1f be       	out	0x3f, r1	; 63
     84e:	cf ef       	ldi	r28, 0xFF	; 255
     850:	d8 e0       	ldi	r29, 0x08	; 8
     852:	de bf       	out	0x3e, r29	; 62
     854:	cd bf       	out	0x3d, r28	; 61

00000856 <__do_copy_data>:
     856:	11 e0       	ldi	r17, 0x01	; 1
     858:	a0 e0       	ldi	r26, 0x00	; 0
     85a:	b1 e0       	ldi	r27, 0x01	; 1
     85c:	e0 e0       	ldi	r30, 0x00	; 0
     85e:	f1 e2       	ldi	r31, 0x21	; 33
     860:	02 c0       	rjmp	.+4      	; 0x866 <__do_copy_data+0x10>
     862:	05 90       	lpm	r0, Z+
     864:	0d 92       	st	X+, r0
     866:	ac 3d       	cpi	r26, 0xDC	; 220
     868:	b1 07       	cpc	r27, r17
     86a:	d9 f7       	brne	.-10     	; 0x862 <__do_copy_data+0xc>

0000086c <__do_clear_bss>:
     86c:	25 e0       	ldi	r18, 0x05	; 5
     86e:	ac ed       	ldi	r26, 0xDC	; 220
     870:	b1 e0       	ldi	r27, 0x01	; 1
     872:	01 c0       	rjmp	.+2      	; 0x876 <.do_clear_bss_start>

00000874 <.do_clear_bss_loop>:
     874:	1d 92       	st	X+, r1

00000876 <.do_clear_bss_start>:
     876:	a3 3e       	cpi	r26, 0xE3	; 227
     878:	b2 07       	cpc	r27, r18
     87a:	e1 f7       	brne	.-8      	; 0x874 <.do_clear_bss_loop>

0000087c <__do_global_ctors>:
     87c:	14 e0       	ldi	r17, 0x04	; 4
     87e:	c5 e2       	ldi	r28, 0x25	; 37
     880:	d4 e0       	ldi	r29, 0x04	; 4
     882:	04 c0       	rjmp	.+8      	; 0x88c <__do_global_ctors+0x10>
     884:	21 97       	sbiw	r28, 0x01	; 1
     886:	fe 01       	movw	r30, r28
     888:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <__tablejump2__>
     88c:	c4 32       	cpi	r28, 0x24	; 36
     88e:	d1 07       	cpc	r29, r17
     890:	c9 f7       	brne	.-14     	; 0x884 <__do_global_ctors+0x8>
     892:	0e 94 25 08 	call	0x104a	; 0x104a <main>
     896:	0c 94 7e 10 	jmp	0x20fc	; 0x20fc <_exit>

0000089a <__bad_interrupt>:
     89a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000089e <_ZN11Framebuffer9drawPixelEhhh>:
    }
}
#endif

void Framebuffer::drawPixel(uint8_t pos_x, uint8_t pos_y, uint8_t pixel_status) {
    if (pos_x >= SSD1306_WIDTH || pos_y >= SSD1306_HEIGHT) {
     89e:	66 23       	and	r22, r22
     8a0:	ac f1       	brlt	.+106    	; 0x90c <__stack+0xd>
     8a2:	40 34       	cpi	r20, 0x40	; 64
     8a4:	98 f5       	brcc	.+102    	; 0x90c <__stack+0xd>
        return;
    }

    if (pixel_status) {
     8a6:	22 23       	and	r18, r18
     8a8:	c9 f0       	breq	.+50     	; 0x8dc <_ZN11Framebuffer9drawPixelEhhh+0x3e>
        this->buffer[pos_x+(pos_y/8)*SSD1306_WIDTH] |= (1 << (pos_y&7));
     8aa:	24 2f       	mov	r18, r20
     8ac:	26 95       	lsr	r18
     8ae:	26 95       	lsr	r18
     8b0:	26 95       	lsr	r18
     8b2:	50 e8       	ldi	r21, 0x80	; 128
     8b4:	25 9f       	mul	r18, r21
     8b6:	90 01       	movw	r18, r0
     8b8:	11 24       	eor	r1, r1
     8ba:	26 0f       	add	r18, r22
     8bc:	31 1d       	adc	r19, r1
     8be:	fc 01       	movw	r30, r24
     8c0:	e2 0f       	add	r30, r18
     8c2:	f3 1f       	adc	r31, r19
     8c4:	47 70       	andi	r20, 0x07	; 7
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <_ZN11Framebuffer9drawPixelEhhh+0x32>
     8cc:	88 0f       	add	r24, r24
     8ce:	99 1f       	adc	r25, r25
     8d0:	4a 95       	dec	r20
     8d2:	e2 f7       	brpl	.-8      	; 0x8cc <_ZN11Framebuffer9drawPixelEhhh+0x2e>
     8d4:	90 81       	ld	r25, Z
     8d6:	89 2b       	or	r24, r25
     8d8:	80 83       	st	Z, r24
     8da:	08 95       	ret
    } else {
        this->buffer[pos_x+(pos_y/8)*SSD1306_WIDTH] &= ~(1 << (pos_y&7));
     8dc:	24 2f       	mov	r18, r20
     8de:	26 95       	lsr	r18
     8e0:	26 95       	lsr	r18
     8e2:	26 95       	lsr	r18
     8e4:	30 e8       	ldi	r19, 0x80	; 128
     8e6:	23 9f       	mul	r18, r19
     8e8:	f0 01       	movw	r30, r0
     8ea:	11 24       	eor	r1, r1
     8ec:	e6 0f       	add	r30, r22
     8ee:	f1 1d       	adc	r31, r1
     8f0:	e8 0f       	add	r30, r24
     8f2:	f9 1f       	adc	r31, r25
     8f4:	47 70       	andi	r20, 0x07	; 7
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	02 c0       	rjmp	.+4      	; 0x900 <__stack+0x1>
     8fc:	88 0f       	add	r24, r24
     8fe:	99 1f       	adc	r25, r25
     900:	4a 95       	dec	r20
     902:	e2 f7       	brpl	.-8      	; 0x8fc <_ZN11Framebuffer9drawPixelEhhh+0x5e>
     904:	80 95       	com	r24
     906:	90 81       	ld	r25, Z
     908:	89 23       	and	r24, r25
     90a:	80 83       	st	Z, r24
     90c:	08 95       	ret

0000090e <_ZN11Framebuffer10drawBitmapEPKhhhhh>:
Framebuffer::Framebuffer() {
    this->clear();
}

#ifndef SIMULATOR
void Framebuffer::drawBitmap(const uint8_t *progmem_bitmap, uint8_t height, uint8_t width, uint8_t pos_x, uint8_t pos_y) {
     90e:	2f 92       	push	r2
     910:	3f 92       	push	r3
     912:	4f 92       	push	r4
     914:	5f 92       	push	r5
     916:	6f 92       	push	r6
     918:	7f 92       	push	r7
     91a:	8f 92       	push	r8
     91c:	9f 92       	push	r9
     91e:	af 92       	push	r10
     920:	bf 92       	push	r11
     922:	cf 92       	push	r12
     924:	df 92       	push	r13
     926:	ef 92       	push	r14
     928:	ff 92       	push	r15
     92a:	0f 93       	push	r16
     92c:	1f 93       	push	r17
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	00 d0       	rcall	.+0      	; 0x934 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0x26>
     934:	1f 92       	push	r1
     936:	cd b7       	in	r28, 0x3d	; 61
     938:	de b7       	in	r29, 0x3e	; 62
    uint8_t current_byte;
    uint8_t byte_width = (width + 7)/8;
     93a:	e2 2f       	mov	r30, r18
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	37 96       	adiw	r30, 0x07	; 7
     940:	3f 01       	movw	r6, r30
     942:	1a f4       	brpl	.+6      	; 0x94a <_ZN11Framebuffer10drawBitmapEPKhhhhh+0x3c>
     944:	37 e0       	ldi	r19, 0x07	; 7
     946:	63 0e       	add	r6, r19
     948:	71 1c       	adc	r7, r1
     94a:	75 94       	asr	r7
     94c:	67 94       	ror	r6
     94e:	75 94       	asr	r7
     950:	67 94       	ror	r6
     952:	75 94       	asr	r7
     954:	67 94       	ror	r6

    for (uint8_t current_y = 0; current_y < height; current_y++) {
     956:	44 23       	and	r20, r20
     958:	09 f4       	brne	.+2      	; 0x95c <_ZN11Framebuffer10drawBitmapEPKhhhhh+0x4e>
     95a:	4b c0       	rjmp	.+150    	; 0x9f2 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0xe4>
     95c:	42 2e       	mov	r4, r18
     95e:	5b 01       	movw	r10, r22
     960:	6c 01       	movw	r12, r24
     962:	24 2e       	mov	r2, r20
     964:	2e 0c       	add	r2, r14
     966:	81 2c       	mov	r8, r1
     968:	91 2c       	mov	r9, r1
        for (uint8_t current_x = 0; current_x < width; current_x++) {
            current_byte = pgm_read_byte(progmem_bitmap + current_y*byte_width + current_x/8);
     96a:	77 24       	eor	r7, r7
     96c:	09 83       	std	Y+1, r16	; 0x01
     96e:	31 2c       	mov	r3, r1
            if (current_byte & (128 >> (current_x&7))) {
     970:	00 e8       	ldi	r16, 0x80	; 128
     972:	10 e0       	ldi	r17, 0x00	; 0
     974:	30 c0       	rjmp	.+96     	; 0x9d6 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0xc8>
    uint8_t current_byte;
    uint8_t byte_width = (width + 7)/8;

    for (uint8_t current_y = 0; current_y < height; current_y++) {
        for (uint8_t current_x = 0; current_x < width; current_x++) {
            current_byte = pgm_read_byte(progmem_bitmap + current_y*byte_width + current_x/8);
     976:	8f 2d       	mov	r24, r15
     978:	86 95       	lsr	r24
     97a:	86 95       	lsr	r24
     97c:	86 95       	lsr	r24
     97e:	ea 81       	ldd	r30, Y+2	; 0x02
     980:	fb 81       	ldd	r31, Y+3	; 0x03
     982:	e8 0f       	add	r30, r24
     984:	f1 1d       	adc	r31, r1
     986:	ea 0d       	add	r30, r10
     988:	fb 1d       	adc	r31, r11
     98a:	84 91       	lpm	r24, Z
            if (current_byte & (128 >> (current_x&7))) {
     98c:	9f 2d       	mov	r25, r15
     98e:	97 70       	andi	r25, 0x07	; 7
     990:	98 01       	movw	r18, r16
     992:	02 c0       	rjmp	.+4      	; 0x998 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0x8a>
     994:	35 95       	asr	r19
     996:	27 95       	ror	r18
     998:	9a 95       	dec	r25
     99a:	e2 f7       	brpl	.-8      	; 0x994 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0x86>
     99c:	e8 2f       	mov	r30, r24
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	e2 23       	and	r30, r18
     9a2:	f3 23       	and	r31, r19
     9a4:	ef 2b       	or	r30, r31
     9a6:	39 f0       	breq	.+14     	; 0x9b6 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0xa8>
                this->drawPixel(current_x+pos_x,current_y+pos_y,1);
     9a8:	21 e0       	ldi	r18, 0x01	; 1
     9aa:	4e 2d       	mov	r20, r14
     9ac:	65 2d       	mov	r22, r5
     9ae:	c6 01       	movw	r24, r12
     9b0:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN11Framebuffer9drawPixelEhhh>
     9b4:	06 c0       	rjmp	.+12     	; 0x9c2 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0xb4>
            } else {
                this->drawPixel(current_x+pos_x,current_y+pos_y,0);
     9b6:	23 2d       	mov	r18, r3
     9b8:	4e 2d       	mov	r20, r14
     9ba:	65 2d       	mov	r22, r5
     9bc:	c6 01       	movw	r24, r12
     9be:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN11Framebuffer9drawPixelEhhh>
void Framebuffer::drawBitmap(const uint8_t *progmem_bitmap, uint8_t height, uint8_t width, uint8_t pos_x, uint8_t pos_y) {
    uint8_t current_byte;
    uint8_t byte_width = (width + 7)/8;

    for (uint8_t current_y = 0; current_y < height; current_y++) {
        for (uint8_t current_x = 0; current_x < width; current_x++) {
     9c2:	f3 94       	inc	r15
     9c4:	53 94       	inc	r5
     9c6:	f4 10       	cpse	r15, r4
     9c8:	d6 cf       	rjmp	.-84     	; 0x976 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0x68>
     9ca:	8f ef       	ldi	r24, 0xFF	; 255
     9cc:	88 1a       	sub	r8, r24
     9ce:	98 0a       	sbc	r9, r24
     9d0:	e3 94       	inc	r14
#ifndef SIMULATOR
void Framebuffer::drawBitmap(const uint8_t *progmem_bitmap, uint8_t height, uint8_t width, uint8_t pos_x, uint8_t pos_y) {
    uint8_t current_byte;
    uint8_t byte_width = (width + 7)/8;

    for (uint8_t current_y = 0; current_y < height; current_y++) {
     9d2:	e2 14       	cp	r14, r2
     9d4:	71 f0       	breq	.+28     	; 0x9f2 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0xe4>
        for (uint8_t current_x = 0; current_x < width; current_x++) {
     9d6:	44 20       	and	r4, r4
     9d8:	c1 f3       	breq	.-16     	; 0x9ca <_ZN11Framebuffer10drawBitmapEPKhhhhh+0xbc>
            current_byte = pgm_read_byte(progmem_bitmap + current_y*byte_width + current_x/8);
     9da:	86 9c       	mul	r8, r6
     9dc:	f0 01       	movw	r30, r0
     9de:	87 9c       	mul	r8, r7
     9e0:	f0 0d       	add	r31, r0
     9e2:	96 9c       	mul	r9, r6
     9e4:	f0 0d       	add	r31, r0
     9e6:	11 24       	eor	r1, r1
     9e8:	fb 83       	std	Y+3, r31	; 0x03
     9ea:	ea 83       	std	Y+2, r30	; 0x02
     9ec:	59 80       	ldd	r5, Y+1	; 0x01
     9ee:	f3 2c       	mov	r15, r3
     9f0:	c2 cf       	rjmp	.-124    	; 0x976 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0x68>
            } else {
                this->drawPixel(current_x+pos_x,current_y+pos_y,0);
            }
        }
    }
}
     9f2:	0f 90       	pop	r0
     9f4:	0f 90       	pop	r0
     9f6:	0f 90       	pop	r0
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	ff 90       	pop	r15
     a02:	ef 90       	pop	r14
     a04:	df 90       	pop	r13
     a06:	cf 90       	pop	r12
     a08:	bf 90       	pop	r11
     a0a:	af 90       	pop	r10
     a0c:	9f 90       	pop	r9
     a0e:	8f 90       	pop	r8
     a10:	7f 90       	pop	r7
     a12:	6f 90       	pop	r6
     a14:	5f 90       	pop	r5
     a16:	4f 90       	pop	r4
     a18:	3f 90       	pop	r3
     a1a:	2f 90       	pop	r2
     a1c:	08 95       	ret

00000a1e <_ZN11Framebuffer9drawPixelEhh>:
        this->buffer[pos_x+(pos_y/8)*SSD1306_WIDTH] &= ~(1 << (pos_y&7));
    }
}

void Framebuffer::drawPixel(uint8_t pos_x, uint8_t pos_y) {
    if (pos_x >= SSD1306_WIDTH || pos_y >= SSD1306_HEIGHT) {
     a1e:	66 23       	and	r22, r22
     a20:	cc f0       	brlt	.+50     	; 0xa54 <_ZN11Framebuffer9drawPixelEhh+0x36>
     a22:	40 34       	cpi	r20, 0x40	; 64
     a24:	b8 f4       	brcc	.+46     	; 0xa54 <_ZN11Framebuffer9drawPixelEhh+0x36>
        return;
    }

    this->buffer[pos_x+(pos_y/8)*SSD1306_WIDTH] |= (1 << (pos_y&7));
     a26:	24 2f       	mov	r18, r20
     a28:	26 95       	lsr	r18
     a2a:	26 95       	lsr	r18
     a2c:	26 95       	lsr	r18
     a2e:	30 e8       	ldi	r19, 0x80	; 128
     a30:	23 9f       	mul	r18, r19
     a32:	f0 01       	movw	r30, r0
     a34:	11 24       	eor	r1, r1
     a36:	e6 0f       	add	r30, r22
     a38:	f1 1d       	adc	r31, r1
     a3a:	e8 0f       	add	r30, r24
     a3c:	f9 1f       	adc	r31, r25
     a3e:	47 70       	andi	r20, 0x07	; 7
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	02 c0       	rjmp	.+4      	; 0xa4a <_ZN11Framebuffer9drawPixelEhh+0x2c>
     a46:	88 0f       	add	r24, r24
     a48:	99 1f       	adc	r25, r25
     a4a:	4a 95       	dec	r20
     a4c:	e2 f7       	brpl	.-8      	; 0xa46 <_ZN11Framebuffer9drawPixelEhh+0x28>
     a4e:	90 81       	ld	r25, Z
     a50:	89 2b       	or	r24, r25
     a52:	80 83       	st	Z, r24
     a54:	08 95       	ret

00000a56 <_ZN11Framebuffer9drawVLineEhhh>:
}

void Framebuffer::drawVLine(uint8_t x, uint8_t y, uint8_t length) {
     a56:	ff 92       	push	r15
     a58:	0f 93       	push	r16
     a5a:	1f 93       	push	r17
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
    for (uint8_t i = 0; i < length; ++i) {
     a60:	22 23       	and	r18, r18
     a62:	69 f0       	breq	.+26     	; 0xa7e <_ZN11Framebuffer9drawVLineEhhh+0x28>
     a64:	c4 2f       	mov	r28, r20
     a66:	f6 2e       	mov	r15, r22
     a68:	8c 01       	movw	r16, r24
     a6a:	d2 2f       	mov	r29, r18
     a6c:	d4 0f       	add	r29, r20
        this->drawPixel(x,i+y);
     a6e:	4c 2f       	mov	r20, r28
     a70:	6f 2d       	mov	r22, r15
     a72:	c8 01       	movw	r24, r16
     a74:	0e 94 0f 05 	call	0xa1e	; 0xa1e <_ZN11Framebuffer9drawPixelEhh>
     a78:	cf 5f       	subi	r28, 0xFF	; 255

    this->buffer[pos_x+(pos_y/8)*SSD1306_WIDTH] |= (1 << (pos_y&7));
}

void Framebuffer::drawVLine(uint8_t x, uint8_t y, uint8_t length) {
    for (uint8_t i = 0; i < length; ++i) {
     a7a:	cd 13       	cpse	r28, r29
     a7c:	f8 cf       	rjmp	.-16     	; 0xa6e <_ZN11Framebuffer9drawVLineEhhh+0x18>
        this->drawPixel(x,i+y);
    }
}
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	1f 91       	pop	r17
     a84:	0f 91       	pop	r16
     a86:	ff 90       	pop	r15
     a88:	08 95       	ret

00000a8a <_ZN11Framebuffer9drawHLineEhhh>:

void Framebuffer::drawHLine(uint8_t x, uint8_t y, uint8_t length) {
     a8a:	ff 92       	push	r15
     a8c:	0f 93       	push	r16
     a8e:	1f 93       	push	r17
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
    for (uint8_t i = 0; i < length; ++i) {
     a94:	22 23       	and	r18, r18
     a96:	69 f0       	breq	.+26     	; 0xab2 <_ZN11Framebuffer9drawHLineEhhh+0x28>
     a98:	f4 2e       	mov	r15, r20
     a9a:	c6 2f       	mov	r28, r22
     a9c:	8c 01       	movw	r16, r24
     a9e:	d2 2f       	mov	r29, r18
     aa0:	d6 0f       	add	r29, r22
        this->drawPixel(i+x,y);
     aa2:	4f 2d       	mov	r20, r15
     aa4:	6c 2f       	mov	r22, r28
     aa6:	c8 01       	movw	r24, r16
     aa8:	0e 94 0f 05 	call	0xa1e	; 0xa1e <_ZN11Framebuffer9drawPixelEhh>
     aac:	cf 5f       	subi	r28, 0xFF	; 255
        this->drawPixel(x,i+y);
    }
}

void Framebuffer::drawHLine(uint8_t x, uint8_t y, uint8_t length) {
    for (uint8_t i = 0; i < length; ++i) {
     aae:	cd 13       	cpse	r28, r29
     ab0:	f8 cf       	rjmp	.-16     	; 0xaa2 <_ZN11Framebuffer9drawHLineEhhh+0x18>
        this->drawPixel(i+x,y);
    }
}
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	ff 90       	pop	r15
     abc:	08 95       	ret

00000abe <_ZN11Framebuffer13drawRectangleEhhhh>:

void Framebuffer::drawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
     abe:	cf 92       	push	r12
     ac0:	df 92       	push	r13
     ac2:	ef 92       	push	r14
     ac4:	ff 92       	push	r15
     ac6:	0f 93       	push	r16
     ac8:	1f 93       	push	r17
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	ec 01       	movw	r28, r24
     ad0:	f6 2e       	mov	r15, r22
     ad2:	14 2f       	mov	r17, r20
     ad4:	d2 2e       	mov	r13, r18
    uint8_t length = x2 - x1 + 1;
     ad6:	e2 2e       	mov	r14, r18
     ad8:	e6 1a       	sub	r14, r22
     ada:	e3 94       	inc	r14
    uint8_t height = y2 - y1;
     adc:	c0 2e       	mov	r12, r16
     ade:	c4 1a       	sub	r12, r20

    this->drawHLine(x1,y1,length);
     ae0:	2e 2d       	mov	r18, r14
     ae2:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN11Framebuffer9drawHLineEhhh>
    this->drawHLine(x1,y2,length);
     ae6:	2e 2d       	mov	r18, r14
     ae8:	40 2f       	mov	r20, r16
     aea:	6f 2d       	mov	r22, r15
     aec:	ce 01       	movw	r24, r28
     aee:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN11Framebuffer9drawHLineEhhh>
    this->drawVLine(x1,y1,height);
     af2:	2c 2d       	mov	r18, r12
     af4:	41 2f       	mov	r20, r17
     af6:	6f 2d       	mov	r22, r15
     af8:	ce 01       	movw	r24, r28
     afa:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN11Framebuffer9drawVLineEhhh>
    this->drawVLine(x2,y1,height);
     afe:	2c 2d       	mov	r18, r12
     b00:	41 2f       	mov	r20, r17
     b02:	6d 2d       	mov	r22, r13
     b04:	ce 01       	movw	r24, r28
     b06:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN11Framebuffer9drawVLineEhhh>
}
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	1f 91       	pop	r17
     b10:	0f 91       	pop	r16
     b12:	ff 90       	pop	r15
     b14:	ef 90       	pop	r14
     b16:	df 90       	pop	r13
     b18:	cf 90       	pop	r12
     b1a:	08 95       	ret

00000b1c <_ZN11Framebuffer5clearEv>:
            }
        }
    }
}

void Framebuffer::clear() {
     b1c:	fc 01       	movw	r30, r24
     b1e:	9c 5f       	subi	r25, 0xFC	; 252
    for (uint16_t buffer_location = 0; buffer_location < SSD1306_BUFFERSIZE; buffer_location++) {
        this->buffer[buffer_location] = 0x00;
     b20:	11 92       	st	Z+, r1
        }
    }
}

void Framebuffer::clear() {
    for (uint16_t buffer_location = 0; buffer_location < SSD1306_BUFFERSIZE; buffer_location++) {
     b22:	e8 17       	cp	r30, r24
     b24:	f9 07       	cpc	r31, r25
     b26:	e1 f7       	brne	.-8      	; 0xb20 <_ZN11Framebuffer5clearEv+0x4>
        this->buffer[buffer_location] = 0x00;
    }
}
     b28:	08 95       	ret

00000b2a <_ZN11FramebufferC1Ev>:
For more information, please refer to <http://unlicense.org/>
*/

#include "Framebuffer.h"

Framebuffer::Framebuffer() {
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	ec 01       	movw	r28, r24
     b30:	9c 5f       	subi	r25, 0xFC	; 252
     b32:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <_ZN7SSD1306C1Ev>
    this->clear();
     b36:	ce 01       	movw	r24, r28
     b38:	0e 94 8e 05 	call	0xb1c	; 0xb1c <_ZN11Framebuffer5clearEv>
}
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	08 95       	ret

00000b42 <_ZN11Framebuffer4showEv>:
void Framebuffer::invert(uint8_t status) {
    this->oled.invert(status);
}

void Framebuffer::show() {
    this->oled.sendFramebuffer(this->buffer);
     b42:	bc 01       	movw	r22, r24
     b44:	9c 5f       	subi	r25, 0xFC	; 252
     b46:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <_ZN7SSD130615sendFramebufferEPh>
     b4a:	08 95       	ret

00000b4c <_ZN3I2CC1Ev>:
*/

#include "I2C.h"
#define F_CPU 8000000UL

I2C::I2C() {}
     b4c:	08 95       	ret

00000b4e <_ZN3I2C4initEh>:

void I2C::init(uint8_t address) {
    this->address = address;
     b4e:	fc 01       	movw	r30, r24
     b50:	60 83       	st	Z, r22
    TWSR = 0;
     b52:	10 92 b9 00 	sts	0x00B9, r1
    TWBR = ((F_CPU/SCL_CLOCK)-16)/2;
     b56:	80 e2       	ldi	r24, 0x20	; 32
     b58:	80 93 b8 00 	sts	0x00B8, r24
     b5c:	08 95       	ret

00000b5e <_ZN3I2C5startEv>:
}

uint8_t I2C::start() {
     b5e:	dc 01       	movw	r26, r24
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     b60:	84 ea       	ldi	r24, 0xA4	; 164
     b62:	80 93 bc 00 	sts	0x00BC, r24
    while(!(TWCR & (1<<TWINT)));
     b66:	ec eb       	ldi	r30, 0xBC	; 188
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	90 81       	ld	r25, Z
     b6c:	99 23       	and	r25, r25
     b6e:	ec f7       	brge	.-6      	; 0xb6a <_ZN3I2C5startEv+0xc>

    twi_status_register = TW_STATUS & 0xF8;
     b70:	90 91 b9 00 	lds	r25, 0x00B9
     b74:	98 7f       	andi	r25, 0xF8	; 248
     b76:	11 96       	adiw	r26, 0x01	; 1
     b78:	9c 93       	st	X, r25
     b7a:	11 97       	sbiw	r26, 0x01	; 1
    if ((this->twi_status_register != TW_START) && (this->twi_status_register != TW_REP_START)) {
     b7c:	98 30       	cpi	r25, 0x08	; 8
     b7e:	11 f0       	breq	.+4      	; 0xb84 <_ZN3I2C5startEv+0x26>
     b80:	90 31       	cpi	r25, 0x10	; 16
     b82:	b9 f4       	brne	.+46     	; 0xbb2 <_ZN3I2C5startEv+0x54>
        return 1;
    }

    TWDR = address;
     b84:	8c 91       	ld	r24, X
     b86:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = (1<<TWINT) | (1<<TWEN);
     b8a:	84 e8       	ldi	r24, 0x84	; 132
     b8c:	80 93 bc 00 	sts	0x00BC, r24

    while(!(TWCR & (1<<TWINT)));
     b90:	ec eb       	ldi	r30, 0xBC	; 188
     b92:	f0 e0       	ldi	r31, 0x00	; 0
     b94:	90 81       	ld	r25, Z
     b96:	99 23       	and	r25, r25
     b98:	ec f7       	brge	.-6      	; 0xb94 <_ZN3I2C5startEv+0x36>

    this->twi_status_register = TW_STATUS & 0xF8;
     b9a:	90 91 b9 00 	lds	r25, 0x00B9
     b9e:	98 7f       	andi	r25, 0xF8	; 248
     ba0:	11 96       	adiw	r26, 0x01	; 1
     ba2:	9c 93       	st	X, r25
    if ((this->twi_status_register != TW_MT_SLA_ACK) && (this->twi_status_register != TW_MR_SLA_ACK)) {
     ba4:	98 31       	cpi	r25, 0x18	; 24
     ba6:	39 f0       	breq	.+14     	; 0xbb6 <_ZN3I2C5startEv+0x58>
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	90 34       	cpi	r25, 0x40	; 64
     bac:	29 f4       	brne	.+10     	; 0xbb8 <_ZN3I2C5startEv+0x5a>
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	08 95       	ret
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    while(!(TWCR & (1<<TWINT)));

    twi_status_register = TW_STATUS & 0xF8;
    if ((this->twi_status_register != TW_START) && (this->twi_status_register != TW_REP_START)) {
        return 1;
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	08 95       	ret
    this->twi_status_register = TW_STATUS & 0xF8;
    if ((this->twi_status_register != TW_MT_SLA_ACK) && (this->twi_status_register != TW_MR_SLA_ACK)) {
        return 1;
    }

    return 0;
     bb6:	80 e0       	ldi	r24, 0x00	; 0
}
     bb8:	08 95       	ret

00000bba <_ZN3I2C5writeEh>:

uint8_t I2C::write(uint8_t data) {
     bba:	dc 01       	movw	r26, r24
    TWDR = data;
     bbc:	60 93 bb 00 	sts	0x00BB, r22
    TWCR = (1<<TWINT) | (1<<TWEN);
     bc0:	84 e8       	ldi	r24, 0x84	; 132
     bc2:	80 93 bc 00 	sts	0x00BC, r24

    while(!(TWCR & (1<<TWINT)));
     bc6:	ec eb       	ldi	r30, 0xBC	; 188
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	90 81       	ld	r25, Z
     bcc:	99 23       	and	r25, r25
     bce:	ec f7       	brge	.-6      	; 0xbca <_ZN3I2C5writeEh+0x10>

    this->twi_status_register = TW_STATUS & 0xF8;
     bd0:	90 91 b9 00 	lds	r25, 0x00B9
     bd4:	98 7f       	andi	r25, 0xF8	; 248
     bd6:	11 96       	adiw	r26, 0x01	; 1
     bd8:	9c 93       	st	X, r25
    if (this->twi_status_register != TW_MT_DATA_ACK) {
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	98 32       	cpi	r25, 0x28	; 40
     bde:	09 f4       	brne	.+2      	; 0xbe2 <_ZN3I2C5writeEh+0x28>
     be0:	80 e0       	ldi	r24, 0x00	; 0
        return 1;
    } else {
        return 0;
    }
}
     be2:	08 95       	ret

00000be4 <_ZN3I2C4stopEv>:

void I2C::stop(void) {
    TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     be4:	84 e9       	ldi	r24, 0x94	; 148
     be6:	80 93 bc 00 	sts	0x00BC, r24
    while(TWCR & (1<<TWSTO));
     bea:	ec eb       	ldi	r30, 0xBC	; 188
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	84 fd       	sbrc	r24, 4
     bf2:	fd cf       	rjmp	.-6      	; 0xbee <_ZN3I2C4stopEv+0xa>
     bf4:	08 95       	ret

00000bf6 <_Z9Punctuatec>:
	0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x00, 0x00
};

uint8_t Punctuate(char mark)
{
	switch (mark)
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	fc 01       	movw	r30, r24
     bfa:	b1 97       	sbiw	r30, 0x21	; 33
     bfc:	ee 35       	cpi	r30, 0x5E	; 94
     bfe:	f1 05       	cpc	r31, r1
     c00:	08 f0       	brcs	.+2      	; 0xc04 <_Z9Punctuatec+0xe>
     c02:	48 c0       	rjmp	.+144    	; 0xc94 <_Z9Punctuatec+0x9e>
     c04:	ec 5c       	subi	r30, 0xCC	; 204
     c06:	ff 4f       	sbci	r31, 0xFF	; 255
     c08:	0c 94 b9 0f 	jmp	0x1f72	; 0x1f72 <__tablejump2__>
	{
		case '!': return EXCLAMATION; break;
		case '"' : return DQUOTE; break;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	08 95       	ret
		case '#' : return HASH; break;
     c10:	82 e0       	ldi	r24, 0x02	; 2
     c12:	08 95       	ret
		case '$' : return DOLLAR; break;
     c14:	83 e0       	ldi	r24, 0x03	; 3
     c16:	08 95       	ret
		case '%' : return PERCENT; break;
     c18:	84 e0       	ldi	r24, 0x04	; 4
     c1a:	08 95       	ret
		case '&' : return AMPERSAND; break;
     c1c:	85 e0       	ldi	r24, 0x05	; 5
     c1e:	08 95       	ret
		case '\'' : return SQUOTE; break;
     c20:	86 e0       	ldi	r24, 0x06	; 6
     c22:	08 95       	ret
		case '(' : return OBRACKET; break;
     c24:	87 e0       	ldi	r24, 0x07	; 7
     c26:	08 95       	ret
		case ')' : return CBRACKET; break;
     c28:	88 e0       	ldi	r24, 0x08	; 8
     c2a:	08 95       	ret
		case '*' : return ASTERISK; break;
     c2c:	89 e0       	ldi	r24, 0x09	; 9
     c2e:	08 95       	ret
		case '+' : return PLUS; break;
     c30:	8a e0       	ldi	r24, 0x0A	; 10
     c32:	08 95       	ret
		case ',' : return COMMA; break;
     c34:	8b e0       	ldi	r24, 0x0B	; 11
     c36:	08 95       	ret
		case '-' : return DASH; break;
     c38:	8c e0       	ldi	r24, 0x0C	; 12
     c3a:	08 95       	ret
		case '.' : return DOT; break;
     c3c:	8d e0       	ldi	r24, 0x0D	; 13
     c3e:	08 95       	ret
		case '/' : return FSLASH; break;
     c40:	8e e0       	ldi	r24, 0x0E	; 14
     c42:	08 95       	ret
		case '0' : return ZERO; break;
     c44:	8f e0       	ldi	r24, 0x0F	; 15
     c46:	08 95       	ret
		case ':' : return COLON; break;
     c48:	89 e1       	ldi	r24, 0x19	; 25
     c4a:	08 95       	ret
		case ';' : return SCOLON; break;
     c4c:	8a e1       	ldi	r24, 0x1A	; 26
     c4e:	08 95       	ret
		case '<' : return LTHAN; break;
     c50:	8b e1       	ldi	r24, 0x1B	; 27
     c52:	08 95       	ret
		case '=' : return EQUALS; break;
     c54:	8c e1       	ldi	r24, 0x1C	; 28
     c56:	08 95       	ret
		case '>' : return GTHAN; break;
     c58:	8d e1       	ldi	r24, 0x1D	; 29
     c5a:	08 95       	ret
		case '?' : return QUESTION; break;
     c5c:	8e e1       	ldi	r24, 0x1E	; 30
     c5e:	08 95       	ret
		case '@' : return AT; break;
     c60:	8f e1       	ldi	r24, 0x1F	; 31
     c62:	08 95       	ret
		case 'A' : return CAPA; break;
     c64:	80 e2       	ldi	r24, 0x20	; 32
     c66:	08 95       	ret
		case '[' : return OSQUARE; break;
     c68:	8a e3       	ldi	r24, 0x3A	; 58
     c6a:	08 95       	ret
		case '\\' : return BSLASH; break;
     c6c:	8b e3       	ldi	r24, 0x3B	; 59
     c6e:	08 95       	ret
		case ']' : return CSQUARE; break;
     c70:	8c e3       	ldi	r24, 0x3C	; 60
     c72:	08 95       	ret
		case '^' : return CARET; break;
     c74:	8d e3       	ldi	r24, 0x3D	; 61
     c76:	08 95       	ret
		case '_' : return USCORE; break;
     c78:	8e e3       	ldi	r24, 0x3E	; 62
     c7a:	08 95       	ret
		case '`' : return OQUOTE; break;
     c7c:	8f e3       	ldi	r24, 0x3F	; 63
     c7e:	08 95       	ret
		case 'a' : return LOWERA; break;
     c80:	80 e4       	ldi	r24, 0x40	; 64
     c82:	08 95       	ret
		case '{' : return OCURL; break;
     c84:	8a e5       	ldi	r24, 0x5A	; 90
     c86:	08 95       	ret
			case '|' : return PIPE; break;
     c88:	8b e5       	ldi	r24, 0x5B	; 91
     c8a:	08 95       	ret
		case '}' : return CCURL; break;
     c8c:	8c e5       	ldi	r24, 0x5C	; 92
     c8e:	08 95       	ret
		case '~' : return TILDE; break;
     c90:	8d e5       	ldi	r24, 0x5D	; 93
     c92:	08 95       	ret
		
	}
	return QUESTION;
     c94:	8e e1       	ldi	r24, 0x1E	; 30
     c96:	08 95       	ret

uint8_t Punctuate(char mark)
{
	switch (mark)
	{
		case '!': return EXCLAMATION; break;
     c98:	80 e0       	ldi	r24, 0x00	; 0
		case '}' : return CCURL; break;
		case '~' : return TILDE; break;
		
	}
	return QUESTION;
}
     c9a:	08 95       	ret

00000c9c <_Z9WriteTextPK9FONT_INFOPKchhh>:

void WriteText(const FONT_INFO *fontp, const char text[], uint8_t x, uint8_t y, uint8_t orient )
{
     c9c:	2f 92       	push	r2
     c9e:	3f 92       	push	r3
     ca0:	4f 92       	push	r4
     ca2:	5f 92       	push	r5
     ca4:	6f 92       	push	r6
     ca6:	7f 92       	push	r7
     ca8:	8f 92       	push	r8
     caa:	9f 92       	push	r9
     cac:	af 92       	push	r10
     cae:	bf 92       	push	r11
     cb0:	cf 92       	push	r12
     cb2:	df 92       	push	r13
     cb4:	ef 92       	push	r14
     cb6:	ff 92       	push	r15
     cb8:	0f 93       	push	r16
     cba:	1f 93       	push	r17
     cbc:	cf 93       	push	r28
     cbe:	df 93       	push	r29
     cc0:	00 d0       	rcall	.+0      	; 0xcc2 <_Z9WriteTextPK9FONT_INFOPKchhh+0x26>
     cc2:	00 d0       	rcall	.+0      	; 0xcc4 <_Z9WriteTextPK9FONT_INFOPKchhh+0x28>
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	5c 01       	movw	r10, r24
     cca:	7a 83       	std	Y+2, r23	; 0x02
     ccc:	69 83       	std	Y+1, r22	; 0x01
     cce:	14 2f       	mov	r17, r20
     cd0:	22 2e       	mov	r2, r18
     cd2:	e0 2e       	mov	r14, r16
			fb.drawBitmap(fontp->data +pgm_read_word(&(fontp->charInfo[chars[i]].offset)),fontp->heightPixels,pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits)),x,y);
			x=x+pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits))+2;
		}
	}
	
}
     cd4:	2d b7       	in	r18, 0x3d	; 61
     cd6:	3e b7       	in	r19, 0x3e	; 62
     cd8:	3c 83       	std	Y+4, r19	; 0x04
     cda:	2b 83       	std	Y+3, r18	; 0x03

void WriteText(const FONT_INFO *fontp, const char text[], uint8_t x, uint8_t y, uint8_t orient )
{
	
	//uint8_t chars[sizeof(text)];
	uint8_t nChars = (strlen(text));
     cdc:	fb 01       	movw	r30, r22
     cde:	01 90       	ld	r0, Z+
     ce0:	00 20       	and	r0, r0
     ce2:	e9 f7       	brne	.-6      	; 0xcde <_Z9WriteTextPK9FONT_INFOPKchhh+0x42>
     ce4:	31 97       	sbiw	r30, 0x01	; 1
     ce6:	cf 01       	movw	r24, r30
     ce8:	86 1b       	sub	r24, r22
     cea:	97 0b       	sbc	r25, r23
     cec:	f8 2e       	mov	r15, r24
     cee:	99 27       	eor	r25, r25
	uint8_t chars[nChars]={0};
     cf0:	ed b7       	in	r30, 0x3d	; 61
     cf2:	fe b7       	in	r31, 0x3e	; 62
     cf4:	e8 1b       	sub	r30, r24
     cf6:	f9 0b       	sbc	r31, r25
     cf8:	0f b6       	in	r0, 0x3f	; 63
     cfa:	f8 94       	cli
     cfc:	fe bf       	out	0x3e, r31	; 62
     cfe:	0f be       	out	0x3f, r0	; 63
     d00:	ed bf       	out	0x3d, r30	; 61
     d02:	2d b7       	in	r18, 0x3d	; 61
     d04:	3e b7       	in	r19, 0x3e	; 62
     d06:	2f 5f       	subi	r18, 0xFF	; 255
     d08:	3f 4f       	sbci	r19, 0xFF	; 255
     d0a:	29 01       	movw	r4, r18
     d0c:	11 82       	std	Z+1, r1	; 0x01
     d0e:	32 96       	adiw	r30, 0x02	; 2
     d10:	81 30       	cpi	r24, 0x01	; 1
     d12:	91 05       	cpc	r25, r1
     d14:	31 f0       	breq	.+12     	; 0xd22 <_Z9WriteTextPK9FONT_INFOPKchhh+0x86>
     d16:	82 0f       	add	r24, r18
     d18:	93 1f       	adc	r25, r19
     d1a:	11 92       	st	Z+, r1
     d1c:	e8 17       	cp	r30, r24
     d1e:	f9 07       	cpc	r31, r25
     d20:	e1 f7       	brne	.-8      	; 0xd1a <_Z9WriteTextPK9FONT_INFOPKchhh+0x7e>
	
	uint8_t width=0;

	
	//for (uint8_t i=0; i<sizeof(text);i++)
	for (uint8_t i=0; i<nChars;i++)
     d22:	ff 20       	and	r15, r15
     d24:	09 f4       	brne	.+2      	; 0xd28 <_Z9WriteTextPK9FONT_INFOPKchhh+0x8c>
     d26:	a1 c0       	rjmp	.+322    	; 0xe6a <_Z9WriteTextPK9FONT_INFOPKchhh+0x1ce>
     d28:	89 80       	ldd	r8, Y+1	; 0x01
     d2a:	9a 80       	ldd	r9, Y+2	; 0x02
     d2c:	04 2d       	mov	r16, r4
     d2e:	c4 2c       	mov	r12, r4
     d30:	d5 2c       	mov	r13, r5
     d32:	31 2c       	mov	r3, r1
	{
		if ((uint8_t)text[i]==0x20) width=width+fontp->spacePixels;
     d34:	d4 01       	movw	r26, r8
     d36:	8d 91       	ld	r24, X+
     d38:	4d 01       	movw	r8, r26
     d3a:	80 32       	cpi	r24, 0x20	; 32
     d3c:	21 f4       	brne	.+8      	; 0xd46 <_Z9WriteTextPK9FONT_INFOPKchhh+0xaa>
     d3e:	f5 01       	movw	r30, r10
     d40:	83 81       	ldd	r24, Z+3	; 0x03
     d42:	38 0e       	add	r3, r24
     d44:	34 c0       	rjmp	.+104    	; 0xdae <_Z9WriteTextPK9FONT_INFOPKchhh+0x112>
		else
		{
			if ((uint8_t)text[i]>=0x41 && (uint8_t)text[i]<=0x5A) chars[i]=(uint8_t)text[i]-0x41+CAPA;
     d46:	9f eb       	ldi	r25, 0xBF	; 191
     d48:	98 0f       	add	r25, r24
     d4a:	9a 31       	cpi	r25, 0x1A	; 26
     d4c:	20 f4       	brcc	.+8      	; 0xd56 <_Z9WriteTextPK9FONT_INFOPKchhh+0xba>
     d4e:	9f ed       	ldi	r25, 0xDF	; 223
     d50:	98 0f       	add	r25, r24
     d52:	d6 01       	movw	r26, r12
     d54:	9c 93       	st	X, r25
			if ((uint8_t)text[i]>=0x61 && (uint8_t)text[i]<=0x7A) chars[i]=(uint8_t)text[i]-0x61+LOWERA;
     d56:	9f e9       	ldi	r25, 0x9F	; 159
     d58:	98 0f       	add	r25, r24
     d5a:	9a 31       	cpi	r25, 0x1A	; 26
     d5c:	20 f4       	brcc	.+8      	; 0xd66 <_Z9WriteTextPK9FONT_INFOPKchhh+0xca>
     d5e:	9f ed       	ldi	r25, 0xDF	; 223
     d60:	98 0f       	add	r25, r24
     d62:	f6 01       	movw	r30, r12
     d64:	90 83       	st	Z, r25
			if ((uint8_t)text[i]>=0x30 && (uint8_t)text[i]<=0x39) chars[i]=(uint8_t)text[i]-0x30+ZERO;
     d66:	90 ed       	ldi	r25, 0xD0	; 208
     d68:	98 0f       	add	r25, r24
     d6a:	9a 30       	cpi	r25, 0x0A	; 10
     d6c:	20 f4       	brcc	.+8      	; 0xd76 <_Z9WriteTextPK9FONT_INFOPKchhh+0xda>
     d6e:	9f ed       	ldi	r25, 0xDF	; 223
     d70:	98 0f       	add	r25, r24
     d72:	d6 01       	movw	r26, r12
     d74:	9c 93       	st	X, r25
     d76:	36 01       	movw	r6, r12
			if (chars[i]==0) chars[i]=Punctuate(text[i]);
     d78:	f6 01       	movw	r30, r12
     d7a:	90 81       	ld	r25, Z
     d7c:	91 11       	cpse	r25, r1
     d7e:	04 c0       	rjmp	.+8      	; 0xd88 <_Z9WriteTextPK9FONT_INFOPKchhh+0xec>
     d80:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <_Z9Punctuatec>
     d84:	d6 01       	movw	r26, r12
     d86:	8c 93       	st	X, r24
			width=width+pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits))+2;
     d88:	d3 01       	movw	r26, r6
     d8a:	ec 91       	ld	r30, X
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	cf 01       	movw	r24, r30
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	e8 0f       	add	r30, r24
     d96:	f9 1f       	adc	r31, r25
     d98:	d5 01       	movw	r26, r10
     d9a:	14 96       	adiw	r26, 0x04	; 4
     d9c:	8d 91       	ld	r24, X+
     d9e:	9c 91       	ld	r25, X
     da0:	15 97       	sbiw	r26, 0x05	; 5
     da2:	e8 0f       	add	r30, r24
     da4:	f9 1f       	adc	r31, r25
     da6:	e4 91       	lpm	r30, Z
     da8:	33 94       	inc	r3
     daa:	33 94       	inc	r3
     dac:	3e 0e       	add	r3, r30
     dae:	bf ef       	ldi	r27, 0xFF	; 255
     db0:	cb 1a       	sub	r12, r27
     db2:	db 0a       	sbc	r13, r27
     db4:	8c 2d       	mov	r24, r12
     db6:	80 1b       	sub	r24, r16
	
	uint8_t width=0;

	
	//for (uint8_t i=0; i<sizeof(text);i++)
	for (uint8_t i=0; i<nChars;i++)
     db8:	8f 15       	cp	r24, r15
     dba:	08 f4       	brcc	.+2      	; 0xdbe <_Z9WriteTextPK9FONT_INFOPKchhh+0x122>
     dbc:	bb cf       	rjmp	.-138    	; 0xd34 <_Z9WriteTextPK9FONT_INFOPKchhh+0x98>
			if ((uint8_t)text[i]>=0x30 && (uint8_t)text[i]<=0x39) chars[i]=(uint8_t)text[i]-0x30+ZERO;
			if (chars[i]==0) chars[i]=Punctuate(text[i]);
			width=width+pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits))+2;
		}
	}
	switch(orient)
     dbe:	e1 e0       	ldi	r30, 0x01	; 1
     dc0:	ee 16       	cp	r14, r30
     dc2:	49 f0       	breq	.+18     	; 0xdd6 <_Z9WriteTextPK9FONT_INFOPKchhh+0x13a>
     dc4:	ee 16       	cp	r14, r30
     dc6:	20 f0       	brcs	.+8      	; 0xdd0 <_Z9WriteTextPK9FONT_INFOPKchhh+0x134>
     dc8:	f2 e0       	ldi	r31, 0x02	; 2
     dca:	ef 16       	cp	r14, r31
     dcc:	49 f0       	breq	.+18     	; 0xde0 <_Z9WriteTextPK9FONT_INFOPKchhh+0x144>
     dce:	0a c0       	rjmp	.+20     	; 0xde4 <_Z9WriteTextPK9FONT_INFOPKchhh+0x148>
	{
		case LEFT: x=0; break;
     dd0:	10 e0       	ldi	r17, 0x00	; 0
     dd2:	08 c0       	rjmp	.+16     	; 0xde4 <_Z9WriteTextPK9FONT_INFOPKchhh+0x148>
			if ((uint8_t)text[i]>=0x30 && (uint8_t)text[i]<=0x39) chars[i]=(uint8_t)text[i]-0x30+ZERO;
			if (chars[i]==0) chars[i]=Punctuate(text[i]);
			width=width+pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits))+2;
		}
	}
	switch(orient)
     dd4:	31 2c       	mov	r3, r1
	{
		case LEFT: x=0; break;
		case CENTRE: x=64-(width/2); break;
     dd6:	36 94       	lsr	r3
     dd8:	10 e4       	ldi	r17, 0x40	; 64
     dda:	13 19       	sub	r17, r3
     ddc:	03 c0       	rjmp	.+6      	; 0xde4 <_Z9WriteTextPK9FONT_INFOPKchhh+0x148>
			if ((uint8_t)text[i]>=0x30 && (uint8_t)text[i]<=0x39) chars[i]=(uint8_t)text[i]-0x30+ZERO;
			if (chars[i]==0) chars[i]=Punctuate(text[i]);
			width=width+pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits))+2;
		}
	}
	switch(orient)
     dde:	31 2c       	mov	r3, r1
	{
		case LEFT: x=0; break;
		case CENTRE: x=64-(width/2); break;
		case RIGHT: x=128-width; break;
     de0:	10 e8       	ldi	r17, 0x80	; 128
     de2:	13 19       	sub	r17, r3
	}
	//for (uint8_t i=0; i<sizeof(text);i++)
	for (uint8_t i=0; i<nChars;i++)
     de4:	ff 20       	and	r15, r15
     de6:	09 f4       	brne	.+2      	; 0xdea <_Z9WriteTextPK9FONT_INFOPKchhh+0x14e>
     de8:	4b c0       	rjmp	.+150    	; 0xe80 <_Z9WriteTextPK9FONT_INFOPKchhh+0x1e4>
     dea:	39 80       	ldd	r3, Y+1	; 0x01
     dec:	32 01       	movw	r6, r4
     dee:	83 2c       	mov	r8, r3
     df0:	9a 80       	ldd	r9, Y+2	; 0x02
	{
		if ((uint8_t)text[i]==0x20) x=x+fontp->spacePixels;
     df2:	d4 01       	movw	r26, r8
     df4:	8d 91       	ld	r24, X+
     df6:	4d 01       	movw	r8, r26
     df8:	80 32       	cpi	r24, 0x20	; 32
     dfa:	21 f4       	brne	.+8      	; 0xe04 <_Z9WriteTextPK9FONT_INFOPKchhh+0x168>
     dfc:	f5 01       	movw	r30, r10
     dfe:	83 81       	ldd	r24, Z+3	; 0x03
     e00:	18 0f       	add	r17, r24
     e02:	2a c0       	rjmp	.+84     	; 0xe58 <_Z9WriteTextPK9FONT_INFOPKchhh+0x1bc>
		else
		{
			fb.drawBitmap(fontp->data +pgm_read_word(&(fontp->charInfo[chars[i]].offset)),fontp->heightPixels,pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits)),x,y);
     e04:	d3 01       	movw	r26, r6
     e06:	cc 90       	ld	r12, X
     e08:	8c 2d       	mov	r24, r12
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	6c 01       	movw	r12, r24
     e0e:	cc 0c       	add	r12, r12
     e10:	dd 1c       	adc	r13, r13
     e12:	c8 0e       	add	r12, r24
     e14:	d9 1e       	adc	r13, r25
     e16:	d5 01       	movw	r26, r10
     e18:	14 96       	adiw	r26, 0x04	; 4
     e1a:	ed 91       	ld	r30, X+
     e1c:	fc 91       	ld	r31, X
     e1e:	15 97       	sbiw	r26, 0x05	; 5
     e20:	ec 0d       	add	r30, r12
     e22:	fd 1d       	adc	r31, r13
     e24:	24 91       	lpm	r18, Z
     e26:	31 96       	adiw	r30, 0x01	; 1
     e28:	85 91       	lpm	r24, Z+
     e2a:	94 91       	lpm	r25, Z
     e2c:	f5 01       	movw	r30, r10
     e2e:	66 81       	ldd	r22, Z+6	; 0x06
     e30:	77 81       	ldd	r23, Z+7	; 0x07
     e32:	68 0f       	add	r22, r24
     e34:	79 1f       	adc	r23, r25
     e36:	e2 2c       	mov	r14, r2
     e38:	01 2f       	mov	r16, r17
     e3a:	40 81       	ld	r20, Z
     e3c:	81 ee       	ldi	r24, 0xE1	; 225
     e3e:	91 e0       	ldi	r25, 0x01	; 1
     e40:	0e 94 87 04 	call	0x90e	; 0x90e <_ZN11Framebuffer10drawBitmapEPKhhhhh>
			x=x+pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits))+2;
     e44:	d5 01       	movw	r26, r10
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	ed 91       	ld	r30, X+
     e4a:	fc 91       	ld	r31, X
     e4c:	15 97       	sbiw	r26, 0x05	; 5
     e4e:	ec 0d       	add	r30, r12
     e50:	fd 1d       	adc	r31, r13
     e52:	e4 91       	lpm	r30, Z
     e54:	1e 5f       	subi	r17, 0xFE	; 254
     e56:	1e 0f       	add	r17, r30
     e58:	bf ef       	ldi	r27, 0xFF	; 255
     e5a:	6b 1a       	sub	r6, r27
     e5c:	7b 0a       	sbc	r7, r27
     e5e:	88 2d       	mov	r24, r8
     e60:	83 19       	sub	r24, r3
		case LEFT: x=0; break;
		case CENTRE: x=64-(width/2); break;
		case RIGHT: x=128-width; break;
	}
	//for (uint8_t i=0; i<sizeof(text);i++)
	for (uint8_t i=0; i<nChars;i++)
     e62:	8f 15       	cp	r24, r15
     e64:	08 f4       	brcc	.+2      	; 0xe68 <_Z9WriteTextPK9FONT_INFOPKchhh+0x1cc>
     e66:	c5 cf       	rjmp	.-118    	; 0xdf2 <_Z9WriteTextPK9FONT_INFOPKchhh+0x156>
     e68:	0b c0       	rjmp	.+22     	; 0xe80 <_Z9WriteTextPK9FONT_INFOPKchhh+0x1e4>
			if ((uint8_t)text[i]>=0x30 && (uint8_t)text[i]<=0x39) chars[i]=(uint8_t)text[i]-0x30+ZERO;
			if (chars[i]==0) chars[i]=Punctuate(text[i]);
			width=width+pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits))+2;
		}
	}
	switch(orient)
     e6a:	e1 e0       	ldi	r30, 0x01	; 1
     e6c:	ee 16       	cp	r14, r30
     e6e:	09 f4       	brne	.+2      	; 0xe72 <_Z9WriteTextPK9FONT_INFOPKchhh+0x1d6>
     e70:	b1 cf       	rjmp	.-158    	; 0xdd4 <_Z9WriteTextPK9FONT_INFOPKchhh+0x138>
     e72:	ee 16       	cp	r14, r30
     e74:	08 f4       	brcc	.+2      	; 0xe78 <_Z9WriteTextPK9FONT_INFOPKchhh+0x1dc>
     e76:	ac cf       	rjmp	.-168    	; 0xdd0 <_Z9WriteTextPK9FONT_INFOPKchhh+0x134>
     e78:	f2 e0       	ldi	r31, 0x02	; 2
     e7a:	ef 16       	cp	r14, r31
     e7c:	09 f4       	brne	.+2      	; 0xe80 <_Z9WriteTextPK9FONT_INFOPKchhh+0x1e4>
     e7e:	af cf       	rjmp	.-162    	; 0xdde <_Z9WriteTextPK9FONT_INFOPKchhh+0x142>
			fb.drawBitmap(fontp->data +pgm_read_word(&(fontp->charInfo[chars[i]].offset)),fontp->heightPixels,pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits)),x,y);
			x=x+pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits))+2;
		}
	}
	
}
     e80:	2b 81       	ldd	r18, Y+3	; 0x03
     e82:	3c 81       	ldd	r19, Y+4	; 0x04
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	f8 94       	cli
     e88:	3e bf       	out	0x3e, r19	; 62
     e8a:	0f be       	out	0x3f, r0	; 63
     e8c:	2d bf       	out	0x3d, r18	; 61
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	1f 91       	pop	r17
     e9c:	0f 91       	pop	r16
     e9e:	ff 90       	pop	r15
     ea0:	ef 90       	pop	r14
     ea2:	df 90       	pop	r13
     ea4:	cf 90       	pop	r12
     ea6:	bf 90       	pop	r11
     ea8:	af 90       	pop	r10
     eaa:	9f 90       	pop	r9
     eac:	8f 90       	pop	r8
     eae:	7f 90       	pop	r7
     eb0:	6f 90       	pop	r6
     eb2:	5f 90       	pop	r5
     eb4:	4f 90       	pop	r4
     eb6:	3f 90       	pop	r3
     eb8:	2f 90       	pop	r2
     eba:	08 95       	ret

00000ebc <_Z11Byte2StringPch>:

void Byte2String (char* outstr ,uint8_t u8t)
{
     ebc:	fc 01       	movw	r30, r24
	
	if((uint8_t)u8t/100==0){
     ebe:	64 36       	cpi	r22, 0x64	; 100
     ec0:	80 f4       	brcc	.+32     	; 0xee2 <_Z11Byte2StringPch+0x26>
		outstr[0]=0x20;
     ec2:	80 e2       	ldi	r24, 0x20	; 32
     ec4:	80 83       	st	Z, r24
	} else {
		outstr[0]=0x30 + (uint8_t)u8t/100;
	}	
	
	if((uint8_t)u8t/100==0 && (uint8_t)(u8t%100)/10==0){
     ec6:	89 e2       	ldi	r24, 0x29	; 41
     ec8:	68 9f       	mul	r22, r24
     eca:	81 2d       	mov	r24, r1
     ecc:	11 24       	eor	r1, r1
     ece:	82 95       	swap	r24
     ed0:	8f 70       	andi	r24, 0x0F	; 15
     ed2:	96 2f       	mov	r25, r22
     ed4:	24 e6       	ldi	r18, 0x64	; 100
     ed6:	82 9f       	mul	r24, r18
     ed8:	90 19       	sub	r25, r0
     eda:	11 24       	eor	r1, r1
     edc:	9a 30       	cpi	r25, 0x0A	; 10
     ede:	68 f4       	brcc	.+26     	; 0xefa <_Z11Byte2StringPch+0x3e>
     ee0:	09 c0       	rjmp	.+18     	; 0xef4 <_Z11Byte2StringPch+0x38>
{
	
	if((uint8_t)u8t/100==0){
		outstr[0]=0x20;
	} else {
		outstr[0]=0x30 + (uint8_t)u8t/100;
     ee2:	89 e2       	ldi	r24, 0x29	; 41
     ee4:	68 9f       	mul	r22, r24
     ee6:	81 2d       	mov	r24, r1
     ee8:	11 24       	eor	r1, r1
     eea:	82 95       	swap	r24
     eec:	8f 70       	andi	r24, 0x0F	; 15
     eee:	80 5d       	subi	r24, 0xD0	; 208
     ef0:	80 83       	st	Z, r24
     ef2:	03 c0       	rjmp	.+6      	; 0xefa <_Z11Byte2StringPch+0x3e>
	}	
	
	if((uint8_t)u8t/100==0 && (uint8_t)(u8t%100)/10==0){
		outstr[1]=0x20;
     ef4:	80 e2       	ldi	r24, 0x20	; 32
     ef6:	81 83       	std	Z+1, r24	; 0x01
     ef8:	15 c0       	rjmp	.+42     	; 0xf24 <_Z11Byte2StringPch+0x68>
	} else {
		outstr[1]= 0x30 + (uint8_t)(u8t%100)/10;
     efa:	99 e2       	ldi	r25, 0x29	; 41
     efc:	69 9f       	mul	r22, r25
     efe:	91 2d       	mov	r25, r1
     f00:	11 24       	eor	r1, r1
     f02:	92 95       	swap	r25
     f04:	9f 70       	andi	r25, 0x0F	; 15
     f06:	86 2f       	mov	r24, r22
     f08:	24 e6       	ldi	r18, 0x64	; 100
     f0a:	92 9f       	mul	r25, r18
     f0c:	80 19       	sub	r24, r0
     f0e:	11 24       	eor	r1, r1
     f10:	98 2f       	mov	r25, r24
     f12:	8d ec       	ldi	r24, 0xCD	; 205
     f14:	98 9f       	mul	r25, r24
     f16:	91 2d       	mov	r25, r1
     f18:	11 24       	eor	r1, r1
     f1a:	96 95       	lsr	r25
     f1c:	96 95       	lsr	r25
     f1e:	96 95       	lsr	r25
     f20:	90 5d       	subi	r25, 0xD0	; 208
     f22:	91 83       	std	Z+1, r25	; 0x01
	}
	
	outstr[2]=0x30 + (uint8_t)(u8t%10);
     f24:	9d ec       	ldi	r25, 0xCD	; 205
     f26:	69 9f       	mul	r22, r25
     f28:	91 2d       	mov	r25, r1
     f2a:	11 24       	eor	r1, r1
     f2c:	96 95       	lsr	r25
     f2e:	96 95       	lsr	r25
     f30:	96 95       	lsr	r25
     f32:	99 0f       	add	r25, r25
     f34:	89 2f       	mov	r24, r25
     f36:	88 0f       	add	r24, r24
     f38:	88 0f       	add	r24, r24
     f3a:	98 0f       	add	r25, r24
     f3c:	69 1b       	sub	r22, r25
     f3e:	60 5d       	subi	r22, 0xD0	; 208
     f40:	62 83       	std	Z+2, r22	; 0x02
     f42:	08 95       	ret

00000f44 <__vector_11>:
}


ISR(TIMER1_COMPA_vect) { 
     f44:	1f 92       	push	r1
     f46:	0f 92       	push	r0
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	0f 92       	push	r0
     f4c:	11 24       	eor	r1, r1
     f4e:	2f 93       	push	r18
     f50:	3f 93       	push	r19
     f52:	4f 93       	push	r20
     f54:	5f 93       	push	r21
     f56:	8f 93       	push	r24
     f58:	9f 93       	push	r25
     f5a:	ef 93       	push	r30
     f5c:	ff 93       	push	r31

	TC++;
     f5e:	80 91 de 01 	lds	r24, 0x01DE
     f62:	90 91 df 01 	lds	r25, 0x01DF
     f66:	01 96       	adiw	r24, 0x01	; 1
     f68:	90 93 df 01 	sts	0x01DF, r25
     f6c:	80 93 de 01 	sts	0x01DE, r24
	if ((PIND & (1<<DDD3))) {
     f70:	4b 9b       	sbis	0x09, 3	; 9
     f72:	1d c0       	rjmp	.+58     	; 0xfae <__vector_11+0x6a>
		
//		fb.buffer[(uint16_t)(TC%8)*128+(TC/8)]=0xFF;
		buffer[(uint16_t)TC/8] |= (1<<(TC%8));
     f74:	20 91 de 01 	lds	r18, 0x01DE
     f78:	30 91 df 01 	lds	r19, 0x01DF
     f7c:	e0 91 de 01 	lds	r30, 0x01DE
     f80:	f0 91 df 01 	lds	r31, 0x01DF
     f84:	f6 95       	lsr	r31
     f86:	e7 95       	ror	r30
     f88:	f6 95       	lsr	r31
     f8a:	e7 95       	ror	r30
     f8c:	f6 95       	lsr	r31
     f8e:	e7 95       	ror	r30
     f90:	eb 5f       	subi	r30, 0xFB	; 251
     f92:	fe 4f       	sbci	r31, 0xFE	; 254
     f94:	40 81       	ld	r20, Z
     f96:	27 70       	andi	r18, 0x07	; 7
     f98:	33 27       	eor	r19, r19
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <__vector_11+0x60>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	2a 95       	dec	r18
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <__vector_11+0x5c>
     fa8:	84 2b       	or	r24, r20
     faa:	80 83       	st	Z, r24
     fac:	20 c0       	rjmp	.+64     	; 0xfee <__vector_11+0xaa>
	
	} else {
//		fb.buffer[(uint16_t)(TC%8)*128+(TC/8)]=0x00;	
		buffer[(uint16_t)TC/8] &= ~(1<<(TC%8));
     fae:	40 91 de 01 	lds	r20, 0x01DE
     fb2:	50 91 df 01 	lds	r21, 0x01DF
     fb6:	e0 91 de 01 	lds	r30, 0x01DE
     fba:	f0 91 df 01 	lds	r31, 0x01DF
     fbe:	f6 95       	lsr	r31
     fc0:	e7 95       	ror	r30
     fc2:	f6 95       	lsr	r31
     fc4:	e7 95       	ror	r30
     fc6:	f6 95       	lsr	r31
     fc8:	e7 95       	ror	r30
     fca:	eb 5f       	subi	r30, 0xFB	; 251
     fcc:	fe 4f       	sbci	r31, 0xFE	; 254
     fce:	20 81       	ld	r18, Z
     fd0:	47 70       	andi	r20, 0x07	; 7
     fd2:	55 27       	eor	r21, r21
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <__vector_11+0x9a>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	4a 95       	dec	r20
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <__vector_11+0x96>
     fe2:	80 95       	com	r24
     fe4:	90 95       	com	r25
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	82 23       	and	r24, r18
     fea:	93 23       	and	r25, r19
     fec:	80 83       	st	Z, r24
	
	}
	if (TC>=1000) {
     fee:	80 91 de 01 	lds	r24, 0x01DE
     ff2:	90 91 df 01 	lds	r25, 0x01DF
     ff6:	88 3e       	cpi	r24, 0xE8	; 232
     ff8:	93 40       	sbci	r25, 0x03	; 3
     ffa:	20 f0       	brcs	.+8      	; 0x1004 <__vector_11+0xc0>
		TC=0;
     ffc:	10 92 df 01 	sts	0x01DF, r1
    1000:	10 92 de 01 	sts	0x01DE, r1

	}	

	if (TC==LEdge) { 
    1004:	20 91 de 01 	lds	r18, 0x01DE
    1008:	30 91 df 01 	lds	r19, 0x01DF
    100c:	80 91 dc 01 	lds	r24, 0x01DC
    1010:	90 91 dd 01 	lds	r25, 0x01DD
    1014:	28 17       	cp	r18, r24
    1016:	39 07       	cpc	r19, r25
    1018:	59 f4       	brne	.+22     	; 0x1030 <__vector_11+0xec>
		TICK=true;	
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	80 93 e0 01 	sts	0x01E0, r24
		TC=0;
    1020:	10 92 df 01 	sts	0x01DF, r1
    1024:	10 92 de 01 	sts	0x01DE, r1
		LEdge=0;
    1028:	10 92 dd 01 	sts	0x01DD, r1
    102c:	10 92 dc 01 	sts	0x01DC, r1
	}

}
    1030:	ff 91       	pop	r31
    1032:	ef 91       	pop	r30
    1034:	9f 91       	pop	r25
    1036:	8f 91       	pop	r24
    1038:	5f 91       	pop	r21
    103a:	4f 91       	pop	r20
    103c:	3f 91       	pop	r19
    103e:	2f 91       	pop	r18
    1040:	0f 90       	pop	r0
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	0f 90       	pop	r0
    1046:	1f 90       	pop	r1
    1048:	18 95       	reti

0000104a <main>:



int main(void)
{
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	c1 5a       	subi	r28, 0xA1	; 161
    1054:	d1 09       	sbc	r29, r1
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	cd bf       	out	0x3d, r28	; 61
	uint16_t y=0;
	
	// Leading Edge detection variables
	uint16_t LEdgeSMin=0; // bottom of leading edge search range
	uint8_t LEdgeSRange=100; // leading edge search bin size - effectively acts as Ledge Search mode too
	uint8_t LEdgeCount[10]={0}; // count of hits in each bin for current second
    1060:	fe 01       	movw	r30, r28
    1062:	ed 57       	subi	r30, 0x7D	; 125
    1064:	ff 4f       	sbci	r31, 0xFF	; 255
    1066:	8a e0       	ldi	r24, 0x0A	; 10
    1068:	df 01       	movw	r26, r30
    106a:	28 2f       	mov	r18, r24
    106c:	1d 92       	st	X+, r1
    106e:	2a 95       	dec	r18
    1070:	e9 f7       	brne	.-6      	; 0x106c <main+0x22>
	uint8_t LEdgeSum[10]={0};	// count of consecutive seconds that a bin has had a hit
    1072:	3a 97       	sbiw	r30, 0x0a	; 10
    1074:	df 01       	movw	r26, r30
    1076:	1d 92       	st	X+, r1
    1078:	8a 95       	dec	r24
    107a:	e9 f7       	brne	.-6      	; 0x1076 <main+0x2c>
	bool MMarkFound=false; // has the Minute Marker been found
	uint8_t SigSecond=0; // what second are we at during the minute?
	uint8_t BitASample=0; // for counting the strikes in the BitA window 
	uint8_t BitBSample=0; // for counting the strikes in the BitB window
	uint8_t BitCSample=0; // for counting the strikes in the remainder of the first half of the second
	bool BitA[60]={false}; // BitA array (one minute's worth)
    107c:	8c e3       	ldi	r24, 0x3C	; 60
    107e:	fc 97       	sbiw	r30, 0x3c	; 60
    1080:	df 01       	movw	r26, r30
    1082:	28 2f       	mov	r18, r24
    1084:	1d 92       	st	X+, r1
    1086:	2a 95       	dec	r18
    1088:	e9 f7       	brne	.-6      	; 0x1084 <main+0x3a>
	bool BitB[60]={false}; // BitB array (one minute's worth)
    108a:	fc 97       	sbiw	r30, 0x3c	; 60
    108c:	df 01       	movw	r26, r30
    108e:	1d 92       	st	X+, r1
    1090:	8a 95       	dec	r24
    1092:	e9 f7       	brne	.-6      	; 0x108e <main+0x44>
		
	bool PinState=false;
	bool PrevPinState=false;
	
	// Character array for displaying bytes as text
	char BString[4]="   ";
    1094:	80 e2       	ldi	r24, 0x20	; 32
    1096:	90 e2       	ldi	r25, 0x20	; 32
    1098:	a0 e2       	ldi	r26, 0x20	; 32
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	c3 57       	subi	r28, 0x73	; 115
    109e:	df 4f       	sbci	r29, 0xFF	; 255
    10a0:	88 83       	st	Y, r24
    10a2:	99 83       	std	Y+1, r25	; 0x01
    10a4:	aa 83       	std	Y+2, r26	; 0x02
    10a6:	bb 83       	std	Y+3, r27	; 0x03
    10a8:	cd 58       	subi	r28, 0x8D	; 141
    10aa:	d0 40       	sbci	r29, 0x00	; 0
	
	// Show splash-screen
	fb.clear();
    10ac:	81 ee       	ldi	r24, 0xE1	; 225
    10ae:	91 e0       	ldi	r25, 0x01	; 1
    10b0:	0e 94 8e 05 	call	0xb1c	; 0xb1c <_ZN11Framebuffer5clearEv>
	fb.drawBitmap(Atomic,64,64,32,0);
    10b4:	e1 2c       	mov	r14, r1
    10b6:	00 e2       	ldi	r16, 0x20	; 32
    10b8:	20 e4       	ldi	r18, 0x40	; 64
    10ba:	40 e4       	ldi	r20, 0x40	; 64
    10bc:	68 e4       	ldi	r22, 0x48	; 72
    10be:	76 e0       	ldi	r23, 0x06	; 6
    10c0:	81 ee       	ldi	r24, 0xE1	; 225
    10c2:	91 e0       	ldi	r25, 0x01	; 1
    10c4:	0e 94 87 04 	call	0x90e	; 0x90e <_ZN11Framebuffer10drawBitmapEPKhhhhh>
	fb.show();
    10c8:	81 ee       	ldi	r24, 0xE1	; 225
    10ca:	91 e0       	ldi	r25, 0x01	; 1
    10cc:	0e 94 a1 05 	call	0xb42	; 0xb42 <_ZN11Framebuffer4showEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10d0:	bf ef       	ldi	r27, 0xFF	; 255
    10d2:	eb e7       	ldi	r30, 0x7B	; 123
    10d4:	f2 e9       	ldi	r31, 0x92	; 146
    10d6:	b1 50       	subi	r27, 0x01	; 1
    10d8:	e0 40       	sbci	r30, 0x00	; 0
    10da:	f0 40       	sbci	r31, 0x00	; 0
    10dc:	e1 f7       	brne	.-8      	; 0x10d6 <main+0x8c>
    10de:	00 c0       	rjmp	.+0      	; 0x10e0 <main+0x96>
    10e0:	00 00       	nop
	_delay_ms(3000);
	fb.clear();
    10e2:	81 ee       	ldi	r24, 0xE1	; 225
    10e4:	91 e0       	ldi	r25, 0x01	; 1
    10e6:	0e 94 8e 05 	call	0xb1c	; 0xb1c <_ZN11Framebuffer5clearEv>
	fb.show();
    10ea:	81 ee       	ldi	r24, 0xE1	; 225
    10ec:	91 e0       	ldi	r25, 0x01	; 1
    10ee:	0e 94 a1 05 	call	0xb42	; 0xb42 <_ZN11Framebuffer4showEv>


	// Enable atomic clock pulse pin for input
	DDRD &= ~(1<<DDD3);// // pin PC3
    10f2:	53 98       	cbi	0x0a, 3	; 10
	PORTD |= (1<<DDD3); //  pin PC3 set to pulled-up
    10f4:	5b 9a       	sbi	0x0b, 3	; 11
	
	
	// Initialise ticker
	TCCR1B |= (1 << WGM12); // Configure timer 1 for CTC mode
    10f6:	e1 e8       	ldi	r30, 0x81	; 129
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	88 60       	ori	r24, 0x08	; 8
    10fe:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS11); // Start timer at Fcpu/8
    1100:	80 81       	ld	r24, Z
    1102:	82 60       	ori	r24, 0x02	; 2
    1104:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A); // Enable CTC interrupt
    1106:	ef e6       	ldi	r30, 0x6F	; 111
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	80 81       	ld	r24, Z
    110c:	82 60       	ori	r24, 0x02	; 2
    110e:	80 83       	st	Z, r24
	sei(); // Enable global interrupts
    1110:	78 94       	sei
	OCR1A = 1999; // Set CTC compare value to 1000Hz at 16MHz AVR clock, with a prescaler of 8
    1112:	8f ec       	ldi	r24, 0xCF	; 207
    1114:	97 e0       	ldi	r25, 0x07	; 7
    1116:	90 93 89 00 	sts	0x0089, r25
    111a:	80 93 88 00 	sts	0x0088, r24
	uint8_t SigDoW=0;
	uint8_t SigDay=0;
	uint8_t SigMonth=0;
	uint8_t SigYear=0;
		
	bool PinState=false;
    111e:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t SigMinute=0;
	uint8_t SigHour=0;
	uint8_t SigDoW=0;
	uint8_t SigDay=0;
	uint8_t SigMonth=0;
	uint8_t SigYear=0;
    1120:	cf 55       	subi	r28, 0x5F	; 95
    1122:	df 4f       	sbci	r29, 0xFF	; 255
    1124:	18 82       	st	Y, r1
    1126:	c1 5a       	subi	r28, 0xA1	; 161
    1128:	d0 40       	sbci	r29, 0x00	; 0
	bool BitC=false; // BitC - just for the current second as it has no use other than for the minute marker
	uint8_t SigMinute=0;
	uint8_t SigHour=0;
	uint8_t SigDoW=0;
	uint8_t SigDay=0;
	uint8_t SigMonth=0;
    112a:	c0 56       	subi	r28, 0x60	; 96
    112c:	df 4f       	sbci	r29, 0xFF	; 255
    112e:	18 82       	st	Y, r1
    1130:	c0 5a       	subi	r28, 0xA0	; 160
    1132:	d0 40       	sbci	r29, 0x00	; 0
	bool BitB[60]={false}; // BitB array (one minute's worth)
	bool BitC=false; // BitC - just for the current second as it has no use other than for the minute marker
	uint8_t SigMinute=0;
	uint8_t SigHour=0;
	uint8_t SigDoW=0;
	uint8_t SigDay=0;
    1134:	c1 56       	subi	r28, 0x61	; 97
    1136:	df 4f       	sbci	r29, 0xFF	; 255
    1138:	18 82       	st	Y, r1
    113a:	cf 59       	subi	r28, 0x9F	; 159
    113c:	d0 40       	sbci	r29, 0x00	; 0
	bool BitA[60]={false}; // BitA array (one minute's worth)
	bool BitB[60]={false}; // BitB array (one minute's worth)
	bool BitC=false; // BitC - just for the current second as it has no use other than for the minute marker
	uint8_t SigMinute=0;
	uint8_t SigHour=0;
	uint8_t SigDoW=0;
    113e:	c2 56       	subi	r28, 0x62	; 98
    1140:	df 4f       	sbci	r29, 0xFF	; 255
    1142:	18 82       	st	Y, r1
    1144:	ce 59       	subi	r28, 0x9E	; 158
    1146:	d0 40       	sbci	r29, 0x00	; 0
	uint8_t BitCSample=0; // for counting the strikes in the remainder of the first half of the second
	bool BitA[60]={false}; // BitA array (one minute's worth)
	bool BitB[60]={false}; // BitB array (one minute's worth)
	bool BitC=false; // BitC - just for the current second as it has no use other than for the minute marker
	uint8_t SigMinute=0;
	uint8_t SigHour=0;
    1148:	c3 56       	subi	r28, 0x63	; 99
    114a:	df 4f       	sbci	r29, 0xFF	; 255
    114c:	18 82       	st	Y, r1
    114e:	cd 59       	subi	r28, 0x9D	; 157
    1150:	d0 40       	sbci	r29, 0x00	; 0
	uint8_t BitBSample=0; // for counting the strikes in the BitB window
	uint8_t BitCSample=0; // for counting the strikes in the remainder of the first half of the second
	bool BitA[60]={false}; // BitA array (one minute's worth)
	bool BitB[60]={false}; // BitB array (one minute's worth)
	bool BitC=false; // BitC - just for the current second as it has no use other than for the minute marker
	uint8_t SigMinute=0;
    1152:	c4 56       	subi	r28, 0x64	; 100
    1154:	df 4f       	sbci	r29, 0xFF	; 255
    1156:	18 82       	st	Y, r1
    1158:	cc 59       	subi	r28, 0x9C	; 156
    115a:	d0 40       	sbci	r29, 0x00	; 0
	// Leading Edge adjustment variables
	bool LEdgeDetect= false;
	
	// Time decoding variables
	bool MMarkFound=false; // has the Minute Marker been found
	uint8_t SigSecond=0; // what second are we at during the minute?
    115c:	cc 56       	subi	r28, 0x6C	; 108
    115e:	df 4f       	sbci	r29, 0xFF	; 255
    1160:	18 82       	st	Y, r1
    1162:	c4 59       	subi	r28, 0x94	; 148
    1164:	d0 40       	sbci	r29, 0x00	; 0
	
	// Leading Edge adjustment variables
	bool LEdgeDetect= false;
	
	// Time decoding variables
	bool MMarkFound=false; // has the Minute Marker been found
    1166:	cb 56       	subi	r28, 0x6B	; 107
    1168:	df 4f       	sbci	r29, 0xFF	; 255
    116a:	18 82       	st	Y, r1
    116c:	c5 59       	subi	r28, 0x95	; 149
    116e:	d0 40       	sbci	r29, 0x00	; 0
	uint8_t LEdgeSRange=100; // leading edge search bin size - effectively acts as Ledge Search mode too
	uint8_t LEdgeCount[10]={0}; // count of hits in each bin for current second
	uint8_t LEdgeSum[10]={0};	// count of consecutive seconds that a bin has had a hit
	uint8_t LEMax=0; // bin with highest number of consecutive hits
	uint8_t LE2Max=0; // bin with second highest number of consecutive hits
	uint8_t LESecsInMode=0; // number of seconds that we have been in this LEdge Search mode
    1170:	c5 56       	subi	r28, 0x65	; 101
    1172:	df 4f       	sbci	r29, 0xFF	; 255
    1174:	18 82       	st	Y, r1
    1176:	cb 59       	subi	r28, 0x9B	; 155
    1178:	d0 40       	sbci	r29, 0x00	; 0
	uint16_t LEdgeSMin=0; // bottom of leading edge search range
	uint8_t LEdgeSRange=100; // leading edge search bin size - effectively acts as Ledge Search mode too
	uint8_t LEdgeCount[10]={0}; // count of hits in each bin for current second
	uint8_t LEdgeSum[10]={0};	// count of consecutive seconds that a bin has had a hit
	uint8_t LEMax=0; // bin with highest number of consecutive hits
	uint8_t LE2Max=0; // bin with second highest number of consecutive hits
    117a:	ca 56       	subi	r28, 0x6A	; 106
    117c:	df 4f       	sbci	r29, 0xFF	; 255
    117e:	18 82       	st	Y, r1
    1180:	c6 59       	subi	r28, 0x96	; 150
    1182:	d0 40       	sbci	r29, 0x00	; 0
	// Leading Edge detection variables
	uint16_t LEdgeSMin=0; // bottom of leading edge search range
	uint8_t LEdgeSRange=100; // leading edge search bin size - effectively acts as Ledge Search mode too
	uint8_t LEdgeCount[10]={0}; // count of hits in each bin for current second
	uint8_t LEdgeSum[10]={0};	// count of consecutive seconds that a bin has had a hit
	uint8_t LEMax=0; // bin with highest number of consecutive hits
    1184:	21 2c       	mov	r2, r1
	uint16_t x=0;
	uint16_t y=0;
	
	// Leading Edge detection variables
	uint16_t LEdgeSMin=0; // bottom of leading edge search range
	uint8_t LEdgeSRange=100; // leading edge search bin size - effectively acts as Ledge Search mode too
    1186:	24 e6       	ldi	r18, 0x64	; 100
    1188:	cf 56       	subi	r28, 0x6F	; 111
    118a:	df 4f       	sbci	r29, 0xFF	; 255
    118c:	28 83       	st	Y, r18
    118e:	c1 59       	subi	r28, 0x91	; 145
    1190:	d0 40       	sbci	r29, 0x00	; 0
	uint16_t i=0;
	uint16_t x=0;
	uint16_t y=0;
	
	// Leading Edge detection variables
	uint16_t LEdgeSMin=0; // bottom of leading edge search range
    1192:	41 2c       	mov	r4, r1
    1194:	51 2c       	mov	r5, r1
    1196:	4e 01       	movw	r8, r28
    1198:	39 e7       	ldi	r19, 0x79	; 121
    119a:	83 0e       	add	r8, r19
    119c:	91 1c       	adc	r9, r1
    119e:	c4 01       	movw	r24, r8
    11a0:	0a 96       	adiw	r24, 0x0a	; 10
    11a2:	c9 56       	subi	r28, 0x69	; 105
    11a4:	df 4f       	sbci	r29, 0xFF	; 255
    11a6:	99 83       	std	Y+1, r25	; 0x01
    11a8:	88 83       	st	Y, r24
    11aa:	c7 59       	subi	r28, 0x97	; 151
    11ac:	d0 40       	sbci	r29, 0x00	; 0
	
	
	/* Replace with your application code */
	while (1)
	{
		while (!TICK); // wait for a tick
    11ae:	80 91 e0 01 	lds	r24, 0x01E0
    11b2:	88 23       	and	r24, r24
    11b4:	e1 f3       	breq	.-8      	; 0x11ae <main+0x164>
		TICK=false;
    11b6:	10 92 e0 01 	sts	0x01E0, r1
		
		fb.clear();
    11ba:	81 ee       	ldi	r24, 0xE1	; 225
    11bc:	91 e0       	ldi	r25, 0x01	; 1
    11be:	0e 94 8e 05 	call	0xb1c	; 0xb1c <_ZN11Framebuffer5clearEv>

		

		// Leading Edge Search Region below
		#pragma region LeadingEdgeSearch
		if (LEdgeSearch) {		
    11c2:	80 91 04 01 	lds	r24, 0x0104
    11c6:	88 23       	and	r24, r24
    11c8:	09 f4       	brne	.+2      	; 0x11cc <main+0x182>
    11ca:	d4 c1       	rjmp	.+936    	; 0x1574 <main+0x52a>
			
			fb.drawRectangle(10,12,113,25); // main signal window - shows whole second
    11cc:	09 e1       	ldi	r16, 0x19	; 25
    11ce:	21 e7       	ldi	r18, 0x71	; 113
    11d0:	4c e0       	ldi	r20, 0x0C	; 12
    11d2:	6a e0       	ldi	r22, 0x0A	; 10
    11d4:	81 ee       	ldi	r24, 0xE1	; 225
    11d6:	91 e0       	ldi	r25, 0x01	; 1
    11d8:	0e 94 5f 05 	call	0xabe	; 0xabe <_ZN11Framebuffer13drawRectangleEhhhh>
    11dc:	0c e0       	ldi	r16, 0x0C	; 12
			for (uint8_t j=0; j<=49; j++) {
				fb.drawPixel(12+j*2,43);
    11de:	4b e2       	ldi	r20, 0x2B	; 43
    11e0:	60 2f       	mov	r22, r16
    11e2:	81 ee       	ldi	r24, 0xE1	; 225
    11e4:	91 e0       	ldi	r25, 0x01	; 1
    11e6:	0e 94 0f 05 	call	0xa1e	; 0xa1e <_ZN11Framebuffer9drawPixelEhh>
    11ea:	0e 5f       	subi	r16, 0xFE	; 254
		// Leading Edge Search Region below
		#pragma region LeadingEdgeSearch
		if (LEdgeSearch) {		
			
			fb.drawRectangle(10,12,113,25); // main signal window - shows whole second
			for (uint8_t j=0; j<=49; j++) {
    11ec:	00 37       	cpi	r16, 0x70	; 112
    11ee:	b9 f7       	brne	.-18     	; 0x11de <main+0x194>
				fb.drawPixel(12+j*2,43);
			}
			
			if (LEdgeSRange==100) WriteText(&IM8_FontInfo,"Search : 100ms",63,0,CENTRE);
    11f0:	cf 56       	subi	r28, 0x6F	; 111
    11f2:	df 4f       	sbci	r29, 0xFF	; 255
    11f4:	98 81       	ld	r25, Y
    11f6:	c1 59       	subi	r28, 0x91	; 145
    11f8:	d0 40       	sbci	r29, 0x00	; 0
    11fa:	94 36       	cpi	r25, 0x64	; 100
    11fc:	51 f4       	brne	.+20     	; 0x1212 <main+0x1c8>
    11fe:	01 e0       	ldi	r16, 0x01	; 1
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	4f e3       	ldi	r20, 0x3F	; 63
    1204:	61 e9       	ldi	r22, 0x91	; 145
    1206:	71 e0       	ldi	r23, 0x01	; 1
    1208:	85 e8       	ldi	r24, 0x85	; 133
    120a:	91 e0       	ldi	r25, 0x01	; 1
    120c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <_Z9WriteTextPK9FONT_INFOPKchhh>
    1210:	55 c5       	rjmp	.+2730   	; 0x1cbc <main+0xc72>
			if (LEdgeSRange==10) {
    1212:	cf 56       	subi	r28, 0x6F	; 111
    1214:	df 4f       	sbci	r29, 0xFF	; 255
    1216:	a8 81       	ld	r26, Y
    1218:	c1 59       	subi	r28, 0x91	; 145
    121a:	d0 40       	sbci	r29, 0x00	; 0
    121c:	aa 30       	cpi	r26, 0x0A	; 10
    121e:	09 f0       	breq	.+2      	; 0x1222 <main+0x1d8>
    1220:	4d c5       	rjmp	.+2714   	; 0x1cbc <main+0xc72>
				WriteText(&IM8_FontInfo,"Search : 10ms",63,0,CENTRE);
    1222:	01 e0       	ldi	r16, 0x01	; 1
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	4f e3       	ldi	r20, 0x3F	; 63
    1228:	60 ea       	ldi	r22, 0xA0	; 160
    122a:	71 e0       	ldi	r23, 0x01	; 1
    122c:	85 e8       	ldi	r24, 0x85	; 133
    122e:	91 e0       	ldi	r25, 0x01	; 1
    1230:	0e 94 4e 06 	call	0xc9c	; 0xc9c <_Z9WriteTextPK9FONT_INFOPKchhh>
				fb.drawRectangle(10,31,113,40);
    1234:	08 e2       	ldi	r16, 0x28	; 40
    1236:	21 e7       	ldi	r18, 0x71	; 113
    1238:	4f e1       	ldi	r20, 0x1F	; 31
    123a:	6a e0       	ldi	r22, 0x0A	; 10
    123c:	81 ee       	ldi	r24, 0xE1	; 225
    123e:	91 e0       	ldi	r25, 0x01	; 1
    1240:	0e 94 5f 05 	call	0xabe	; 0xabe <_ZN11Framebuffer13drawRectangleEhhhh>
				Byte2String(BString,20-LESecsInMode);
    1244:	64 e1       	ldi	r22, 0x14	; 20
    1246:	c5 56       	subi	r28, 0x65	; 101
    1248:	df 4f       	sbci	r29, 0xFF	; 255
    124a:	b8 81       	ld	r27, Y
    124c:	cb 59       	subi	r28, 0x9B	; 155
    124e:	d0 40       	sbci	r29, 0x00	; 0
    1250:	6b 1b       	sub	r22, r27
    1252:	ce 01       	movw	r24, r28
    1254:	83 57       	subi	r24, 0x73	; 115
    1256:	9f 4f       	sbci	r25, 0xFF	; 255
    1258:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z11Byte2StringPch>
				WriteText(&IM8_FontInfo,BString,127,0,RIGHT);
    125c:	02 e0       	ldi	r16, 0x02	; 2
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	4f e7       	ldi	r20, 0x7F	; 127
    1262:	be 01       	movw	r22, r28
    1264:	63 57       	subi	r22, 0x73	; 115
    1266:	7f 4f       	sbci	r23, 0xFF	; 255
    1268:	85 e8       	ldi	r24, 0x85	; 133
    126a:	91 e0       	ldi	r25, 0x01	; 1
    126c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <_Z9WriteTextPK9FONT_INFOPKchhh>
    1270:	25 c5       	rjmp	.+2634   	; 0x1cbc <main+0xc72>
			}
			
			x=0;  // Buffer byte counter
			y=0;  // Buffer bit counter
			for (i=0; i<=999; i++) {   // millisecond counter
				y++;
    1272:	ef ef       	ldi	r30, 0xFF	; 255
    1274:	ce 1a       	sub	r12, r30
    1276:	de 0a       	sbc	r13, r30
				if (y==8) {  
    1278:	f8 e0       	ldi	r31, 0x08	; 8
    127a:	cf 16       	cp	r12, r31
    127c:	d1 04       	cpc	r13, r1
    127e:	21 f4       	brne	.+8      	; 0x1288 <main+0x23e>
					y=0;
					x++;
    1280:	0f 5f       	subi	r16, 0xFF	; 255
    1282:	1f 4f       	sbci	r17, 0xFF	; 255
			x=0;  // Buffer byte counter
			y=0;  // Buffer bit counter
			for (i=0; i<=999; i++) {   // millisecond counter
				y++;
				if (y==8) {  
					y=0;
    1284:	c3 2c       	mov	r12, r3
    1286:	d1 2c       	mov	r13, r1
    1288:	a3 94       	inc	r10
					x++;
				}
				PrevPinState=PinState;
				PinState=CHECK_BIT(buffer[x],y);  // read pin state
    128a:	2b 2d       	mov	r18, r11
    128c:	f8 01       	movw	r30, r16
    128e:	eb 5f       	subi	r30, 0xFB	; 251
    1290:	fe 4f       	sbci	r31, 0xFE	; 254
    1292:	80 81       	ld	r24, Z
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	0c 2c       	mov	r0, r12
    1298:	02 c0       	rjmp	.+4      	; 0x129e <main+0x254>
    129a:	95 95       	asr	r25
    129c:	87 95       	ror	r24
    129e:	0a 94       	dec	r0
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <main+0x250>
    12a2:	38 2f       	mov	r19, r24
    12a4:	31 70       	andi	r19, 0x01	; 1
    12a6:	b3 2e       	mov	r11, r19
			
				if (i>=LEdgeSMin && i<=LEdgeSMin+(10*LEdgeSRange)-1) // id ms counter within Leading Edge search range
    12a8:	e4 14       	cp	r14, r4
    12aa:	f5 04       	cpc	r15, r5
    12ac:	70 f1       	brcs	.+92     	; 0x130a <main+0x2c0>
    12ae:	6e 14       	cp	r6, r14
    12b0:	7f 04       	cpc	r7, r15
    12b2:	58 f1       	brcs	.+86     	; 0x130a <main+0x2c0>
				{
					if (!PrevPinState && PinState) 	LEdgeCount[(i-LEdgeSMin)/LEdgeSRange]++; // leading Edge found, increment counter for current bin
    12b4:	21 11       	cpse	r18, r1
    12b6:	18 c0       	rjmp	.+48     	; 0x12e8 <main+0x29e>
    12b8:	33 23       	and	r19, r19
    12ba:	09 f4       	brne	.+2      	; 0x12be <main+0x274>
    12bc:	49 c0       	rjmp	.+146    	; 0x1350 <main+0x306>
    12be:	c7 01       	movw	r24, r14
    12c0:	84 19       	sub	r24, r4
    12c2:	95 09       	sbc	r25, r5
    12c4:	ce 56       	subi	r28, 0x6E	; 110
    12c6:	df 4f       	sbci	r29, 0xFF	; 255
    12c8:	68 81       	ld	r22, Y
    12ca:	79 81       	ldd	r23, Y+1	; 0x01
    12cc:	c2 59       	subi	r28, 0x92	; 146
    12ce:	d0 40       	sbci	r29, 0x00	; 0
    12d0:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__udivmodhi4>
    12d4:	e3 e8       	ldi	r30, 0x83	; 131
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	ec 0f       	add	r30, r28
    12da:	fd 1f       	adc	r31, r29
    12dc:	e6 0f       	add	r30, r22
    12de:	f7 1f       	adc	r31, r23
    12e0:	80 81       	ld	r24, Z
    12e2:	8f 5f       	subi	r24, 0xFF	; 255
    12e4:	80 83       	st	Z, r24
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <main+0x2a2>
					if (PinState && LEdgeSRange==10) fb.drawVLine(12+(i-LEdgeSMin),33,6);
    12e8:	33 23       	and	r19, r19
    12ea:	91 f1       	breq	.+100    	; 0x1350 <main+0x306>
    12ec:	cf 56       	subi	r28, 0x6F	; 111
    12ee:	df 4f       	sbci	r29, 0xFF	; 255
    12f0:	88 81       	ld	r24, Y
    12f2:	c1 59       	subi	r28, 0x91	; 145
    12f4:	d0 40       	sbci	r29, 0x00	; 0
    12f6:	8a 30       	cpi	r24, 0x0A	; 10
    12f8:	51 f4       	brne	.+20     	; 0x130e <main+0x2c4>
    12fa:	26 e0       	ldi	r18, 0x06	; 6
    12fc:	41 e2       	ldi	r20, 0x21	; 33
    12fe:	6a 2d       	mov	r22, r10
    1300:	81 ee       	ldi	r24, 0xE1	; 225
    1302:	91 e0       	ldi	r25, 0x01	; 1
    1304:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN11Framebuffer9drawVLineEhhh>
    1308:	02 c0       	rjmp	.+4      	; 0x130e <main+0x2c4>
				}
				if (PinState) fb.drawPixel((i/10)+12,(i%10)+14); // draw pixel to show raw signal
    130a:	bb 20       	and	r11, r11
    130c:	09 f1       	breq	.+66     	; 0x1350 <main+0x306>
    130e:	97 01       	movw	r18, r14
    1310:	ad ec       	ldi	r26, 0xCD	; 205
    1312:	bc ec       	ldi	r27, 0xCC	; 204
    1314:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <__umulhisi3>
    1318:	96 95       	lsr	r25
    131a:	87 95       	ror	r24
    131c:	96 95       	lsr	r25
    131e:	87 95       	ror	r24
    1320:	96 95       	lsr	r25
    1322:	87 95       	ror	r24
    1324:	ac 01       	movw	r20, r24
    1326:	44 0f       	add	r20, r20
    1328:	55 1f       	adc	r21, r21
    132a:	9c 01       	movw	r18, r24
    132c:	22 0f       	add	r18, r18
    132e:	33 1f       	adc	r19, r19
    1330:	22 0f       	add	r18, r18
    1332:	33 1f       	adc	r19, r19
    1334:	22 0f       	add	r18, r18
    1336:	33 1f       	adc	r19, r19
    1338:	24 0f       	add	r18, r20
    133a:	35 1f       	adc	r19, r21
    133c:	a7 01       	movw	r20, r14
    133e:	42 1b       	sub	r20, r18
    1340:	53 0b       	sbc	r21, r19
    1342:	42 5f       	subi	r20, 0xF2	; 242
    1344:	6c e0       	ldi	r22, 0x0C	; 12
    1346:	68 0f       	add	r22, r24
    1348:	81 ee       	ldi	r24, 0xE1	; 225
    134a:	91 e0       	ldi	r25, 0x01	; 1
    134c:	0e 94 0f 05 	call	0xa1e	; 0xa1e <_ZN11Framebuffer9drawPixelEhh>
				WriteText(&IM8_FontInfo,BString,127,0,RIGHT);
			}
			
			x=0;  // Buffer byte counter
			y=0;  // Buffer bit counter
			for (i=0; i<=999; i++) {   // millisecond counter
    1350:	9f ef       	ldi	r25, 0xFF	; 255
    1352:	e9 1a       	sub	r14, r25
    1354:	f9 0a       	sbc	r15, r25
    1356:	a8 ee       	ldi	r26, 0xE8	; 232
    1358:	ea 16       	cp	r14, r26
    135a:	a3 e0       	ldi	r26, 0x03	; 3
    135c:	fa 06       	cpc	r15, r26
    135e:	09 f0       	breq	.+2      	; 0x1362 <main+0x318>
    1360:	88 cf       	rjmp	.-240    	; 0x1272 <main+0x228>
    1362:	34 01       	movw	r6, r8
    1364:	9e 01       	movw	r18, r28
    1366:	2d 57       	subi	r18, 0x7D	; 125
    1368:	3f 4f       	sbci	r19, 0xFF	; 255
    136a:	79 01       	movw	r14, r18
    136c:	64 01       	movw	r12, r8
    136e:	6c e0       	ldi	r22, 0x0C	; 12
    1370:	3b 2c       	mov	r3, r11
    1372:	57 01       	movw	r10, r14
				
			}

			for(uint8_t j=0; j<=9; j++){
				
				if (LEdgeCount[j]>=1) {  // increment counter if there has been a hit in this bin this second
    1374:	f7 01       	movw	r30, r14
    1376:	80 81       	ld	r24, Z
    1378:	88 23       	and	r24, r24
    137a:	29 f0       	breq	.+10     	; 0x1386 <main+0x33c>
					LEdgeSum[j]++;
    137c:	d6 01       	movw	r26, r12
    137e:	8c 91       	ld	r24, X
    1380:	8f 5f       	subi	r24, 0xFF	; 255
    1382:	8c 93       	st	X, r24
    1384:	02 c0       	rjmp	.+4      	; 0x138a <main+0x340>
				}
				else
				{
					LEdgeSum[j]=0;  // else set count of number of consecutive seconds to zero
    1386:	f6 01       	movw	r30, r12
    1388:	10 82       	st	Z, r1
				}
				fb.drawRectangle(12+(j*10),63-LEdgeSum[j]*2,12+((j+1)*10),63);  // display bar for bin on OLED screen
    138a:	1a e0       	ldi	r17, 0x0A	; 10
    138c:	16 0f       	add	r17, r22
    138e:	d6 01       	movw	r26, r12
    1390:	4d 91       	ld	r20, X+
    1392:	6d 01       	movw	r12, r26
    1394:	41 95       	neg	r20
    1396:	44 0f       	add	r20, r20
    1398:	41 5c       	subi	r20, 0xC1	; 193
    139a:	0f e3       	ldi	r16, 0x3F	; 63
    139c:	21 2f       	mov	r18, r17
    139e:	81 ee       	ldi	r24, 0xE1	; 225
    13a0:	91 e0       	ldi	r25, 0x01	; 1
    13a2:	0e 94 5f 05 	call	0xabe	; 0xabe <_ZN11Framebuffer13drawRectangleEhhhh>
				LEdgeCount[j]=0;  // reset count of hits this second ready for next second
    13a6:	f5 01       	movw	r30, r10
    13a8:	10 82       	st	Z, r1
    13aa:	ff ef       	ldi	r31, 0xFF	; 255
    13ac:	ef 1a       	sub	r14, r31
    13ae:	ff 0a       	sbc	r15, r31
    13b0:	61 2f       	mov	r22, r17
				}
				if (PinState) fb.drawPixel((i/10)+12,(i%10)+14); // draw pixel to show raw signal
				
			}

			for(uint8_t j=0; j<=9; j++){
    13b2:	10 37       	cpi	r17, 0x70	; 112
    13b4:	f1 f6       	brne	.-68     	; 0x1372 <main+0x328>
    13b6:	13 2d       	mov	r17, r3
    13b8:	f4 01       	movw	r30, r8
    13ba:	ca 56       	subi	r28, 0x6A	; 106
    13bc:	df 4f       	sbci	r29, 0xFF	; 255
    13be:	28 81       	ld	r18, Y
    13c0:	c6 59       	subi	r28, 0x96	; 150
    13c2:	d0 40       	sbci	r29, 0x00	; 0
    13c4:	c9 56       	subi	r28, 0x69	; 105
    13c6:	df 4f       	sbci	r29, 0xFF	; 255
    13c8:	48 81       	ld	r20, Y
    13ca:	59 81       	ldd	r21, Y+1	; 0x01
    13cc:	c7 59       	subi	r28, 0x97	; 151
    13ce:	d0 40       	sbci	r29, 0x00	; 0
    13d0:	3e 2f       	mov	r19, r30
    13d2:	38 19       	sub	r19, r8
				fb.drawRectangle(12+(j*10),63-LEdgeSum[j]*2,12+((j+1)*10),63);  // display bar for bin on OLED screen
				LEdgeCount[j]=0;  // reset count of hits this second ready for next second
			}

			for(uint8_t j=0; j<=9; j++){  // identify bins with first and second highest counts of leading edges
				if(LEdgeSum[j]>LEdgeSum[LEMax]) {LE2Max=LEMax; LEMax=j;}
    13d4:	81 91       	ld	r24, Z+
    13d6:	d4 01       	movw	r26, r8
    13d8:	a2 0d       	add	r26, r2
    13da:	b1 1d       	adc	r27, r1
    13dc:	9c 91       	ld	r25, X
    13de:	98 17       	cp	r25, r24
    13e0:	10 f4       	brcc	.+4      	; 0x13e6 <main+0x39c>
    13e2:	22 2d       	mov	r18, r2
    13e4:	23 2e       	mov	r2, r19
				if(LEdgeSum[j]>LE2Max && LEdgeSum[j]<LEMax) LE2Max=j;
    13e6:	28 17       	cp	r18, r24
    13e8:	18 f4       	brcc	.+6      	; 0x13f0 <main+0x3a6>
    13ea:	82 15       	cp	r24, r2
    13ec:	08 f4       	brcc	.+2      	; 0x13f0 <main+0x3a6>
    13ee:	23 2f       	mov	r18, r19
				}
				fb.drawRectangle(12+(j*10),63-LEdgeSum[j]*2,12+((j+1)*10),63);  // display bar for bin on OLED screen
				LEdgeCount[j]=0;  // reset count of hits this second ready for next second
			}

			for(uint8_t j=0; j<=9; j++){  // identify bins with first and second highest counts of leading edges
    13f0:	e4 17       	cp	r30, r20
    13f2:	f5 07       	cpc	r31, r21
    13f4:	69 f7       	brne	.-38     	; 0x13d0 <main+0x386>
    13f6:	ca 56       	subi	r28, 0x6A	; 106
    13f8:	df 4f       	sbci	r29, 0xFF	; 255
    13fa:	28 83       	st	Y, r18
    13fc:	c6 59       	subi	r28, 0x96	; 150
    13fe:	d0 40       	sbci	r29, 0x00	; 0
    1400:	02 2d       	mov	r16, r2
				if(LEdgeSum[j]>LEdgeSum[LEMax]) {LE2Max=LEMax; LEMax=j;}
				if(LEdgeSum[j]>LE2Max && LEdgeSum[j]<LEMax) LE2Max=j;
			}


			if (LEdgeSRange==100 && LEdgeSum[LEMax]>=10) { // one of the 100ms-wide bins has more than 10 consecutive hits
    1402:	cf 56       	subi	r28, 0x6F	; 111
    1404:	df 4f       	sbci	r29, 0xFF	; 255
    1406:	28 81       	ld	r18, Y
    1408:	c1 59       	subi	r28, 0x91	; 145
    140a:	d0 40       	sbci	r29, 0x00	; 0
    140c:	24 36       	cpi	r18, 0x64	; 100
    140e:	d9 f4       	brne	.+54     	; 0x1446 <main+0x3fc>
    1410:	82 2d       	mov	r24, r2
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	f4 01       	movw	r30, r8
    1416:	e8 0f       	add	r30, r24
    1418:	f9 1f       	adc	r31, r25
    141a:	20 81       	ld	r18, Z
    141c:	2a 30       	cpi	r18, 0x0A	; 10
    141e:	08 f4       	brcc	.+2      	; 0x1422 <main+0x3d8>
    1420:	a9 c0       	rjmp	.+338    	; 0x1574 <main+0x52a>
				LEdgeSRange=10; // so we're going to narrow the search with 10ms wide bins ...
				LEdgeSMin=100*LEMax; // ... in the bin that had the most consecutive hits
    1422:	24 e6       	ldi	r18, 0x64	; 100
    1424:	28 9f       	mul	r18, r24
    1426:	20 01       	movw	r4, r0
    1428:	29 9f       	mul	r18, r25
    142a:	50 0c       	add	r5, r0
    142c:	11 24       	eor	r1, r1
    142e:	f4 01       	movw	r30, r8
    1430:	c9 56       	subi	r28, 0x69	; 105
    1432:	df 4f       	sbci	r29, 0xFF	; 255
    1434:	88 81       	ld	r24, Y
    1436:	99 81       	ldd	r25, Y+1	; 0x01
    1438:	c7 59       	subi	r28, 0x97	; 151
    143a:	d0 40       	sbci	r29, 0x00	; 0
				for(uint8_t j=0; j<=9; j++) { // reset the bin counts
					LEdgeSum[j]=0; 
    143c:	11 92       	st	Z+, r1


			if (LEdgeSRange==100 && LEdgeSum[LEMax]>=10) { // one of the 100ms-wide bins has more than 10 consecutive hits
				LEdgeSRange=10; // so we're going to narrow the search with 10ms wide bins ...
				LEdgeSMin=100*LEMax; // ... in the bin that had the most consecutive hits
				for(uint8_t j=0; j<=9; j++) { // reset the bin counts
    143e:	8e 17       	cp	r24, r30
    1440:	9f 07       	cpc	r25, r31
    1442:	e1 f7       	brne	.-8      	; 0x143c <main+0x3f2>
    1444:	08 c0       	rjmp	.+16     	; 0x1456 <main+0x40c>
					LEdgeSum[j]=0; 
				}
			}

			if (LEdgeSRange==10) {
    1446:	cf 56       	subi	r28, 0x6F	; 111
    1448:	df 4f       	sbci	r29, 0xFF	; 255
    144a:	38 81       	ld	r19, Y
    144c:	c1 59       	subi	r28, 0x91	; 145
    144e:	d0 40       	sbci	r29, 0x00	; 0
    1450:	3a 30       	cpi	r19, 0x0A	; 10
    1452:	09 f0       	breq	.+2      	; 0x1456 <main+0x40c>
    1454:	8f c0       	rjmp	.+286    	; 0x1574 <main+0x52a>
				fb.drawVLine(12+(LEdgeSMin/100)*10,25,5); // Mark range that we're searching in with two small v lines
    1456:	92 01       	movw	r18, r4
    1458:	36 95       	lsr	r19
    145a:	27 95       	ror	r18
    145c:	36 95       	lsr	r19
    145e:	27 95       	ror	r18
    1460:	ab e7       	ldi	r26, 0x7B	; 123
    1462:	b4 e1       	ldi	r27, 0x14	; 20
    1464:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <__umulhisi3>
    1468:	7c 01       	movw	r14, r24
    146a:	f6 94       	lsr	r15
    146c:	e7 94       	ror	r14
    146e:	6e 2d       	mov	r22, r14
    1470:	66 0f       	add	r22, r22
    1472:	86 2f       	mov	r24, r22
    1474:	88 0f       	add	r24, r24
    1476:	88 0f       	add	r24, r24
    1478:	68 0f       	add	r22, r24
    147a:	64 5f       	subi	r22, 0xF4	; 244
    147c:	25 e0       	ldi	r18, 0x05	; 5
    147e:	49 e1       	ldi	r20, 0x19	; 25
    1480:	81 ee       	ldi	r24, 0xE1	; 225
    1482:	91 e0       	ldi	r25, 0x01	; 1
    1484:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN11Framebuffer9drawVLineEhhh>
				fb.drawVLine(12+((LEdgeSMin/100)+1)*10,25,5);
    1488:	8f ef       	ldi	r24, 0xFF	; 255
    148a:	e8 1a       	sub	r14, r24
    148c:	f8 0a       	sbc	r15, r24
    148e:	ee 0c       	add	r14, r14
    1490:	6e 2d       	mov	r22, r14
    1492:	66 0f       	add	r22, r22
    1494:	66 0f       	add	r22, r22
    1496:	6e 0d       	add	r22, r14
    1498:	64 5f       	subi	r22, 0xF4	; 244
    149a:	25 e0       	ldi	r18, 0x05	; 5
    149c:	49 e1       	ldi	r20, 0x19	; 25
    149e:	81 ee       	ldi	r24, 0xE1	; 225
    14a0:	91 e0       	ldi	r25, 0x01	; 1
    14a2:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN11Framebuffer9drawVLineEhhh>
				LESecsInMode++;
    14a6:	c5 56       	subi	r28, 0x65	; 101
    14a8:	df 4f       	sbci	r29, 0xFF	; 255
    14aa:	98 81       	ld	r25, Y
    14ac:	cb 59       	subi	r28, 0x9B	; 155
    14ae:	d0 40       	sbci	r29, 0x00	; 0
    14b0:	9f 5f       	subi	r25, 0xFF	; 255
    14b2:	c5 56       	subi	r28, 0x65	; 101
    14b4:	df 4f       	sbci	r29, 0xFF	; 255
    14b6:	98 83       	st	Y, r25
    14b8:	cb 59       	subi	r28, 0x9B	; 155
    14ba:	d0 40       	sbci	r29, 0x00	; 0
				if (LESecsInMode>=20) { // we've been searching in 10ms bins for 30 seconds now, so revert to 100ms bins
    14bc:	94 31       	cpi	r25, 0x14	; 20
    14be:	28 f1       	brcs	.+74     	; 0x150a <main+0x4c0>
    14c0:	f4 01       	movw	r30, r8
    14c2:	c9 56       	subi	r28, 0x69	; 105
    14c4:	df 4f       	sbci	r29, 0xFF	; 255
    14c6:	88 81       	ld	r24, Y
    14c8:	99 81       	ldd	r25, Y+1	; 0x01
    14ca:	c7 59       	subi	r28, 0x97	; 151
    14cc:	d0 40       	sbci	r29, 0x00	; 0
					LEdgeSRange=100;
					LEdgeSMin=0;
					for(uint8_t j=0; j<=9; j++) { // reset the bin counts
						LEdgeSum[j]=0;
    14ce:	11 92       	st	Z+, r1
				fb.drawVLine(12+((LEdgeSMin/100)+1)*10,25,5);
				LESecsInMode++;
				if (LESecsInMode>=20) { // we've been searching in 10ms bins for 30 seconds now, so revert to 100ms bins
					LEdgeSRange=100;
					LEdgeSMin=0;
					for(uint8_t j=0; j<=9; j++) { // reset the bin counts
    14d0:	8e 17       	cp	r24, r30
    14d2:	9f 07       	cpc	r25, r31
    14d4:	e1 f7       	brne	.-8      	; 0x14ce <main+0x484>
						LEdgeSum[j]=0;
					}	
					TC=TC+(rand() & 0xFF);
    14d6:	0e 94 1a 10 	call	0x2034	; 0x2034 <rand>
    14da:	20 91 de 01 	lds	r18, 0x01DE
    14de:	30 91 df 01 	lds	r19, 0x01DF
    14e2:	28 0f       	add	r18, r24
    14e4:	31 1d       	adc	r19, r1
    14e6:	30 93 df 01 	sts	0x01DF, r19
    14ea:	20 93 de 01 	sts	0x01DE, r18
					LESecsInMode=0;			
    14ee:	c5 56       	subi	r28, 0x65	; 101
    14f0:	df 4f       	sbci	r29, 0xFF	; 255
    14f2:	18 82       	st	Y, r1
    14f4:	cb 59       	subi	r28, 0x9B	; 155
    14f6:	d0 40       	sbci	r29, 0x00	; 0
			if (LEdgeSRange==10) {
				fb.drawVLine(12+(LEdgeSMin/100)*10,25,5); // Mark range that we're searching in with two small v lines
				fb.drawVLine(12+((LEdgeSMin/100)+1)*10,25,5);
				LESecsInMode++;
				if (LESecsInMode>=20) { // we've been searching in 10ms bins for 30 seconds now, so revert to 100ms bins
					LEdgeSRange=100;
    14f8:	a4 e6       	ldi	r26, 0x64	; 100
    14fa:	cf 56       	subi	r28, 0x6F	; 111
    14fc:	df 4f       	sbci	r29, 0xFF	; 255
    14fe:	a8 83       	st	Y, r26
    1500:	c1 59       	subi	r28, 0x91	; 145
    1502:	d0 40       	sbci	r29, 0x00	; 0
					LEdgeSMin=0;
    1504:	41 2c       	mov	r4, r1
    1506:	51 2c       	mov	r5, r1
    1508:	06 c0       	rjmp	.+12     	; 0x1516 <main+0x4cc>
    150a:	ba e0       	ldi	r27, 0x0A	; 10
    150c:	cf 56       	subi	r28, 0x6F	; 111
    150e:	df 4f       	sbci	r29, 0xFF	; 255
    1510:	b8 83       	st	Y, r27
    1512:	c1 59       	subi	r28, 0x91	; 145
    1514:	d0 40       	sbci	r29, 0x00	; 0
					}	
					TC=TC+(rand() & 0xFF);
					LESecsInMode=0;			
				}
				
				if (LEdgeSum[LEMax]>=10){  // *** START OF SECOND FOUND ***
    1516:	80 2f       	mov	r24, r16
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	f4 01       	movw	r30, r8
    151c:	e8 0f       	add	r30, r24
    151e:	f9 1f       	adc	r31, r25
    1520:	20 81       	ld	r18, Z
    1522:	2a 30       	cpi	r18, 0x0A	; 10
    1524:	38 f1       	brcs	.+78     	; 0x1574 <main+0x52a>
					LEdge=LEdgeSMin+(LEMax*10)+5; // << This is what we'll treat as the start of the second
    1526:	9c 01       	movw	r18, r24
    1528:	22 0f       	add	r18, r18
    152a:	33 1f       	adc	r19, r19
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	88 0f       	add	r24, r24
    1532:	99 1f       	adc	r25, r25
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	82 0f       	add	r24, r18
    153a:	93 1f       	adc	r25, r19
    153c:	05 96       	adiw	r24, 0x05	; 5
    153e:	48 0e       	add	r4, r24
    1540:	59 1e       	adc	r5, r25
    1542:	50 92 dd 01 	sts	0x01DD, r5
    1546:	40 92 dc 01 	sts	0x01DC, r4
    154a:	f3 01       	movw	r30, r6
    154c:	c9 56       	subi	r28, 0x69	; 105
    154e:	df 4f       	sbci	r29, 0xFF	; 255
    1550:	88 81       	ld	r24, Y
    1552:	99 81       	ldd	r25, Y+1	; 0x01
    1554:	c7 59       	subi	r28, 0x97	; 151
    1556:	d0 40       	sbci	r29, 0x00	; 0
					LEdgeSMin=0; // reset these variables ready for next time
					LEdgeSRange=100;
					for(uint8_t j=0; j<=9; j++) { // reset the bin counts
						LEdgeSum[j]=0;
    1558:	11 92       	st	Z+, r1
				
				if (LEdgeSum[LEMax]>=10){  // *** START OF SECOND FOUND ***
					LEdge=LEdgeSMin+(LEMax*10)+5; // << This is what we'll treat as the start of the second
					LEdgeSMin=0; // reset these variables ready for next time
					LEdgeSRange=100;
					for(uint8_t j=0; j<=9; j++) { // reset the bin counts
    155a:	8e 17       	cp	r24, r30
    155c:	9f 07       	cpc	r25, r31
    155e:	e1 f7       	brne	.-8      	; 0x1558 <main+0x50e>
						LEdgeSum[j]=0;
					}		
					LEdgeSearch=false;		
    1560:	10 92 04 01 	sts	0x0104, r1
				}
				
				if (LEdgeSum[LEMax]>=10){  // *** START OF SECOND FOUND ***
					LEdge=LEdgeSMin+(LEMax*10)+5; // << This is what we'll treat as the start of the second
					LEdgeSMin=0; // reset these variables ready for next time
					LEdgeSRange=100;
    1564:	e4 e6       	ldi	r30, 0x64	; 100
    1566:	cf 56       	subi	r28, 0x6F	; 111
    1568:	df 4f       	sbci	r29, 0xFF	; 255
    156a:	e8 83       	st	Y, r30
    156c:	c1 59       	subi	r28, 0x91	; 145
    156e:	d0 40       	sbci	r29, 0x00	; 0
					LESecsInMode=0;			
				}
				
				if (LEdgeSum[LEMax]>=10){  // *** START OF SECOND FOUND ***
					LEdge=LEdgeSMin+(LEMax*10)+5; // << This is what we'll treat as the start of the second
					LEdgeSMin=0; // reset these variables ready for next time
    1570:	41 2c       	mov	r4, r1
    1572:	51 2c       	mov	r5, r1
		}
		#pragma endregion
		
		// --------------------------------------------------------------------------------------

		if (!LEdgeSearch) {	
    1574:	80 91 04 01 	lds	r24, 0x0104
    1578:	81 11       	cpse	r24, r1
    157a:	9b c3       	rjmp	.+1846   	; 0x1cb2 <main+0xc68>
			
			// Display mode at top of OLED, draw box around signal with segment marks
			if (!MMarkFound) {
    157c:	cb 56       	subi	r28, 0x6B	; 107
    157e:	df 4f       	sbci	r29, 0xFF	; 255
    1580:	f8 81       	ld	r31, Y
    1582:	c5 59       	subi	r28, 0x95	; 149
    1584:	d0 40       	sbci	r29, 0x00	; 0
    1586:	f1 11       	cpse	r31, r1
    1588:	2e c0       	rjmp	.+92     	; 0x15e6 <main+0x59c>
				WriteText(&IM8_FontInfo,"Min mark search",63,0,CENTRE);
    158a:	01 e0       	ldi	r16, 0x01	; 1
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	4f e3       	ldi	r20, 0x3F	; 63
    1590:	6e ea       	ldi	r22, 0xAE	; 174
    1592:	71 e0       	ldi	r23, 0x01	; 1
    1594:	85 e8       	ldi	r24, 0x85	; 133
    1596:	91 e0       	ldi	r25, 0x01	; 1
    1598:	0e 94 4e 06 	call	0xc9c	; 0xc9c <_Z9WriteTextPK9FONT_INFOPKchhh>
			} else {
				WriteText(&IM8_FontInfo,"Min mark found",63,0,CENTRE);
			}
			fb.drawRectangle(10,12,113,25); // signal window (shows whole second)
    159c:	09 e1       	ldi	r16, 0x19	; 25
    159e:	21 e7       	ldi	r18, 0x71	; 113
    15a0:	4c e0       	ldi	r20, 0x0C	; 12
    15a2:	6a e0       	ldi	r22, 0x0A	; 10
    15a4:	81 ee       	ldi	r24, 0xE1	; 225
    15a6:	91 e0       	ldi	r25, 0x01	; 1
    15a8:	0e 94 5f 05 	call	0xabe	; 0xabe <_ZN11Framebuffer13drawRectangleEhhhh>
			fb.drawVLine(22,25,3);
    15ac:	23 e0       	ldi	r18, 0x03	; 3
    15ae:	49 e1       	ldi	r20, 0x19	; 25
    15b0:	66 e1       	ldi	r22, 0x16	; 22
    15b2:	81 ee       	ldi	r24, 0xE1	; 225
    15b4:	91 e0       	ldi	r25, 0x01	; 1
    15b6:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN11Framebuffer9drawVLineEhhh>
			fb.drawVLine(32,25,3);
    15ba:	23 e0       	ldi	r18, 0x03	; 3
    15bc:	49 e1       	ldi	r20, 0x19	; 25
    15be:	60 e2       	ldi	r22, 0x20	; 32
    15c0:	81 ee       	ldi	r24, 0xE1	; 225
    15c2:	91 e0       	ldi	r25, 0x01	; 1
    15c4:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN11Framebuffer9drawVLineEhhh>
			fb.drawVLine(42,25,3);
    15c8:	23 e0       	ldi	r18, 0x03	; 3
    15ca:	49 e1       	ldi	r20, 0x19	; 25
    15cc:	6a e2       	ldi	r22, 0x2A	; 42
    15ce:	81 ee       	ldi	r24, 0xE1	; 225
    15d0:	91 e0       	ldi	r25, 0x01	; 1
    15d2:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN11Framebuffer9drawVLineEhhh>
			fb.drawVLine(62,25,3);
    15d6:	23 e0       	ldi	r18, 0x03	; 3
    15d8:	49 e1       	ldi	r20, 0x19	; 25
    15da:	6e e3       	ldi	r22, 0x3E	; 62
    15dc:	81 ee       	ldi	r24, 0xE1	; 225
    15de:	91 e0       	ldi	r25, 0x01	; 1
    15e0:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN11Framebuffer9drawVLineEhhh>
    15e4:	3f c0       	rjmp	.+126    	; 0x1664 <main+0x61a>
			
			// Display mode at top of OLED, draw box around signal with segment marks
			if (!MMarkFound) {
				WriteText(&IM8_FontInfo,"Min mark search",63,0,CENTRE);
			} else {
				WriteText(&IM8_FontInfo,"Min mark found",63,0,CENTRE);
    15e6:	01 e0       	ldi	r16, 0x01	; 1
    15e8:	20 e0       	ldi	r18, 0x00	; 0
    15ea:	4f e3       	ldi	r20, 0x3F	; 63
    15ec:	6e eb       	ldi	r22, 0xBE	; 190
    15ee:	71 e0       	ldi	r23, 0x01	; 1
    15f0:	85 e8       	ldi	r24, 0x85	; 133
    15f2:	91 e0       	ldi	r25, 0x01	; 1
    15f4:	0e 94 4e 06 	call	0xc9c	; 0xc9c <_Z9WriteTextPK9FONT_INFOPKchhh>
			}
			fb.drawRectangle(10,12,113,25); // signal window (shows whole second)
    15f8:	09 e1       	ldi	r16, 0x19	; 25
    15fa:	21 e7       	ldi	r18, 0x71	; 113
    15fc:	4c e0       	ldi	r20, 0x0C	; 12
    15fe:	6a e0       	ldi	r22, 0x0A	; 10
    1600:	81 ee       	ldi	r24, 0xE1	; 225
    1602:	91 e0       	ldi	r25, 0x01	; 1
    1604:	0e 94 5f 05 	call	0xabe	; 0xabe <_ZN11Framebuffer13drawRectangleEhhhh>
			fb.drawVLine(22,25,3);
    1608:	23 e0       	ldi	r18, 0x03	; 3
    160a:	49 e1       	ldi	r20, 0x19	; 25
    160c:	66 e1       	ldi	r22, 0x16	; 22
    160e:	81 ee       	ldi	r24, 0xE1	; 225
    1610:	91 e0       	ldi	r25, 0x01	; 1
    1612:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN11Framebuffer9drawVLineEhhh>
			fb.drawVLine(32,25,3);
    1616:	23 e0       	ldi	r18, 0x03	; 3
    1618:	49 e1       	ldi	r20, 0x19	; 25
    161a:	60 e2       	ldi	r22, 0x20	; 32
    161c:	81 ee       	ldi	r24, 0xE1	; 225
    161e:	91 e0       	ldi	r25, 0x01	; 1
    1620:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN11Framebuffer9drawVLineEhhh>
			fb.drawVLine(42,25,3);
    1624:	23 e0       	ldi	r18, 0x03	; 3
    1626:	49 e1       	ldi	r20, 0x19	; 25
    1628:	6a e2       	ldi	r22, 0x2A	; 42
    162a:	81 ee       	ldi	r24, 0xE1	; 225
    162c:	91 e0       	ldi	r25, 0x01	; 1
    162e:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN11Framebuffer9drawVLineEhhh>
			fb.drawVLine(62,25,3);
    1632:	23 e0       	ldi	r18, 0x03	; 3
    1634:	49 e1       	ldi	r20, 0x19	; 25
    1636:	6e e3       	ldi	r22, 0x3E	; 62
    1638:	81 ee       	ldi	r24, 0xE1	; 225
    163a:	91 e0       	ldi	r25, 0x01	; 1
    163c:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN11Framebuffer9drawVLineEhhh>
			
			// increment signal second counter if MMark found
			if (MMarkFound) {
				SigSecond++;
    1640:	cc 56       	subi	r28, 0x6C	; 108
    1642:	df 4f       	sbci	r29, 0xFF	; 255
    1644:	28 81       	ld	r18, Y
    1646:	c4 59       	subi	r28, 0x94	; 148
    1648:	d0 40       	sbci	r29, 0x00	; 0
    164a:	2f 5f       	subi	r18, 0xFF	; 255
    164c:	cc 56       	subi	r28, 0x6C	; 108
    164e:	df 4f       	sbci	r29, 0xFF	; 255
    1650:	28 83       	st	Y, r18
    1652:	c4 59       	subi	r28, 0x94	; 148
    1654:	d0 40       	sbci	r29, 0x00	; 0
				if (SigSecond>=60) SigSecond=0;
    1656:	2c 33       	cpi	r18, 0x3C	; 60
    1658:	28 f0       	brcs	.+10     	; 0x1664 <main+0x61a>
    165a:	cc 56       	subi	r28, 0x6C	; 108
    165c:	df 4f       	sbci	r29, 0xFF	; 255
    165e:	18 82       	st	Y, r1
    1660:	c4 59       	subi	r28, 0x94	; 148
    1662:	d0 40       	sbci	r29, 0x00	; 0
			
			BitASample=0;
			BitBSample=0;
			BitCSample=0;

			BitA[SigSecond]=false;
    1664:	cc 56       	subi	r28, 0x6C	; 108
    1666:	df 4f       	sbci	r29, 0xFF	; 255
    1668:	38 81       	ld	r19, Y
    166a:	c4 59       	subi	r28, 0x94	; 148
    166c:	d0 40       	sbci	r29, 0x00	; 0
    166e:	83 2f       	mov	r24, r19
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	fe 01       	movw	r30, r28
    1674:	e8 0f       	add	r30, r24
    1676:	f9 1f       	adc	r31, r25
    1678:	15 ae       	std	Z+61, r1	; 0x3d
			BitB[SigSecond]=false;
    167a:	fe 01       	movw	r30, r28
    167c:	e8 0f       	add	r30, r24
    167e:	f9 1f       	adc	r31, r25
    1680:	11 82       	std	Z+1, r1	; 0x01
    1682:	e1 2c       	mov	r14, r1
    1684:	f1 2c       	mov	r15, r1
			BitC=false;
    1686:	ce 56       	subi	r28, 0x6E	; 110
    1688:	df 4f       	sbci	r29, 0xFF	; 255
    168a:	18 82       	st	Y, r1
    168c:	c2 59       	subi	r28, 0x92	; 146
    168e:	d0 40       	sbci	r29, 0x00	; 0
			y=0;  // Buffer bit counter	
			LEdgeDetect=false; // no edge detected yet
			
			BitASample=0;
			BitBSample=0;
			BitCSample=0;
    1690:	31 2c       	mov	r3, r1
			x=0;  // Buffer byte counter
			y=0;  // Buffer bit counter	
			LEdgeDetect=false; // no edge detected yet
			
			BitASample=0;
			BitBSample=0;
    1692:	61 2c       	mov	r6, r1
			// DISPLAY SIGNAL AND BIT BOUNDARIES
			x=0;  // Buffer byte counter
			y=0;  // Buffer bit counter	
			LEdgeDetect=false; // no edge detected yet
			
			BitASample=0;
    1694:	71 2c       	mov	r7, r1
				if (SigSecond>=60) SigSecond=0;
			}
			
			// DISPLAY SIGNAL AND BIT BOUNDARIES
			x=0;  // Buffer byte counter
			y=0;  // Buffer bit counter	
    1696:	c1 2c       	mov	r12, r1
    1698:	d1 2c       	mov	r13, r1
				SigSecond++;
				if (SigSecond>=60) SigSecond=0;
			}
			
			// DISPLAY SIGNAL AND BIT BOUNDARIES
			x=0;  // Buffer byte counter
    169a:	a1 2c       	mov	r10, r1
    169c:	b1 2c       	mov	r11, r1
    169e:	03 c0       	rjmp	.+6      	; 0x16a6 <main+0x65c>
    16a0:	8f ef       	ldi	r24, 0xFF	; 255
    16a2:	e8 1a       	sub	r14, r24
    16a4:	f8 0a       	sbc	r15, r24
			BitA[SigSecond]=false;
			BitB[SigSecond]=false;
			BitC=false;
			
			for (i=0; i<=999; i++) {
				y++;
    16a6:	9f ef       	ldi	r25, 0xFF	; 255
    16a8:	c9 1a       	sub	r12, r25
    16aa:	d9 0a       	sbc	r13, r25
				if (y==8) {
    16ac:	a8 e0       	ldi	r26, 0x08	; 8
    16ae:	ca 16       	cp	r12, r26
    16b0:	d1 04       	cpc	r13, r1
    16b2:	09 f0       	breq	.+2      	; 0x16b6 <main+0x66c>
    16b4:	5f c3       	rjmp	.+1726   	; 0x1d74 <main+0xd2a>
					y=0;
					x++;
    16b6:	bf ef       	ldi	r27, 0xFF	; 255
    16b8:	ab 1a       	sub	r10, r27
    16ba:	bb 0a       	sbc	r11, r27
				}

				PinState=CHECK_BIT(buffer[x],y);  // read pin state
    16bc:	f5 01       	movw	r30, r10
    16be:	eb 5f       	subi	r30, 0xFB	; 251
    16c0:	fe 4f       	sbci	r31, 0xFE	; 254
    16c2:	80 81       	ld	r24, Z
				//if (!LEdgeDetect && PinState && i<25) { // adjust tick counter for drift
					//TC=TC-i;
					//LEdgeDetect=true;
				//}
	
				if (PinState) fb.drawPixel((i/10)+12,(i%10)+14); // draw pixel to show raw signal
    16c4:	18 2f       	mov	r17, r24
    16c6:	11 70       	andi	r17, 0x01	; 1
    16c8:	80 ff       	sbrs	r24, 0
    16ca:	44 c0       	rjmp	.+136    	; 0x1754 <main+0x70a>
			BitC=false;
			
			for (i=0; i<=999; i++) {
				y++;
				if (y==8) {
					y=0;
    16cc:	c1 2c       	mov	r12, r1
    16ce:	d1 2c       	mov	r13, r1
				//if (!LEdgeDetect && PinState && i<25) { // adjust tick counter for drift
					//TC=TC-i;
					//LEdgeDetect=true;
				//}
	
				if (PinState) fb.drawPixel((i/10)+12,(i%10)+14); // draw pixel to show raw signal
    16d0:	97 01       	movw	r18, r14
    16d2:	ad ec       	ldi	r26, 0xCD	; 205
    16d4:	bc ec       	ldi	r27, 0xCC	; 204
    16d6:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <__umulhisi3>
    16da:	96 95       	lsr	r25
    16dc:	87 95       	ror	r24
    16de:	96 95       	lsr	r25
    16e0:	87 95       	ror	r24
    16e2:	96 95       	lsr	r25
    16e4:	87 95       	ror	r24
    16e6:	ac 01       	movw	r20, r24
    16e8:	44 0f       	add	r20, r20
    16ea:	55 1f       	adc	r21, r21
    16ec:	9c 01       	movw	r18, r24
    16ee:	22 0f       	add	r18, r18
    16f0:	33 1f       	adc	r19, r19
    16f2:	22 0f       	add	r18, r18
    16f4:	33 1f       	adc	r19, r19
    16f6:	22 0f       	add	r18, r18
    16f8:	33 1f       	adc	r19, r19
    16fa:	24 0f       	add	r18, r20
    16fc:	35 1f       	adc	r19, r21
    16fe:	a7 01       	movw	r20, r14
    1700:	42 1b       	sub	r20, r18
    1702:	53 0b       	sbc	r21, r19
    1704:	42 5f       	subi	r20, 0xF2	; 242
    1706:	6c e0       	ldi	r22, 0x0C	; 12
    1708:	68 0f       	add	r22, r24
    170a:	81 ee       	ldi	r24, 0xE1	; 225
    170c:	91 e0       	ldi	r25, 0x01	; 1
    170e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <_ZN11Framebuffer9drawPixelEhh>
					
				if (PinState && i>=100 && i<=199) BitASample++;
    1712:	e4 e6       	ldi	r30, 0x64	; 100
    1714:	ee 16       	cp	r14, r30
    1716:	f1 04       	cpc	r15, r1
    1718:	30 f0       	brcs	.+12     	; 0x1726 <main+0x6dc>
    171a:	f8 ec       	ldi	r31, 0xC8	; 200
    171c:	ef 16       	cp	r14, r31
    171e:	f1 04       	cpc	r15, r1
    1720:	30 f4       	brcc	.+12     	; 0x172e <main+0x6e4>
    1722:	73 94       	inc	r7
    1724:	0b c0       	rjmp	.+22     	; 0x173c <main+0x6f2>
				if (PinState && i>=200 && i<=299) BitBSample++;
    1726:	28 ec       	ldi	r18, 0xC8	; 200
    1728:	e2 16       	cp	r14, r18
    172a:	f1 04       	cpc	r15, r1
    172c:	38 f0       	brcs	.+14     	; 0x173c <main+0x6f2>
    172e:	3c e2       	ldi	r19, 0x2C	; 44
    1730:	e3 16       	cp	r14, r19
    1732:	31 e0       	ldi	r19, 0x01	; 1
    1734:	f3 06       	cpc	r15, r19
    1736:	38 f4       	brcc	.+14     	; 0x1746 <main+0x6fc>
    1738:	63 94       	inc	r6
    173a:	0e c0       	rjmp	.+28     	; 0x1758 <main+0x70e>
				if (PinState && i>=300 && i<=499) BitCSample++;
    173c:	8c e2       	ldi	r24, 0x2C	; 44
    173e:	e8 16       	cp	r14, r24
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	f8 06       	cpc	r15, r24
    1744:	48 f0       	brcs	.+18     	; 0x1758 <main+0x70e>
    1746:	94 ef       	ldi	r25, 0xF4	; 244
    1748:	e9 16       	cp	r14, r25
    174a:	91 e0       	ldi	r25, 0x01	; 1
    174c:	f9 06       	cpc	r15, r25
    174e:	20 f4       	brcc	.+8      	; 0x1758 <main+0x70e>
    1750:	33 94       	inc	r3
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <main+0x70e>
			BitC=false;
			
			for (i=0; i<=999; i++) {
				y++;
				if (y==8) {
					y=0;
    1754:	c1 2c       	mov	r12, r1
    1756:	d1 2c       	mov	r13, r1
					
				if (PinState && i>=100 && i<=199) BitASample++;
				if (PinState && i>=200 && i<=299) BitBSample++;
				if (PinState && i>=300 && i<=499) BitCSample++;
				
				if (i==500) {  // resolve samples into bits
    1758:	a4 ef       	ldi	r26, 0xF4	; 244
    175a:	ea 16       	cp	r14, r26
    175c:	a1 e0       	ldi	r26, 0x01	; 1
    175e:	fa 06       	cpc	r15, r26
    1760:	09 f0       	breq	.+2      	; 0x1764 <main+0x71a>
    1762:	86 c2       	rjmp	.+1292   	; 0x1c70 <main+0xc26>
					if (BitASample>=85) BitA[SigSecond]=true;
    1764:	b4 e5       	ldi	r27, 0x54	; 84
    1766:	b7 15       	cp	r27, r7
    1768:	50 f4       	brcc	.+20     	; 0x177e <main+0x734>
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	fe 01       	movw	r30, r28
    176e:	cc 56       	subi	r28, 0x6C	; 108
    1770:	df 4f       	sbci	r29, 0xFF	; 255
    1772:	28 81       	ld	r18, Y
    1774:	c4 59       	subi	r28, 0x94	; 148
    1776:	d0 40       	sbci	r29, 0x00	; 0
    1778:	e2 0f       	add	r30, r18
    177a:	f1 1d       	adc	r31, r1
    177c:	85 af       	std	Z+61, r24	; 0x3d
					if (BitBSample>=85) BitB[SigSecond]=true;
    177e:	34 e5       	ldi	r19, 0x54	; 84
    1780:	36 15       	cp	r19, r6
    1782:	50 f4       	brcc	.+20     	; 0x1798 <main+0x74e>
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	fe 01       	movw	r30, r28
    1788:	cc 56       	subi	r28, 0x6C	; 108
    178a:	df 4f       	sbci	r29, 0xFF	; 255
    178c:	98 81       	ld	r25, Y
    178e:	c4 59       	subi	r28, 0x94	; 148
    1790:	d0 40       	sbci	r29, 0x00	; 0
    1792:	e9 0f       	add	r30, r25
    1794:	f1 1d       	adc	r31, r1
    1796:	81 83       	std	Z+1, r24	; 0x01
					if (BitCSample>=170) BitC=true;
    1798:	a9 ea       	ldi	r26, 0xA9	; 169
    179a:	a3 15       	cp	r26, r3
    179c:	30 f4       	brcc	.+12     	; 0x17aa <main+0x760>
    179e:	b1 e0       	ldi	r27, 0x01	; 1
    17a0:	ce 56       	subi	r28, 0x6E	; 110
    17a2:	df 4f       	sbci	r29, 0xFF	; 255
    17a4:	b8 83       	st	Y, r27
    17a6:	c2 59       	subi	r28, 0x92	; 146
    17a8:	d0 40       	sbci	r29, 0x00	; 0

					if (!MMarkFound && BitA[0] && BitB[0] && BitC) { // test for minute marker if not found
    17aa:	cb 56       	subi	r28, 0x6B	; 107
    17ac:	df 4f       	sbci	r29, 0xFF	; 255
    17ae:	e8 81       	ld	r30, Y
    17b0:	c5 59       	subi	r28, 0x95	; 149
    17b2:	d0 40       	sbci	r29, 0x00	; 0
    17b4:	e1 11       	cpse	r30, r1
    17b6:	ce c2       	rjmp	.+1436   	; 0x1d54 <main+0xd0a>
    17b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    17ba:	88 23       	and	r24, r24
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <main+0x776>
    17be:	ad c2       	rjmp	.+1370   	; 0x1d1a <main+0xcd0>
    17c0:	89 81       	ldd	r24, Y+1	; 0x01
    17c2:	88 23       	and	r24, r24
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <main+0x77e>
    17c6:	a9 c2       	rjmp	.+1362   	; 0x1d1a <main+0xcd0>
    17c8:	ce 56       	subi	r28, 0x6E	; 110
    17ca:	df 4f       	sbci	r29, 0xFF	; 255
    17cc:	f8 81       	ld	r31, Y
    17ce:	c2 59       	subi	r28, 0x92	; 146
    17d0:	d0 40       	sbci	r29, 0x00	; 0
    17d2:	f1 11       	cpse	r31, r1
    17d4:	e2 c0       	rjmp	.+452    	; 0x199a <main+0x950>
    17d6:	a1 c2       	rjmp	.+1346   	; 0x1d1a <main+0xcd0>
					}

					if (!MMarkFound) {					
						// if no minute marker found display bit samples and results 
						WriteText(&IM8_FontInfo,"BitA",0,30,LEFT);
						WriteText(&IM8_FontInfo,BitA[SigSecond] ? "1" : "0",35,30,FREEPOS);
    17d8:	6f e8       	ldi	r22, 0x8F	; 143
    17da:	71 e0       	ldi	r23, 0x01	; 1
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <main+0x798>
    17de:	6d e8       	ldi	r22, 0x8D	; 141
    17e0:	71 e0       	ldi	r23, 0x01	; 1
    17e2:	03 e0       	ldi	r16, 0x03	; 3
    17e4:	2e e1       	ldi	r18, 0x1E	; 30
    17e6:	43 e2       	ldi	r20, 0x23	; 35
    17e8:	85 e8       	ldi	r24, 0x85	; 133
    17ea:	91 e0       	ldi	r25, 0x01	; 1
    17ec:	0e 94 4e 06 	call	0xc9c	; 0xc9c <_Z9WriteTextPK9FONT_INFOPKchhh>
						Byte2String(BString,BitASample);
    17f0:	67 2d       	mov	r22, r7
    17f2:	ce 01       	movw	r24, r28
    17f4:	83 57       	subi	r24, 0x73	; 115
    17f6:	9f 4f       	sbci	r25, 0xFF	; 255
    17f8:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z11Byte2StringPch>
						WriteText(&IM8_FontInfo,BString,45,30,FREEPOS);
    17fc:	2e e1       	ldi	r18, 0x1E	; 30
    17fe:	4d e2       	ldi	r20, 0x2D	; 45
    1800:	be 01       	movw	r22, r28
    1802:	63 57       	subi	r22, 0x73	; 115
    1804:	7f 4f       	sbci	r23, 0xFF	; 255
    1806:	85 e8       	ldi	r24, 0x85	; 133
    1808:	91 e0       	ldi	r25, 0x01	; 1
    180a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <_Z9WriteTextPK9FONT_INFOPKchhh>

						WriteText(&IM8_FontInfo,"BitB",0,42,LEFT);
    180e:	00 e0       	ldi	r16, 0x00	; 0
    1810:	2a e2       	ldi	r18, 0x2A	; 42
    1812:	40 e0       	ldi	r20, 0x00	; 0
    1814:	6d ec       	ldi	r22, 0xCD	; 205
    1816:	71 e0       	ldi	r23, 0x01	; 1
    1818:	85 e8       	ldi	r24, 0x85	; 133
    181a:	91 e0       	ldi	r25, 0x01	; 1
    181c:	0e 94 4e 06 	call	0xc9c	; 0xc9c <_Z9WriteTextPK9FONT_INFOPKchhh>
						WriteText(&IM8_FontInfo,BitB[SigSecond] ? "1" : "0",35,42,FREEPOS);
    1820:	c7 56       	subi	r28, 0x67	; 103
    1822:	df 4f       	sbci	r29, 0xFF	; 255
    1824:	e8 81       	ld	r30, Y
    1826:	f9 81       	ldd	r31, Y+1	; 0x01
    1828:	c9 59       	subi	r28, 0x99	; 153
    182a:	d0 40       	sbci	r29, 0x00	; 0
    182c:	ec 0f       	add	r30, r28
    182e:	fd 1f       	adc	r31, r29
    1830:	81 81       	ldd	r24, Z+1	; 0x01
    1832:	81 11       	cpse	r24, r1
    1834:	03 c0       	rjmp	.+6      	; 0x183c <main+0x7f2>
    1836:	6f e8       	ldi	r22, 0x8F	; 143
    1838:	71 e0       	ldi	r23, 0x01	; 1
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <main+0x7f6>
    183c:	6d e8       	ldi	r22, 0x8D	; 141
    183e:	71 e0       	ldi	r23, 0x01	; 1
    1840:	03 e0       	ldi	r16, 0x03	; 3
    1842:	2a e2       	ldi	r18, 0x2A	; 42
    1844:	43 e2       	ldi	r20, 0x23	; 35
    1846:	85 e8       	ldi	r24, 0x85	; 133
    1848:	91 e0       	ldi	r25, 0x01	; 1
    184a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <_Z9WriteTextPK9FONT_INFOPKchhh>
						Byte2String(BString,BitBSample);
    184e:	66 2d       	mov	r22, r6
    1850:	ce 01       	movw	r24, r28
    1852:	83 57       	subi	r24, 0x73	; 115
    1854:	9f 4f       	sbci	r25, 0xFF	; 255
    1856:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z11Byte2StringPch>
						WriteText(&IM8_FontInfo,BString,45,42,FREEPOS);
    185a:	2a e2       	ldi	r18, 0x2A	; 42
    185c:	4d e2       	ldi	r20, 0x2D	; 45
    185e:	be 01       	movw	r22, r28
    1860:	63 57       	subi	r22, 0x73	; 115
    1862:	7f 4f       	sbci	r23, 0xFF	; 255
    1864:	85 e8       	ldi	r24, 0x85	; 133
    1866:	91 e0       	ldi	r25, 0x01	; 1
    1868:	0e 94 4e 06 	call	0xc9c	; 0xc9c <_Z9WriteTextPK9FONT_INFOPKchhh>

						WriteText(&IM8_FontInfo,"BitC",0,54,LEFT);
    186c:	00 e0       	ldi	r16, 0x00	; 0
    186e:	26 e3       	ldi	r18, 0x36	; 54
    1870:	40 e0       	ldi	r20, 0x00	; 0
    1872:	62 ed       	ldi	r22, 0xD2	; 210
    1874:	71 e0       	ldi	r23, 0x01	; 1
    1876:	85 e8       	ldi	r24, 0x85	; 133
    1878:	91 e0       	ldi	r25, 0x01	; 1
    187a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <_Z9WriteTextPK9FONT_INFOPKchhh>
						WriteText(&IM8_FontInfo,BitC ? "1" : "0",35,54,FREEPOS);
    187e:	ce 56       	subi	r28, 0x6E	; 110
    1880:	df 4f       	sbci	r29, 0xFF	; 255
    1882:	28 81       	ld	r18, Y
    1884:	c2 59       	subi	r28, 0x92	; 146
    1886:	d0 40       	sbci	r29, 0x00	; 0
    1888:	21 11       	cpse	r18, r1
    188a:	03 c0       	rjmp	.+6      	; 0x1892 <main+0x848>
    188c:	6f e8       	ldi	r22, 0x8F	; 143
    188e:	71 e0       	ldi	r23, 0x01	; 1
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <main+0x84c>
    1892:	6d e8       	ldi	r22, 0x8D	; 141
    1894:	71 e0       	ldi	r23, 0x01	; 1
    1896:	03 e0       	ldi	r16, 0x03	; 3
    1898:	26 e3       	ldi	r18, 0x36	; 54
    189a:	43 e2       	ldi	r20, 0x23	; 35
    189c:	85 e8       	ldi	r24, 0x85	; 133
    189e:	91 e0       	ldi	r25, 0x01	; 1
    18a0:	0e 94 4e 06 	call	0xc9c	; 0xc9c <_Z9WriteTextPK9FONT_INFOPKchhh>
						Byte2String(BString,BitCSample);
    18a4:	63 2d       	mov	r22, r3
    18a6:	ce 01       	movw	r24, r28
    18a8:	83 57       	subi	r24, 0x73	; 115
    18aa:	9f 4f       	sbci	r25, 0xFF	; 255
    18ac:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z11Byte2StringPch>
						WriteText(&IM8_FontInfo,BString,45,54,FREEPOS);
    18b0:	26 e3       	ldi	r18, 0x36	; 54
    18b2:	4d e2       	ldi	r20, 0x2D	; 45
    18b4:	be 01       	movw	r22, r28
    18b6:	63 57       	subi	r22, 0x73	; 115
    18b8:	7f 4f       	sbci	r23, 0xFF	; 255
    18ba:	85 e8       	ldi	r24, 0x85	; 133
    18bc:	91 e0       	ldi	r25, 0x01	; 1
    18be:	0e 94 4e 06 	call	0xc9c	; 0xc9c <_Z9WriteTextPK9FONT_INFOPKchhh>
								
						BitASample=0; // reset samples ready for next second
						BitBSample=0;
						BitCSample=0;											
    18c2:	31 2c       	mov	r3, r1
						WriteText(&IM8_FontInfo,BitC ? "1" : "0",35,54,FREEPOS);
						Byte2String(BString,BitCSample);
						WriteText(&IM8_FontInfo,BString,45,54,FREEPOS);
								
						BitASample=0; // reset samples ready for next second
						BitBSample=0;
    18c4:	61 2c       	mov	r6, r1
						WriteText(&IM8_FontInfo,"BitC",0,54,LEFT);
						WriteText(&IM8_FontInfo,BitC ? "1" : "0",35,54,FREEPOS);
						Byte2String(BString,BitCSample);
						WriteText(&IM8_FontInfo,BString,45,54,FREEPOS);
								
						BitASample=0; // reset samples ready for next second
    18c6:	71 2c       	mov	r7, r1
    18c8:	eb ce       	rjmp	.-554    	; 0x16a0 <main+0x656>
						BitCSample=0;											
					}
					
					if (MMarkFound) { // if minute marker found...
						// ... interpret data collected
						if (SigSecond==24) SigYear=BitA[17]*80 + BitA[18]*40 + BitA[19]*20 + BitA[20]*10 + BitA[21]*8 + BitA[22]*4 + BitA[23]*2 + BitA[24];
    18ca:	2f 96       	adiw	r28, 0x0f	; 15
    18cc:	9f ad       	ldd	r25, Y+63	; 0x3f
    18ce:	2f 97       	sbiw	r28, 0x0f	; 15
    18d0:	60 96       	adiw	r28, 0x10	; 16
    18d2:	8f ad       	ldd	r24, Y+63	; 0x3f
    18d4:	60 97       	sbiw	r28, 0x10	; 16
    18d6:	28 e2       	ldi	r18, 0x28	; 40
    18d8:	82 9f       	mul	r24, r18
    18da:	80 2d       	mov	r24, r0
    18dc:	11 24       	eor	r1, r1
    18de:	30 e5       	ldi	r19, 0x50	; 80
    18e0:	93 9f       	mul	r25, r19
    18e2:	80 0d       	add	r24, r0
    18e4:	11 24       	eor	r1, r1
    18e6:	66 96       	adiw	r28, 0x16	; 22
    18e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    18ea:	66 97       	sbiw	r28, 0x16	; 22
    18ec:	98 0f       	add	r25, r24
    18ee:	62 96       	adiw	r28, 0x12	; 18
    18f0:	2f ad       	ldd	r18, Y+63	; 0x3f
    18f2:	62 97       	sbiw	r28, 0x12	; 18
    18f4:	22 0f       	add	r18, r18
    18f6:	82 2f       	mov	r24, r18
    18f8:	88 0f       	add	r24, r24
    18fa:	88 0f       	add	r24, r24
    18fc:	82 0f       	add	r24, r18
    18fe:	98 0f       	add	r25, r24
    1900:	61 96       	adiw	r28, 0x11	; 17
    1902:	8f ad       	ldd	r24, Y+63	; 0x3f
    1904:	61 97       	sbiw	r28, 0x11	; 17
    1906:	28 2f       	mov	r18, r24
    1908:	22 0f       	add	r18, r18
    190a:	22 0f       	add	r18, r18
    190c:	82 2f       	mov	r24, r18
    190e:	88 0f       	add	r24, r24
    1910:	88 0f       	add	r24, r24
    1912:	82 0f       	add	r24, r18
    1914:	98 0f       	add	r25, r24
    1916:	63 96       	adiw	r28, 0x13	; 19
    1918:	8f ad       	ldd	r24, Y+63	; 0x3f
    191a:	63 97       	sbiw	r28, 0x13	; 19
    191c:	28 2f       	mov	r18, r24
    191e:	22 0f       	add	r18, r18
    1920:	64 96       	adiw	r28, 0x14	; 20
    1922:	8f ad       	ldd	r24, Y+63	; 0x3f
    1924:	64 97       	sbiw	r28, 0x14	; 20
    1926:	82 0f       	add	r24, r18
    1928:	28 2f       	mov	r18, r24
    192a:	22 0f       	add	r18, r18
    192c:	65 96       	adiw	r28, 0x15	; 21
    192e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1930:	65 97       	sbiw	r28, 0x15	; 21
    1932:	82 0f       	add	r24, r18
    1934:	88 0f       	add	r24, r24
    1936:	98 0f       	add	r25, r24
    1938:	cf 55       	subi	r28, 0x5F	; 95
    193a:	df 4f       	sbci	r29, 0xFF	; 255
    193c:	98 83       	st	Y, r25
    193e:	c1 5a       	subi	r28, 0xA1	; 161
    1940:	d0 40       	sbci	r29, 0x00	; 0
    1942:	64 c0       	rjmp	.+200    	; 0x1a0c <main+0x9c2>
						if (SigSecond==29) SigMonth=BitA[25]*10 + BitA[26]*8 + BitA[27]*4 + BitA[28]*2 + BitA[29];
    1944:	cc 56       	subi	r28, 0x6C	; 108
    1946:	df 4f       	sbci	r29, 0xFF	; 255
    1948:	88 81       	ld	r24, Y
    194a:	c4 59       	subi	r28, 0x94	; 148
    194c:	d0 40       	sbci	r29, 0x00	; 0
    194e:	8d 31       	cpi	r24, 0x1D	; 29
    1950:	49 f5       	brne	.+82     	; 0x19a4 <main+0x95a>
    1952:	67 96       	adiw	r28, 0x17	; 23
    1954:	8f ad       	ldd	r24, Y+63	; 0x3f
    1956:	67 97       	sbiw	r28, 0x17	; 23
    1958:	88 0f       	add	r24, r24
    195a:	98 2f       	mov	r25, r24
    195c:	99 0f       	add	r25, r25
    195e:	99 0f       	add	r25, r25
    1960:	98 0f       	add	r25, r24
    1962:	68 96       	adiw	r28, 0x18	; 24
    1964:	8f ad       	ldd	r24, Y+63	; 0x3f
    1966:	68 97       	sbiw	r28, 0x18	; 24
    1968:	88 0f       	add	r24, r24
    196a:	88 0f       	add	r24, r24
    196c:	88 0f       	add	r24, r24
    196e:	89 0f       	add	r24, r25
    1970:	6b 96       	adiw	r28, 0x1b	; 27
    1972:	9f ad       	ldd	r25, Y+63	; 0x3f
    1974:	6b 97       	sbiw	r28, 0x1b	; 27
    1976:	98 0f       	add	r25, r24
    1978:	69 96       	adiw	r28, 0x19	; 25
    197a:	8f ad       	ldd	r24, Y+63	; 0x3f
    197c:	69 97       	sbiw	r28, 0x19	; 25
    197e:	28 2f       	mov	r18, r24
    1980:	22 0f       	add	r18, r18
    1982:	6a 96       	adiw	r28, 0x1a	; 26
    1984:	8f ad       	ldd	r24, Y+63	; 0x3f
    1986:	6a 97       	sbiw	r28, 0x1a	; 26
    1988:	82 0f       	add	r24, r18
    198a:	88 0f       	add	r24, r24
    198c:	98 0f       	add	r25, r24
    198e:	c0 56       	subi	r28, 0x60	; 96
    1990:	df 4f       	sbci	r29, 0xFF	; 255
    1992:	98 83       	st	Y, r25
    1994:	c0 5a       	subi	r28, 0xA0	; 160
    1996:	d0 40       	sbci	r29, 0x00	; 0
    1998:	55 c0       	rjmp	.+170    	; 0x1a44 <main+0x9fa>
					if (BitBSample>=85) BitB[SigSecond]=true;
					if (BitCSample>=170) BitC=true;

					if (!MMarkFound && BitA[0] && BitB[0] && BitC) { // test for minute marker if not found
						MMarkFound=true;
						SigSecond=0;
    199a:	cc 56       	subi	r28, 0x6C	; 108
    199c:	df 4f       	sbci	r29, 0xFF	; 255
    199e:	18 82       	st	Y, r1
    19a0:	c4 59       	subi	r28, 0x94	; 148
    19a2:	d0 40       	sbci	r29, 0x00	; 0
					
					if (MMarkFound) { // if minute marker found...
						// ... interpret data collected
						if (SigSecond==24) SigYear=BitA[17]*80 + BitA[18]*40 + BitA[19]*20 + BitA[20]*10 + BitA[21]*8 + BitA[22]*4 + BitA[23]*2 + BitA[24];
						if (SigSecond==29) SigMonth=BitA[25]*10 + BitA[26]*8 + BitA[27]*4 + BitA[28]*2 + BitA[29];
						if (SigSecond==35) SigDay=BitA[30]*20 + BitA[31]*10 + BitA[32]*8 + BitA[33]*4 + BitA[34]*2 + BitA[35];
    19a4:	cc 56       	subi	r28, 0x6C	; 108
    19a6:	df 4f       	sbci	r29, 0xFF	; 255
    19a8:	98 81       	ld	r25, Y
    19aa:	c4 59       	subi	r28, 0x94	; 148
    19ac:	d0 40       	sbci	r29, 0x00	; 0
    19ae:	93 32       	cpi	r25, 0x23	; 35
    19b0:	69 f5       	brne	.+90     	; 0x1a0c <main+0x9c2>
    19b2:	6c 96       	adiw	r28, 0x1c	; 28
    19b4:	8f ad       	ldd	r24, Y+63	; 0x3f
    19b6:	6c 97       	sbiw	r28, 0x1c	; 28
    19b8:	88 0f       	add	r24, r24
    19ba:	88 0f       	add	r24, r24
    19bc:	28 2f       	mov	r18, r24
    19be:	22 0f       	add	r18, r18
    19c0:	22 0f       	add	r18, r18
    19c2:	28 0f       	add	r18, r24
    19c4:	6d 96       	adiw	r28, 0x1d	; 29
    19c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    19c8:	6d 97       	sbiw	r28, 0x1d	; 29
    19ca:	88 0f       	add	r24, r24
    19cc:	98 2f       	mov	r25, r24
    19ce:	99 0f       	add	r25, r25
    19d0:	99 0f       	add	r25, r25
    19d2:	89 0f       	add	r24, r25
    19d4:	82 0f       	add	r24, r18
    19d6:	a1 96       	adiw	r28, 0x21	; 33
    19d8:	2f ad       	ldd	r18, Y+63	; 0x3f
    19da:	a1 97       	sbiw	r28, 0x21	; 33
    19dc:	28 0f       	add	r18, r24
    19de:	6e 96       	adiw	r28, 0x1e	; 30
    19e0:	8f ad       	ldd	r24, Y+63	; 0x3f
    19e2:	6e 97       	sbiw	r28, 0x1e	; 30
    19e4:	98 2f       	mov	r25, r24
    19e6:	99 0f       	add	r25, r25
    19e8:	6f 96       	adiw	r28, 0x1f	; 31
    19ea:	8f ad       	ldd	r24, Y+63	; 0x3f
    19ec:	6f 97       	sbiw	r28, 0x1f	; 31
    19ee:	89 0f       	add	r24, r25
    19f0:	98 2f       	mov	r25, r24
    19f2:	99 0f       	add	r25, r25
    19f4:	a0 96       	adiw	r28, 0x20	; 32
    19f6:	8f ad       	ldd	r24, Y+63	; 0x3f
    19f8:	a0 97       	sbiw	r28, 0x20	; 32
    19fa:	89 0f       	add	r24, r25
    19fc:	88 0f       	add	r24, r24
    19fe:	28 0f       	add	r18, r24
    1a00:	c1 56       	subi	r28, 0x61	; 97
    1a02:	df 4f       	sbci	r29, 0xFF	; 255
    1a04:	28 83       	st	Y, r18
    1a06:	cf 59       	subi	r28, 0x9F	; 159
    1a08:	d0 40       	sbci	r29, 0x00	; 0
    1a0a:	50 c0       	rjmp	.+160    	; 0x1aac <main+0xa62>
						if (SigSecond==38) SigDoW=BitA[36]*4 + BitA[37]*2 + BitA[38];
    1a0c:	cc 56       	subi	r28, 0x6C	; 108
    1a0e:	df 4f       	sbci	r29, 0xFF	; 255
    1a10:	a8 81       	ld	r26, Y
    1a12:	c4 59       	subi	r28, 0x94	; 148
    1a14:	d0 40       	sbci	r29, 0x00	; 0
    1a16:	a6 32       	cpi	r26, 0x26	; 38
    1a18:	a9 f4       	brne	.+42     	; 0x1a44 <main+0x9fa>
    1a1a:	a2 96       	adiw	r28, 0x22	; 34
    1a1c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a1e:	a2 97       	sbiw	r28, 0x22	; 34
    1a20:	a3 96       	adiw	r28, 0x23	; 35
    1a22:	8f ad       	ldd	r24, Y+63	; 0x3f
    1a24:	a3 97       	sbiw	r28, 0x23	; 35
    1a26:	b2 e0       	ldi	r27, 0x02	; 2
    1a28:	9b 9f       	mul	r25, r27
    1a2a:	80 0d       	add	r24, r0
    1a2c:	11 24       	eor	r1, r1
    1a2e:	88 0f       	add	r24, r24
    1a30:	a4 96       	adiw	r28, 0x24	; 36
    1a32:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a34:	a4 97       	sbiw	r28, 0x24	; 36
    1a36:	89 0f       	add	r24, r25
    1a38:	c2 56       	subi	r28, 0x62	; 98
    1a3a:	df 4f       	sbci	r29, 0xFF	; 255
    1a3c:	88 83       	st	Y, r24
    1a3e:	ce 59       	subi	r28, 0x9E	; 158
    1a40:	d0 40       	sbci	r29, 0x00	; 0
    1a42:	72 c0       	rjmp	.+228    	; 0x1b28 <main+0xade>
						if (SigSecond==44) SigHour=BitA[39]*20 + BitA[40]*10 + BitA[41]*8 + BitA[42]*4 + BitA[43]*2 + BitA[44];
    1a44:	cc 56       	subi	r28, 0x6C	; 108
    1a46:	df 4f       	sbci	r29, 0xFF	; 255
    1a48:	e8 81       	ld	r30, Y
    1a4a:	c4 59       	subi	r28, 0x94	; 148
    1a4c:	d0 40       	sbci	r29, 0x00	; 0
    1a4e:	ec 32       	cpi	r30, 0x2C	; 44
    1a50:	69 f5       	brne	.+90     	; 0x1aac <main+0xa62>
    1a52:	a5 96       	adiw	r28, 0x25	; 37
    1a54:	8f ad       	ldd	r24, Y+63	; 0x3f
    1a56:	a5 97       	sbiw	r28, 0x25	; 37
    1a58:	88 0f       	add	r24, r24
    1a5a:	88 0f       	add	r24, r24
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	22 0f       	add	r18, r18
    1a60:	22 0f       	add	r18, r18
    1a62:	28 0f       	add	r18, r24
    1a64:	a6 96       	adiw	r28, 0x26	; 38
    1a66:	8f ad       	ldd	r24, Y+63	; 0x3f
    1a68:	a6 97       	sbiw	r28, 0x26	; 38
    1a6a:	88 0f       	add	r24, r24
    1a6c:	98 2f       	mov	r25, r24
    1a6e:	99 0f       	add	r25, r25
    1a70:	99 0f       	add	r25, r25
    1a72:	89 0f       	add	r24, r25
    1a74:	82 0f       	add	r24, r18
    1a76:	aa 96       	adiw	r28, 0x2a	; 42
    1a78:	2f ad       	ldd	r18, Y+63	; 0x3f
    1a7a:	aa 97       	sbiw	r28, 0x2a	; 42
    1a7c:	28 0f       	add	r18, r24
    1a7e:	a7 96       	adiw	r28, 0x27	; 39
    1a80:	8f ad       	ldd	r24, Y+63	; 0x3f
    1a82:	a7 97       	sbiw	r28, 0x27	; 39
    1a84:	98 2f       	mov	r25, r24
    1a86:	99 0f       	add	r25, r25
    1a88:	a8 96       	adiw	r28, 0x28	; 40
    1a8a:	8f ad       	ldd	r24, Y+63	; 0x3f
    1a8c:	a8 97       	sbiw	r28, 0x28	; 40
    1a8e:	89 0f       	add	r24, r25
    1a90:	98 2f       	mov	r25, r24
    1a92:	99 0f       	add	r25, r25
    1a94:	a9 96       	adiw	r28, 0x29	; 41
    1a96:	8f ad       	ldd	r24, Y+63	; 0x3f
    1a98:	a9 97       	sbiw	r28, 0x29	; 41
    1a9a:	89 0f       	add	r24, r25
    1a9c:	88 0f       	add	r24, r24
    1a9e:	28 0f       	add	r18, r24
    1aa0:	c3 56       	subi	r28, 0x63	; 99
    1aa2:	df 4f       	sbci	r29, 0xFF	; 255
    1aa4:	28 83       	st	Y, r18
    1aa6:	cd 59       	subi	r28, 0x9D	; 157
    1aa8:	d0 40       	sbci	r29, 0x00	; 0
    1aaa:	45 c0       	rjmp	.+138    	; 0x1b36 <main+0xaec>
						if (SigSecond==51) SigMinute=BitA[45]*40 + BitA[46]*20 + BitA[47]*10 + BitA[48]*8 + BitA[49]*4 + BitA[50]*2 + BitA[51];
    1aac:	cc 56       	subi	r28, 0x6C	; 108
    1aae:	df 4f       	sbci	r29, 0xFF	; 255
    1ab0:	f8 81       	ld	r31, Y
    1ab2:	c4 59       	subi	r28, 0x94	; 148
    1ab4:	d0 40       	sbci	r29, 0x00	; 0
    1ab6:	f3 33       	cpi	r31, 0x33	; 51
    1ab8:	b9 f5       	brne	.+110    	; 0x1b28 <main+0xade>
    1aba:	ab 96       	adiw	r28, 0x2b	; 43
    1abc:	2f ad       	ldd	r18, Y+63	; 0x3f
    1abe:	ab 97       	sbiw	r28, 0x2b	; 43
    1ac0:	ac 96       	adiw	r28, 0x2c	; 44
    1ac2:	8f ad       	ldd	r24, Y+63	; 0x3f
    1ac4:	ac 97       	sbiw	r28, 0x2c	; 44
    1ac6:	98 2f       	mov	r25, r24
    1ac8:	99 0f       	add	r25, r25
    1aca:	99 0f       	add	r25, r25
    1acc:	89 2f       	mov	r24, r25
    1ace:	88 0f       	add	r24, r24
    1ad0:	88 0f       	add	r24, r24
    1ad2:	89 0f       	add	r24, r25
    1ad4:	38 e2       	ldi	r19, 0x28	; 40
    1ad6:	23 9f       	mul	r18, r19
    1ad8:	80 0d       	add	r24, r0
    1ada:	11 24       	eor	r1, r1
    1adc:	e1 96       	adiw	r28, 0x31	; 49
    1ade:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ae0:	e1 97       	sbiw	r28, 0x31	; 49
    1ae2:	98 0f       	add	r25, r24
    1ae4:	ae 96       	adiw	r28, 0x2e	; 46
    1ae6:	8f ad       	ldd	r24, Y+63	; 0x3f
    1ae8:	ae 97       	sbiw	r28, 0x2e	; 46
    1aea:	88 0f       	add	r24, r24
    1aec:	88 0f       	add	r24, r24
    1aee:	88 0f       	add	r24, r24
    1af0:	98 0f       	add	r25, r24
    1af2:	ad 96       	adiw	r28, 0x2d	; 45
    1af4:	8f ad       	ldd	r24, Y+63	; 0x3f
    1af6:	ad 97       	sbiw	r28, 0x2d	; 45
    1af8:	28 2f       	mov	r18, r24
    1afa:	22 0f       	add	r18, r18
    1afc:	82 2f       	mov	r24, r18
    1afe:	88 0f       	add	r24, r24
    1b00:	88 0f       	add	r24, r24
    1b02:	82 0f       	add	r24, r18
    1b04:	98 0f       	add	r25, r24
    1b06:	af 96       	adiw	r28, 0x2f	; 47
    1b08:	8f ad       	ldd	r24, Y+63	; 0x3f
    1b0a:	af 97       	sbiw	r28, 0x2f	; 47
    1b0c:	28 2f       	mov	r18, r24
    1b0e:	22 0f       	add	r18, r18
    1b10:	e0 96       	adiw	r28, 0x30	; 48
    1b12:	8f ad       	ldd	r24, Y+63	; 0x3f
    1b14:	e0 97       	sbiw	r28, 0x30	; 48
    1b16:	82 0f       	add	r24, r18
    1b18:	88 0f       	add	r24, r24
    1b1a:	98 0f       	add	r25, r24
    1b1c:	c4 56       	subi	r28, 0x64	; 100
    1b1e:	df 4f       	sbci	r29, 0xFF	; 255
    1b20:	98 83       	st	Y, r25
    1b22:	cc 59       	subi	r28, 0x9C	; 156
    1b24:	d0 40       	sbci	r29, 0x00	; 0
    1b26:	07 c0       	rjmp	.+14     	; 0x1b36 <main+0xaec>

						if (SigSecond>=24) {
    1b28:	cc 56       	subi	r28, 0x6C	; 108
    1b2a:	df 4f       	sbci	r29, 0xFF	; 255
    1b2c:	88 81       	ld	r24, Y
    1b2e:	c4 59       	subi	r28, 0x94	; 148
    1b30:	d0 40       	sbci	r29, 0x00	; 0
    1b32:	88 31       	cpi	r24, 0x18	; 24
    1b34:	a0 f0       	brcs	.+40     	; 0x1b5e <main+0xb14>
							Byte2String(BString,SigYear);
    1b36:	cf 55       	subi	r28, 0x5F	; 95
    1b38:	df 4f       	sbci	r29, 0xFF	; 255
    1b3a:	68 81       	ld	r22, Y
    1b3c:	c1 5a       	subi	r28, 0xA1	; 161
    1b3e:	d0 40       	sbci	r29, 0x00	; 0
    1b40:	ce 01       	movw	r24, r28
    1b42:	83 57       	subi	r24, 0x73	; 115
    1b44:	9f 4f       	sbci	r25, 0xFF	; 255
    1b46:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z11Byte2StringPch>
							WriteText(&IM8_FontInfo,BString,40,30,FREEPOS);
    1b4a:	03 e0       	ldi	r16, 0x03	; 3
    1b4c:	2e e1       	ldi	r18, 0x1E	; 30
    1b4e:	48 e2       	ldi	r20, 0x28	; 40
    1b50:	be 01       	movw	r22, r28
    1b52:	63 57       	subi	r22, 0x73	; 115
    1b54:	7f 4f       	sbci	r23, 0xFF	; 255
    1b56:	85 e8       	ldi	r24, 0x85	; 133
    1b58:	91 e0       	ldi	r25, 0x01	; 1
    1b5a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <_Z9WriteTextPK9FONT_INFOPKchhh>
						}
						if (SigSecond>=29) {
    1b5e:	cc 56       	subi	r28, 0x6C	; 108
    1b60:	df 4f       	sbci	r29, 0xFF	; 255
    1b62:	98 81       	ld	r25, Y
    1b64:	c4 59       	subi	r28, 0x94	; 148
    1b66:	d0 40       	sbci	r29, 0x00	; 0
    1b68:	9d 31       	cpi	r25, 0x1D	; 29
    1b6a:	a0 f0       	brcs	.+40     	; 0x1b94 <main+0xb4a>
							Byte2String(BString,SigMonth);
    1b6c:	c0 56       	subi	r28, 0x60	; 96
    1b6e:	df 4f       	sbci	r29, 0xFF	; 255
    1b70:	68 81       	ld	r22, Y
    1b72:	c0 5a       	subi	r28, 0xA0	; 160
    1b74:	d0 40       	sbci	r29, 0x00	; 0
    1b76:	ce 01       	movw	r24, r28
    1b78:	83 57       	subi	r24, 0x73	; 115
    1b7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b7c:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z11Byte2StringPch>
							WriteText(&IM8_FontInfo,BString,20,30,FREEPOS);
    1b80:	03 e0       	ldi	r16, 0x03	; 3
    1b82:	2e e1       	ldi	r18, 0x1E	; 30
    1b84:	44 e1       	ldi	r20, 0x14	; 20
    1b86:	be 01       	movw	r22, r28
    1b88:	63 57       	subi	r22, 0x73	; 115
    1b8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b8c:	85 e8       	ldi	r24, 0x85	; 133
    1b8e:	91 e0       	ldi	r25, 0x01	; 1
    1b90:	0e 94 4e 06 	call	0xc9c	; 0xc9c <_Z9WriteTextPK9FONT_INFOPKchhh>
						}
						if (SigSecond>=35) {
    1b94:	cc 56       	subi	r28, 0x6C	; 108
    1b96:	df 4f       	sbci	r29, 0xFF	; 255
    1b98:	a8 81       	ld	r26, Y
    1b9a:	c4 59       	subi	r28, 0x94	; 148
    1b9c:	d0 40       	sbci	r29, 0x00	; 0
    1b9e:	a3 32       	cpi	r26, 0x23	; 35
    1ba0:	a0 f0       	brcs	.+40     	; 0x1bca <main+0xb80>
							Byte2String(BString,SigDay);
    1ba2:	c1 56       	subi	r28, 0x61	; 97
    1ba4:	df 4f       	sbci	r29, 0xFF	; 255
    1ba6:	68 81       	ld	r22, Y
    1ba8:	cf 59       	subi	r28, 0x9F	; 159
    1baa:	d0 40       	sbci	r29, 0x00	; 0
    1bac:	ce 01       	movw	r24, r28
    1bae:	83 57       	subi	r24, 0x73	; 115
    1bb0:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb2:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z11Byte2StringPch>
							WriteText(&IM8_FontInfo,BString,0,30,FREEPOS);
    1bb6:	03 e0       	ldi	r16, 0x03	; 3
    1bb8:	2e e1       	ldi	r18, 0x1E	; 30
    1bba:	40 e0       	ldi	r20, 0x00	; 0
    1bbc:	be 01       	movw	r22, r28
    1bbe:	63 57       	subi	r22, 0x73	; 115
    1bc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc2:	85 e8       	ldi	r24, 0x85	; 133
    1bc4:	91 e0       	ldi	r25, 0x01	; 1
    1bc6:	0e 94 4e 06 	call	0xc9c	; 0xc9c <_Z9WriteTextPK9FONT_INFOPKchhh>
						}
						if (SigSecond>=38) {
    1bca:	cc 56       	subi	r28, 0x6C	; 108
    1bcc:	df 4f       	sbci	r29, 0xFF	; 255
    1bce:	b8 81       	ld	r27, Y
    1bd0:	c4 59       	subi	r28, 0x94	; 148
    1bd2:	d0 40       	sbci	r29, 0x00	; 0
    1bd4:	b6 32       	cpi	r27, 0x26	; 38
    1bd6:	a0 f0       	brcs	.+40     	; 0x1c00 <main+0xbb6>
							Byte2String(BString,SigDoW);
    1bd8:	c2 56       	subi	r28, 0x62	; 98
    1bda:	df 4f       	sbci	r29, 0xFF	; 255
    1bdc:	68 81       	ld	r22, Y
    1bde:	ce 59       	subi	r28, 0x9E	; 158
    1be0:	d0 40       	sbci	r29, 0x00	; 0
    1be2:	ce 01       	movw	r24, r28
    1be4:	83 57       	subi	r24, 0x73	; 115
    1be6:	9f 4f       	sbci	r25, 0xFF	; 255
    1be8:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z11Byte2StringPch>
							WriteText(&IM8_FontInfo,BString,70,30,FREEPOS);
    1bec:	03 e0       	ldi	r16, 0x03	; 3
    1bee:	2e e1       	ldi	r18, 0x1E	; 30
    1bf0:	46 e4       	ldi	r20, 0x46	; 70
    1bf2:	be 01       	movw	r22, r28
    1bf4:	63 57       	subi	r22, 0x73	; 115
    1bf6:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf8:	85 e8       	ldi	r24, 0x85	; 133
    1bfa:	91 e0       	ldi	r25, 0x01	; 1
    1bfc:	0e 94 4e 06 	call	0xc9c	; 0xc9c <_Z9WriteTextPK9FONT_INFOPKchhh>
						}
						if (SigSecond>=44) {
    1c00:	cc 56       	subi	r28, 0x6C	; 108
    1c02:	df 4f       	sbci	r29, 0xFF	; 255
    1c04:	e8 81       	ld	r30, Y
    1c06:	c4 59       	subi	r28, 0x94	; 148
    1c08:	d0 40       	sbci	r29, 0x00	; 0
    1c0a:	ec 32       	cpi	r30, 0x2C	; 44
    1c0c:	a0 f0       	brcs	.+40     	; 0x1c36 <main+0xbec>
							Byte2String(BString,SigHour);
    1c0e:	c3 56       	subi	r28, 0x63	; 99
    1c10:	df 4f       	sbci	r29, 0xFF	; 255
    1c12:	68 81       	ld	r22, Y
    1c14:	cd 59       	subi	r28, 0x9D	; 157
    1c16:	d0 40       	sbci	r29, 0x00	; 0
    1c18:	ce 01       	movw	r24, r28
    1c1a:	83 57       	subi	r24, 0x73	; 115
    1c1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c1e:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z11Byte2StringPch>
							WriteText(&IM8_FontInfo,BString,0,42,FREEPOS);
    1c22:	03 e0       	ldi	r16, 0x03	; 3
    1c24:	2a e2       	ldi	r18, 0x2A	; 42
    1c26:	40 e0       	ldi	r20, 0x00	; 0
    1c28:	be 01       	movw	r22, r28
    1c2a:	63 57       	subi	r22, 0x73	; 115
    1c2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2e:	85 e8       	ldi	r24, 0x85	; 133
    1c30:	91 e0       	ldi	r25, 0x01	; 1
    1c32:	0e 94 4e 06 	call	0xc9c	; 0xc9c <_Z9WriteTextPK9FONT_INFOPKchhh>
						}
						if (SigSecond>=51) {
    1c36:	cc 56       	subi	r28, 0x6C	; 108
    1c38:	df 4f       	sbci	r29, 0xFF	; 255
    1c3a:	f8 81       	ld	r31, Y
    1c3c:	c4 59       	subi	r28, 0x94	; 148
    1c3e:	d0 40       	sbci	r29, 0x00	; 0
    1c40:	f3 33       	cpi	r31, 0x33	; 51
    1c42:	08 f4       	brcc	.+2      	; 0x1c46 <main+0xbfc>
    1c44:	90 c0       	rjmp	.+288    	; 0x1d66 <main+0xd1c>
							Byte2String(BString,SigMinute);
    1c46:	c4 56       	subi	r28, 0x64	; 100
    1c48:	df 4f       	sbci	r29, 0xFF	; 255
    1c4a:	68 81       	ld	r22, Y
    1c4c:	cc 59       	subi	r28, 0x9C	; 156
    1c4e:	d0 40       	sbci	r29, 0x00	; 0
    1c50:	ce 01       	movw	r24, r28
    1c52:	83 57       	subi	r24, 0x73	; 115
    1c54:	9f 4f       	sbci	r25, 0xFF	; 255
    1c56:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z11Byte2StringPch>
							WriteText(&IM8_FontInfo,BString,20,42,FREEPOS);
    1c5a:	03 e0       	ldi	r16, 0x03	; 3
    1c5c:	2a e2       	ldi	r18, 0x2A	; 42
    1c5e:	44 e1       	ldi	r20, 0x14	; 20
    1c60:	be 01       	movw	r22, r28
    1c62:	63 57       	subi	r22, 0x73	; 115
    1c64:	7f 4f       	sbci	r23, 0xFF	; 255
    1c66:	85 e8       	ldi	r24, 0x85	; 133
    1c68:	91 e0       	ldi	r25, 0x01	; 1
    1c6a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <_Z9WriteTextPK9FONT_INFOPKchhh>
    1c6e:	7b c0       	rjmp	.+246    	; 0x1d66 <main+0xd1c>
    1c70:	c7 01       	movw	r24, r14
    1c72:	01 96       	adiw	r24, 0x01	; 1

			BitA[SigSecond]=false;
			BitB[SigSecond]=false;
			BitC=false;
			
			for (i=0; i<=999; i++) {
    1c74:	88 3e       	cpi	r24, 0xE8	; 232
    1c76:	93 40       	sbci	r25, 0x03	; 3
    1c78:	08 f4       	brcc	.+2      	; 0x1c7c <main+0xc32>
    1c7a:	12 cd       	rjmp	.-1500   	; 0x16a0 <main+0x656>
				}
			
			
			}
			
			if (MMarkFound) {
    1c7c:	cb 56       	subi	r28, 0x6B	; 107
    1c7e:	df 4f       	sbci	r29, 0xFF	; 255
    1c80:	38 81       	ld	r19, Y
    1c82:	c5 59       	subi	r28, 0x95	; 149
    1c84:	d0 40       	sbci	r29, 0x00	; 0
    1c86:	33 23       	and	r19, r19
    1c88:	a1 f0       	breq	.+40     	; 0x1cb2 <main+0xc68>
				Byte2String(BString,SigSecond);
    1c8a:	cc 56       	subi	r28, 0x6C	; 108
    1c8c:	df 4f       	sbci	r29, 0xFF	; 255
    1c8e:	68 81       	ld	r22, Y
    1c90:	c4 59       	subi	r28, 0x94	; 148
    1c92:	d0 40       	sbci	r29, 0x00	; 0
    1c94:	ce 01       	movw	r24, r28
    1c96:	83 57       	subi	r24, 0x73	; 115
    1c98:	9f 4f       	sbci	r25, 0xFF	; 255
    1c9a:	0e 94 5e 07 	call	0xebc	; 0xebc <_Z11Byte2StringPch>
				WriteText(&IM8_FontInfo,BString,128,0,RIGHT);
    1c9e:	02 e0       	ldi	r16, 0x02	; 2
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	40 e8       	ldi	r20, 0x80	; 128
    1ca4:	be 01       	movw	r22, r28
    1ca6:	63 57       	subi	r22, 0x73	; 115
    1ca8:	7f 4f       	sbci	r23, 0xFF	; 255
    1caa:	85 e8       	ldi	r24, 0x85	; 133
    1cac:	91 e0       	ldi	r25, 0x01	; 1
    1cae:	0e 94 4e 06 	call	0xc9c	; 0xc9c <_Z9WriteTextPK9FONT_INFOPKchhh>
		}
		// --------------------------------------------------------------------------------------


		
		fb.show(); // update OLED screen
    1cb2:	81 ee       	ldi	r24, 0xE1	; 225
    1cb4:	91 e0       	ldi	r25, 0x01	; 1
    1cb6:	0e 94 a1 05 	call	0xb42	; 0xb42 <_ZN11Framebuffer4showEv>
		
		
	}
    1cba:	79 ca       	rjmp	.-2830   	; 0x11ae <main+0x164>
					x++;
				}
				PrevPinState=PinState;
				PinState=CHECK_BIT(buffer[x],y);  // read pin state
			
				if (i>=LEdgeSMin && i<=LEdgeSMin+(10*LEdgeSRange)-1) // id ms counter within Leading Edge search range
    1cbc:	cf 56       	subi	r28, 0x6F	; 111
    1cbe:	df 4f       	sbci	r29, 0xFF	; 255
    1cc0:	a8 81       	ld	r26, Y
    1cc2:	c1 59       	subi	r28, 0x91	; 145
    1cc4:	d0 40       	sbci	r29, 0x00	; 0
    1cc6:	8a 2f       	mov	r24, r26
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	3c 01       	movw	r6, r24
    1ccc:	66 0c       	add	r6, r6
    1cce:	77 1c       	adc	r7, r7
    1cd0:	88 0f       	add	r24, r24
    1cd2:	99 1f       	adc	r25, r25
    1cd4:	88 0f       	add	r24, r24
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	88 0f       	add	r24, r24
    1cda:	99 1f       	adc	r25, r25
    1cdc:	86 0d       	add	r24, r6
    1cde:	97 1d       	adc	r25, r7
    1ce0:	32 01       	movw	r6, r4
    1ce2:	b1 e0       	ldi	r27, 0x01	; 1
    1ce4:	6b 1a       	sub	r6, r27
    1ce6:	71 08       	sbc	r7, r1
    1ce8:	68 0e       	add	r6, r24
    1cea:	79 1e       	adc	r7, r25
    1cec:	0c e0       	ldi	r16, 0x0C	; 12
    1cee:	04 19       	sub	r16, r4
    1cf0:	21 2f       	mov	r18, r17
    1cf2:	e1 2c       	mov	r14, r1
    1cf4:	f1 2c       	mov	r15, r1
			}
			
			x=0;  // Buffer byte counter
			y=0;  // Buffer bit counter
			for (i=0; i<=999; i++) {   // millisecond counter
				y++;
    1cf6:	cc 24       	eor	r12, r12
    1cf8:	c3 94       	inc	r12
    1cfa:	d1 2c       	mov	r13, r1
					x++;
				}
				PrevPinState=PinState;
				PinState=CHECK_BIT(buffer[x],y);  // read pin state
			
				if (i>=LEdgeSMin && i<=LEdgeSMin+(10*LEdgeSRange)-1) // id ms counter within Leading Edge search range
    1cfc:	a1 2c       	mov	r10, r1
    1cfe:	b1 2c       	mov	r11, r1
				{
					if (!PrevPinState && PinState) 	LEdgeCount[(i-LEdgeSMin)/LEdgeSRange]++; // leading Edge found, increment counter for current bin
    1d00:	ea 2f       	mov	r30, r26
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	ce 56       	subi	r28, 0x6E	; 110
    1d06:	df 4f       	sbci	r29, 0xFF	; 255
    1d08:	f9 83       	std	Y+1, r31	; 0x01
    1d0a:	e8 83       	st	Y, r30
    1d0c:	c2 59       	subi	r28, 0x92	; 146
    1d0e:	d0 40       	sbci	r29, 0x00	; 0
			x=0;  // Buffer byte counter
			y=0;  // Buffer bit counter
			for (i=0; i<=999; i++) {   // millisecond counter
				y++;
				if (y==8) {  
					y=0;
    1d10:	31 2c       	mov	r3, r1
    1d12:	80 2f       	mov	r24, r16
    1d14:	85 01       	movw	r16, r10
    1d16:	a8 2e       	mov	r10, r24
    1d18:	b9 ca       	rjmp	.-2702   	; 0x128c <main+0x242>
						SigSecond=0;
					}

					if (!MMarkFound) {					
						// if no minute marker found display bit samples and results 
						WriteText(&IM8_FontInfo,"BitA",0,30,LEFT);
    1d1a:	00 e0       	ldi	r16, 0x00	; 0
    1d1c:	2e e1       	ldi	r18, 0x1E	; 30
    1d1e:	40 e0       	ldi	r20, 0x00	; 0
    1d20:	67 ed       	ldi	r22, 0xD7	; 215
    1d22:	71 e0       	ldi	r23, 0x01	; 1
    1d24:	85 e8       	ldi	r24, 0x85	; 133
    1d26:	91 e0       	ldi	r25, 0x01	; 1
    1d28:	0e 94 4e 06 	call	0xc9c	; 0xc9c <_Z9WriteTextPK9FONT_INFOPKchhh>
						WriteText(&IM8_FontInfo,BitA[SigSecond] ? "1" : "0",35,30,FREEPOS);
    1d2c:	cc 56       	subi	r28, 0x6C	; 108
    1d2e:	df 4f       	sbci	r29, 0xFF	; 255
    1d30:	98 81       	ld	r25, Y
    1d32:	c4 59       	subi	r28, 0x94	; 148
    1d34:	d0 40       	sbci	r29, 0x00	; 0
    1d36:	89 2f       	mov	r24, r25
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	c7 56       	subi	r28, 0x67	; 103
    1d3c:	df 4f       	sbci	r29, 0xFF	; 255
    1d3e:	99 83       	std	Y+1, r25	; 0x01
    1d40:	88 83       	st	Y, r24
    1d42:	c9 59       	subi	r28, 0x99	; 153
    1d44:	d0 40       	sbci	r29, 0x00	; 0
    1d46:	fc 01       	movw	r30, r24
    1d48:	ec 0f       	add	r30, r28
    1d4a:	fd 1f       	adc	r31, r29
    1d4c:	85 ad       	ldd	r24, Z+61	; 0x3d
    1d4e:	81 11       	cpse	r24, r1
    1d50:	46 cd       	rjmp	.-1396   	; 0x17de <main+0x794>
    1d52:	42 cd       	rjmp	.-1404   	; 0x17d8 <main+0x78e>
						BitCSample=0;											
					}
					
					if (MMarkFound) { // if minute marker found...
						// ... interpret data collected
						if (SigSecond==24) SigYear=BitA[17]*80 + BitA[18]*40 + BitA[19]*20 + BitA[20]*10 + BitA[21]*8 + BitA[22]*4 + BitA[23]*2 + BitA[24];
    1d54:	cc 56       	subi	r28, 0x6C	; 108
    1d56:	df 4f       	sbci	r29, 0xFF	; 255
    1d58:	a8 81       	ld	r26, Y
    1d5a:	c4 59       	subi	r28, 0x94	; 148
    1d5c:	d0 40       	sbci	r29, 0x00	; 0
    1d5e:	a8 31       	cpi	r26, 0x18	; 24
    1d60:	09 f0       	breq	.+2      	; 0x1d64 <main+0xd1a>
    1d62:	f0 cd       	rjmp	.-1056   	; 0x1944 <main+0x8fa>
    1d64:	b2 cd       	rjmp	.-1180   	; 0x18ca <main+0x880>
			fb.drawVLine(62,25,3);
			
			// increment signal second counter if MMark found
			if (MMarkFound) {
				SigSecond++;
				if (SigSecond>=60) SigSecond=0;
    1d66:	b1 e0       	ldi	r27, 0x01	; 1
    1d68:	cb 56       	subi	r28, 0x6B	; 107
    1d6a:	df 4f       	sbci	r29, 0xFF	; 255
    1d6c:	b8 83       	st	Y, r27
    1d6e:	c5 59       	subi	r28, 0x95	; 149
    1d70:	d0 40       	sbci	r29, 0x00	; 0
    1d72:	96 cc       	rjmp	.-1748   	; 0x16a0 <main+0x656>
				if (y==8) {
					y=0;
					x++;
				}

				PinState=CHECK_BIT(buffer[x],y);  // read pin state
    1d74:	f5 01       	movw	r30, r10
    1d76:	eb 5f       	subi	r30, 0xFB	; 251
    1d78:	fe 4f       	sbci	r31, 0xFE	; 254
    1d7a:	80 81       	ld	r24, Z
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	0c 2c       	mov	r0, r12
    1d80:	02 c0       	rjmp	.+4      	; 0x1d86 <main+0xd3c>
    1d82:	95 95       	asr	r25
    1d84:	87 95       	ror	r24
    1d86:	0a 94       	dec	r0
    1d88:	e2 f7       	brpl	.-8      	; 0x1d82 <main+0xd38>
				//if (!LEdgeDetect && PinState && i<25) { // adjust tick counter for drift
					//TC=TC-i;
					//LEdgeDetect=true;
				//}
	
				if (PinState) fb.drawPixel((i/10)+12,(i%10)+14); // draw pixel to show raw signal
    1d8a:	18 2f       	mov	r17, r24
    1d8c:	11 70       	andi	r17, 0x01	; 1
    1d8e:	80 ff       	sbrs	r24, 0
    1d90:	e3 cc       	rjmp	.-1594   	; 0x1758 <main+0x70e>
    1d92:	9e cc       	rjmp	.-1732   	; 0x16d0 <main+0x686>

00001d94 <_GLOBAL__sub_I_fb>:
const uint8_t TILDE = 93;

#pragma endregion

// Global variables
Framebuffer fb;
    1d94:	81 ee       	ldi	r24, 0xE1	; 225
    1d96:	91 e0       	ldi	r25, 0x01	; 1
    1d98:	0e 94 95 05 	call	0xb2a	; 0xb2a <_ZN11FramebufferC1Ev>
    1d9c:	08 95       	ret

00001d9e <_ZN7SSD130611sendCommandEh>:

    // Turn display back on
    sendCommand(SSD1306_DISPLAYON);
}

void SSD1306::sendCommand(uint8_t command) {
    1d9e:	1f 93       	push	r17
    1da0:	cf 93       	push	r28
    1da2:	df 93       	push	r29
    1da4:	ec 01       	movw	r28, r24
    1da6:	16 2f       	mov	r17, r22
    i2c.start();
    1da8:	0e 94 af 05 	call	0xb5e	; 0xb5e <_ZN3I2C5startEv>
    i2c.write(0x00);
    1dac:	60 e0       	ldi	r22, 0x00	; 0
    1dae:	ce 01       	movw	r24, r28
    1db0:	0e 94 dd 05 	call	0xbba	; 0xbba <_ZN3I2C5writeEh>
    i2c.write(command);
    1db4:	61 2f       	mov	r22, r17
    1db6:	ce 01       	movw	r24, r28
    1db8:	0e 94 dd 05 	call	0xbba	; 0xbba <_ZN3I2C5writeEh>
    i2c.stop();
    1dbc:	ce 01       	movw	r24, r28
    1dbe:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN3I2C4stopEv>
}
    1dc2:	df 91       	pop	r29
    1dc4:	cf 91       	pop	r28
    1dc6:	1f 91       	pop	r17
    1dc8:	08 95       	ret

00001dca <_ZN7SSD1306C1Ev>:
#include "simulator/I2C.h"
#else
#include "I2C.h"
#endif

SSD1306::SSD1306() {
    1dca:	cf 93       	push	r28
    1dcc:	df 93       	push	r29
    1dce:	ec 01       	movw	r28, r24
    1dd0:	0e 94 a6 05 	call	0xb4c	; 0xb4c <_ZN3I2CC1Ev>
    i2c.init(SSD1306_DEFAULT_ADDRESS);
    1dd4:	68 e7       	ldi	r22, 0x78	; 120
    1dd6:	ce 01       	movw	r24, r28
    1dd8:	0e 94 a7 05 	call	0xb4e	; 0xb4e <_ZN3I2C4initEh>

    // Turn display off
    sendCommand(SSD1306_DISPLAYOFF);
    1ddc:	6e ea       	ldi	r22, 0xAE	; 174
    1dde:	ce 01       	movw	r24, r28
    1de0:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_SETDISPLAYCLOCKDIV);
    1de4:	65 ed       	ldi	r22, 0xD5	; 213
    1de6:	ce 01       	movw	r24, r28
    1de8:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>
    sendCommand(0x80);
    1dec:	60 e8       	ldi	r22, 0x80	; 128
    1dee:	ce 01       	movw	r24, r28
    1df0:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_SETMULTIPLEX);
    1df4:	68 ea       	ldi	r22, 0xA8	; 168
    1df6:	ce 01       	movw	r24, r28
    1df8:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>
    sendCommand(0x3F);
    1dfc:	6f e3       	ldi	r22, 0x3F	; 63
    1dfe:	ce 01       	movw	r24, r28
    1e00:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>
    
    sendCommand(SSD1306_SETDISPLAYOFFSET);
    1e04:	63 ed       	ldi	r22, 0xD3	; 211
    1e06:	ce 01       	movw	r24, r28
    1e08:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>
    sendCommand(0x00);
    1e0c:	60 e0       	ldi	r22, 0x00	; 0
    1e0e:	ce 01       	movw	r24, r28
    1e10:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>
    
    sendCommand(SSD1306_SETSTARTLINE | 0x00);
    1e14:	60 e4       	ldi	r22, 0x40	; 64
    1e16:	ce 01       	movw	r24, r28
    1e18:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>
    
    // We use internal charge pump
    sendCommand(SSD1306_CHARGEPUMP);
    1e1c:	6d e8       	ldi	r22, 0x8D	; 141
    1e1e:	ce 01       	movw	r24, r28
    1e20:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>
    sendCommand(0x14);
    1e24:	64 e1       	ldi	r22, 0x14	; 20
    1e26:	ce 01       	movw	r24, r28
    1e28:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>
    
    // Horizontal memory mode
    sendCommand(SSD1306_MEMORYMODE);
    1e2c:	60 e2       	ldi	r22, 0x20	; 32
    1e2e:	ce 01       	movw	r24, r28
    1e30:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>
    sendCommand(0x00);
    1e34:	60 e0       	ldi	r22, 0x00	; 0
    1e36:	ce 01       	movw	r24, r28
    1e38:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>
    
    sendCommand(SSD1306_SEGREMAP | 0x1);
    1e3c:	61 ea       	ldi	r22, 0xA1	; 161
    1e3e:	ce 01       	movw	r24, r28
    1e40:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_COMSCANDEC);
    1e44:	68 ec       	ldi	r22, 0xC8	; 200
    1e46:	ce 01       	movw	r24, r28
    1e48:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_SETCOMPINS);
    1e4c:	6a ed       	ldi	r22, 0xDA	; 218
    1e4e:	ce 01       	movw	r24, r28
    1e50:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>
    sendCommand(0x12);
    1e54:	62 e1       	ldi	r22, 0x12	; 18
    1e56:	ce 01       	movw	r24, r28
    1e58:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>

    // Max contrast
    sendCommand(SSD1306_SETCONTRAST);
    1e5c:	61 e8       	ldi	r22, 0x81	; 129
    1e5e:	ce 01       	movw	r24, r28
    1e60:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>
    sendCommand(0xCF);
    1e64:	6f ec       	ldi	r22, 0xCF	; 207
    1e66:	ce 01       	movw	r24, r28
    1e68:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_SETPRECHARGE);
    1e6c:	69 ed       	ldi	r22, 0xD9	; 217
    1e6e:	ce 01       	movw	r24, r28
    1e70:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>
    sendCommand(0xF1);
    1e74:	61 ef       	ldi	r22, 0xF1	; 241
    1e76:	ce 01       	movw	r24, r28
    1e78:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_SETVCOMDETECT);
    1e7c:	6b ed       	ldi	r22, 0xDB	; 219
    1e7e:	ce 01       	movw	r24, r28
    1e80:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>
    sendCommand(0x40);
    1e84:	60 e4       	ldi	r22, 0x40	; 64
    1e86:	ce 01       	movw	r24, r28
    1e88:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_DISPLAYALLON_RESUME);
    1e8c:	64 ea       	ldi	r22, 0xA4	; 164
    1e8e:	ce 01       	movw	r24, r28
    1e90:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>

    // Non-inverted display
    sendCommand(SSD1306_NORMALDISPLAY);
    1e94:	66 ea       	ldi	r22, 0xA6	; 166
    1e96:	ce 01       	movw	r24, r28
    1e98:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>

    // Turn display back on
    sendCommand(SSD1306_DISPLAYON);
    1e9c:	6f ea       	ldi	r22, 0xAF	; 175
    1e9e:	ce 01       	movw	r24, r28
    1ea0:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>
}
    1ea4:	df 91       	pop	r29
    1ea6:	cf 91       	pop	r28
    1ea8:	08 95       	ret

00001eaa <_ZN7SSD130615sendFramebufferEPh>:
    } else {
        sendCommand(SSD1306_NORMALDISPLAY);
    }
}

void SSD1306::sendFramebuffer(uint8_t *buffer) {
    1eaa:	cf 92       	push	r12
    1eac:	df 92       	push	r13
    1eae:	ef 92       	push	r14
    1eb0:	ff 92       	push	r15
    1eb2:	0f 93       	push	r16
    1eb4:	1f 93       	push	r17
    1eb6:	cf 93       	push	r28
    1eb8:	df 93       	push	r29
    1eba:	08 2f       	mov	r16, r24
    1ebc:	19 2f       	mov	r17, r25
    1ebe:	7b 01       	movw	r14, r22
    sendCommand(SSD1306_COLUMNADDR);
    1ec0:	61 e2       	ldi	r22, 0x21	; 33
    1ec2:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>
    sendCommand(0x00);
    1ec6:	60 e0       	ldi	r22, 0x00	; 0
    1ec8:	80 2f       	mov	r24, r16
    1eca:	91 2f       	mov	r25, r17
    1ecc:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>
    sendCommand(0x7F);
    1ed0:	6f e7       	ldi	r22, 0x7F	; 127
    1ed2:	80 2f       	mov	r24, r16
    1ed4:	91 2f       	mov	r25, r17
    1ed6:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_PAGEADDR);
    1eda:	62 e2       	ldi	r22, 0x22	; 34
    1edc:	80 2f       	mov	r24, r16
    1ede:	91 2f       	mov	r25, r17
    1ee0:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>
    sendCommand(0x00);
    1ee4:	60 e0       	ldi	r22, 0x00	; 0
    1ee6:	80 2f       	mov	r24, r16
    1ee8:	91 2f       	mov	r25, r17
    1eea:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>
    sendCommand(0x07);
    1eee:	67 e0       	ldi	r22, 0x07	; 7
    1ef0:	80 2f       	mov	r24, r16
    1ef2:	91 2f       	mov	r25, r17
    1ef4:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_ZN7SSD130611sendCommandEh>
    1ef8:	e7 01       	movw	r28, r14
    1efa:	8c ef       	ldi	r24, 0xFC	; 252
    1efc:	f8 1a       	sub	r15, r24

    // We have to send the buffer as 16 bytes packets
    // Our buffer is 1024 bytes long, 1024/16 = 64
    // We have to send 64 packets
    for (uint8_t packet = 0; packet < 64; packet++) {
        i2c.start();
    1efe:	80 2f       	mov	r24, r16
    1f00:	91 2f       	mov	r25, r17
    1f02:	0e 94 af 05 	call	0xb5e	; 0xb5e <_ZN3I2C5startEv>
        i2c.write(0x40);
    1f06:	60 e4       	ldi	r22, 0x40	; 64
    1f08:	80 2f       	mov	r24, r16
    1f0a:	91 2f       	mov	r25, r17
    1f0c:	0e 94 dd 05 	call	0xbba	; 0xbba <_ZN3I2C5writeEh>
    1f10:	6e 01       	movw	r12, r28
    1f12:	80 e1       	ldi	r24, 0x10	; 16
    1f14:	c8 0e       	add	r12, r24
    1f16:	d1 1c       	adc	r13, r1
        for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
            i2c.write(buffer[packet*16+packet_byte]);
    1f18:	69 91       	ld	r22, Y+
    1f1a:	80 2f       	mov	r24, r16
    1f1c:	91 2f       	mov	r25, r17
    1f1e:	0e 94 dd 05 	call	0xbba	; 0xbba <_ZN3I2C5writeEh>
    // Our buffer is 1024 bytes long, 1024/16 = 64
    // We have to send 64 packets
    for (uint8_t packet = 0; packet < 64; packet++) {
        i2c.start();
        i2c.write(0x40);
        for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
    1f22:	cc 15       	cp	r28, r12
    1f24:	dd 05       	cpc	r29, r13
    1f26:	c1 f7       	brne	.-16     	; 0x1f18 <_ZN7SSD130615sendFramebufferEPh+0x6e>
            i2c.write(buffer[packet*16+packet_byte]);
        }
        i2c.stop();
    1f28:	80 2f       	mov	r24, r16
    1f2a:	91 2f       	mov	r25, r17
    1f2c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN3I2C4stopEv>
    1f30:	e6 01       	movw	r28, r12
    sendCommand(0x07);

    // We have to send the buffer as 16 bytes packets
    // Our buffer is 1024 bytes long, 1024/16 = 64
    // We have to send 64 packets
    for (uint8_t packet = 0; packet < 64; packet++) {
    1f32:	ce 14       	cp	r12, r14
    1f34:	df 04       	cpc	r13, r15
    1f36:	19 f7       	brne	.-58     	; 0x1efe <_ZN7SSD130615sendFramebufferEPh+0x54>
        for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
            i2c.write(buffer[packet*16+packet_byte]);
        }
        i2c.stop();
    }
    1f38:	df 91       	pop	r29
    1f3a:	cf 91       	pop	r28
    1f3c:	1f 91       	pop	r17
    1f3e:	0f 91       	pop	r16
    1f40:	ff 90       	pop	r15
    1f42:	ef 90       	pop	r14
    1f44:	df 90       	pop	r13
    1f46:	cf 90       	pop	r12
    1f48:	08 95       	ret

00001f4a <__udivmodhi4>:
    1f4a:	aa 1b       	sub	r26, r26
    1f4c:	bb 1b       	sub	r27, r27
    1f4e:	51 e1       	ldi	r21, 0x11	; 17
    1f50:	07 c0       	rjmp	.+14     	; 0x1f60 <__udivmodhi4_ep>

00001f52 <__udivmodhi4_loop>:
    1f52:	aa 1f       	adc	r26, r26
    1f54:	bb 1f       	adc	r27, r27
    1f56:	a6 17       	cp	r26, r22
    1f58:	b7 07       	cpc	r27, r23
    1f5a:	10 f0       	brcs	.+4      	; 0x1f60 <__udivmodhi4_ep>
    1f5c:	a6 1b       	sub	r26, r22
    1f5e:	b7 0b       	sbc	r27, r23

00001f60 <__udivmodhi4_ep>:
    1f60:	88 1f       	adc	r24, r24
    1f62:	99 1f       	adc	r25, r25
    1f64:	5a 95       	dec	r21
    1f66:	a9 f7       	brne	.-22     	; 0x1f52 <__udivmodhi4_loop>
    1f68:	80 95       	com	r24
    1f6a:	90 95       	com	r25
    1f6c:	bc 01       	movw	r22, r24
    1f6e:	cd 01       	movw	r24, r26
    1f70:	08 95       	ret

00001f72 <__tablejump2__>:
    1f72:	ee 0f       	add	r30, r30
    1f74:	ff 1f       	adc	r31, r31
    1f76:	05 90       	lpm	r0, Z+
    1f78:	f4 91       	lpm	r31, Z
    1f7a:	e0 2d       	mov	r30, r0
    1f7c:	09 94       	ijmp

00001f7e <__umulhisi3>:
    1f7e:	a2 9f       	mul	r26, r18
    1f80:	b0 01       	movw	r22, r0
    1f82:	b3 9f       	mul	r27, r19
    1f84:	c0 01       	movw	r24, r0
    1f86:	a3 9f       	mul	r26, r19
    1f88:	70 0d       	add	r23, r0
    1f8a:	81 1d       	adc	r24, r1
    1f8c:	11 24       	eor	r1, r1
    1f8e:	91 1d       	adc	r25, r1
    1f90:	b2 9f       	mul	r27, r18
    1f92:	70 0d       	add	r23, r0
    1f94:	81 1d       	adc	r24, r1
    1f96:	11 24       	eor	r1, r1
    1f98:	91 1d       	adc	r25, r1
    1f9a:	08 95       	ret

00001f9c <do_rand>:
    1f9c:	8f 92       	push	r8
    1f9e:	9f 92       	push	r9
    1fa0:	af 92       	push	r10
    1fa2:	bf 92       	push	r11
    1fa4:	cf 92       	push	r12
    1fa6:	df 92       	push	r13
    1fa8:	ef 92       	push	r14
    1faa:	ff 92       	push	r15
    1fac:	cf 93       	push	r28
    1fae:	df 93       	push	r29
    1fb0:	ec 01       	movw	r28, r24
    1fb2:	68 81       	ld	r22, Y
    1fb4:	79 81       	ldd	r23, Y+1	; 0x01
    1fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1fba:	61 15       	cp	r22, r1
    1fbc:	71 05       	cpc	r23, r1
    1fbe:	81 05       	cpc	r24, r1
    1fc0:	91 05       	cpc	r25, r1
    1fc2:	21 f4       	brne	.+8      	; 0x1fcc <do_rand+0x30>
    1fc4:	64 e2       	ldi	r22, 0x24	; 36
    1fc6:	79 ed       	ldi	r23, 0xD9	; 217
    1fc8:	8b e5       	ldi	r24, 0x5B	; 91
    1fca:	97 e0       	ldi	r25, 0x07	; 7
    1fcc:	2d e1       	ldi	r18, 0x1D	; 29
    1fce:	33 ef       	ldi	r19, 0xF3	; 243
    1fd0:	41 e0       	ldi	r20, 0x01	; 1
    1fd2:	50 e0       	ldi	r21, 0x00	; 0
    1fd4:	0e 94 2a 10 	call	0x2054	; 0x2054 <__divmodsi4>
    1fd8:	49 01       	movw	r8, r18
    1fda:	5a 01       	movw	r10, r20
    1fdc:	9b 01       	movw	r18, r22
    1fde:	ac 01       	movw	r20, r24
    1fe0:	a7 ea       	ldi	r26, 0xA7	; 167
    1fe2:	b1 e4       	ldi	r27, 0x41	; 65
    1fe4:	0e 94 49 10 	call	0x2092	; 0x2092 <__muluhisi3>
    1fe8:	6b 01       	movw	r12, r22
    1fea:	7c 01       	movw	r14, r24
    1fec:	ac ee       	ldi	r26, 0xEC	; 236
    1fee:	b4 ef       	ldi	r27, 0xF4	; 244
    1ff0:	a5 01       	movw	r20, r10
    1ff2:	94 01       	movw	r18, r8
    1ff4:	0e 94 57 10 	call	0x20ae	; 0x20ae <__mulohisi3>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	8c 0d       	add	r24, r12
    1ffe:	9d 1d       	adc	r25, r13
    2000:	ae 1d       	adc	r26, r14
    2002:	bf 1d       	adc	r27, r15
    2004:	b7 ff       	sbrs	r27, 7
    2006:	03 c0       	rjmp	.+6      	; 0x200e <do_rand+0x72>
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	a1 09       	sbc	r26, r1
    200c:	b0 48       	sbci	r27, 0x80	; 128
    200e:	88 83       	st	Y, r24
    2010:	99 83       	std	Y+1, r25	; 0x01
    2012:	aa 83       	std	Y+2, r26	; 0x02
    2014:	bb 83       	std	Y+3, r27	; 0x03
    2016:	9f 77       	andi	r25, 0x7F	; 127
    2018:	df 91       	pop	r29
    201a:	cf 91       	pop	r28
    201c:	ff 90       	pop	r15
    201e:	ef 90       	pop	r14
    2020:	df 90       	pop	r13
    2022:	cf 90       	pop	r12
    2024:	bf 90       	pop	r11
    2026:	af 90       	pop	r10
    2028:	9f 90       	pop	r9
    202a:	8f 90       	pop	r8
    202c:	08 95       	ret

0000202e <rand_r>:
    202e:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <do_rand>
    2032:	08 95       	ret

00002034 <rand>:
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	91 e0       	ldi	r25, 0x01	; 1
    2038:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <do_rand>
    203c:	08 95       	ret

0000203e <srand>:
    203e:	a0 e0       	ldi	r26, 0x00	; 0
    2040:	b0 e0       	ldi	r27, 0x00	; 0
    2042:	80 93 00 01 	sts	0x0100, r24
    2046:	90 93 01 01 	sts	0x0101, r25
    204a:	a0 93 02 01 	sts	0x0102, r26
    204e:	b0 93 03 01 	sts	0x0103, r27
    2052:	08 95       	ret

00002054 <__divmodsi4>:
    2054:	05 2e       	mov	r0, r21
    2056:	97 fb       	bst	r25, 7
    2058:	1e f4       	brtc	.+6      	; 0x2060 <__divmodsi4+0xc>
    205a:	00 94       	com	r0
    205c:	0e 94 41 10 	call	0x2082	; 0x2082 <__negsi2>
    2060:	57 fd       	sbrc	r21, 7
    2062:	07 d0       	rcall	.+14     	; 0x2072 <__divmodsi4_neg2>
    2064:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <__udivmodsi4>
    2068:	07 fc       	sbrc	r0, 7
    206a:	03 d0       	rcall	.+6      	; 0x2072 <__divmodsi4_neg2>
    206c:	4e f4       	brtc	.+18     	; 0x2080 <__divmodsi4_exit>
    206e:	0c 94 41 10 	jmp	0x2082	; 0x2082 <__negsi2>

00002072 <__divmodsi4_neg2>:
    2072:	50 95       	com	r21
    2074:	40 95       	com	r20
    2076:	30 95       	com	r19
    2078:	21 95       	neg	r18
    207a:	3f 4f       	sbci	r19, 0xFF	; 255
    207c:	4f 4f       	sbci	r20, 0xFF	; 255
    207e:	5f 4f       	sbci	r21, 0xFF	; 255

00002080 <__divmodsi4_exit>:
    2080:	08 95       	ret

00002082 <__negsi2>:
    2082:	90 95       	com	r25
    2084:	80 95       	com	r24
    2086:	70 95       	com	r23
    2088:	61 95       	neg	r22
    208a:	7f 4f       	sbci	r23, 0xFF	; 255
    208c:	8f 4f       	sbci	r24, 0xFF	; 255
    208e:	9f 4f       	sbci	r25, 0xFF	; 255
    2090:	08 95       	ret

00002092 <__muluhisi3>:
    2092:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <__umulhisi3>
    2096:	a5 9f       	mul	r26, r21
    2098:	90 0d       	add	r25, r0
    209a:	b4 9f       	mul	r27, r20
    209c:	90 0d       	add	r25, r0
    209e:	a4 9f       	mul	r26, r20
    20a0:	80 0d       	add	r24, r0
    20a2:	91 1d       	adc	r25, r1
    20a4:	11 24       	eor	r1, r1
    20a6:	08 95       	ret

000020a8 <__mulshisi3>:
    20a8:	b7 ff       	sbrs	r27, 7
    20aa:	0c 94 49 10 	jmp	0x2092	; 0x2092 <__muluhisi3>

000020ae <__mulohisi3>:
    20ae:	0e 94 49 10 	call	0x2092	; 0x2092 <__muluhisi3>
    20b2:	82 1b       	sub	r24, r18
    20b4:	93 0b       	sbc	r25, r19
    20b6:	08 95       	ret

000020b8 <__udivmodsi4>:
    20b8:	a1 e2       	ldi	r26, 0x21	; 33
    20ba:	1a 2e       	mov	r1, r26
    20bc:	aa 1b       	sub	r26, r26
    20be:	bb 1b       	sub	r27, r27
    20c0:	fd 01       	movw	r30, r26
    20c2:	0d c0       	rjmp	.+26     	; 0x20de <__udivmodsi4_ep>

000020c4 <__udivmodsi4_loop>:
    20c4:	aa 1f       	adc	r26, r26
    20c6:	bb 1f       	adc	r27, r27
    20c8:	ee 1f       	adc	r30, r30
    20ca:	ff 1f       	adc	r31, r31
    20cc:	a2 17       	cp	r26, r18
    20ce:	b3 07       	cpc	r27, r19
    20d0:	e4 07       	cpc	r30, r20
    20d2:	f5 07       	cpc	r31, r21
    20d4:	20 f0       	brcs	.+8      	; 0x20de <__udivmodsi4_ep>
    20d6:	a2 1b       	sub	r26, r18
    20d8:	b3 0b       	sbc	r27, r19
    20da:	e4 0b       	sbc	r30, r20
    20dc:	f5 0b       	sbc	r31, r21

000020de <__udivmodsi4_ep>:
    20de:	66 1f       	adc	r22, r22
    20e0:	77 1f       	adc	r23, r23
    20e2:	88 1f       	adc	r24, r24
    20e4:	99 1f       	adc	r25, r25
    20e6:	1a 94       	dec	r1
    20e8:	69 f7       	brne	.-38     	; 0x20c4 <__udivmodsi4_loop>
    20ea:	60 95       	com	r22
    20ec:	70 95       	com	r23
    20ee:	80 95       	com	r24
    20f0:	90 95       	com	r25
    20f2:	9b 01       	movw	r18, r22
    20f4:	ac 01       	movw	r20, r24
    20f6:	bd 01       	movw	r22, r26
    20f8:	cf 01       	movw	r24, r30
    20fa:	08 95       	ret

000020fc <_exit>:
    20fc:	f8 94       	cli

000020fe <__stop_program>:
    20fe:	ff cf       	rjmp	.-2      	; 0x20fe <__stop_program>
