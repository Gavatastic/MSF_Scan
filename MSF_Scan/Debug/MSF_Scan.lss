
MSF_Scan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  00001baa  00001c3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001baa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000407  008001aa  008001aa  00001ce8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ce8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001d18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000285c  00000000  00000000  00001ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a54  00000000  00000000  000046fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008cf  00000000  00000000  00005150  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000042c  00000000  00000000  00005a20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a0c  00000000  00000000  00005e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000021c1  00000000  00000000  00006858  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00008a19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 25 04 	jmp	0x84a	; 0x84a <__ctors_end>
       4:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
       8:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
       c:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      10:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      14:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      18:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      1c:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      20:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      24:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      28:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      2c:	0c 94 a9 07 	jmp	0xf52	; 0xf52 <__vector_11>
      30:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      34:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      38:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      3c:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      40:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      44:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      48:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      4c:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      50:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      54:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      58:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      5c:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      60:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      64:	0c 94 4d 04 	jmp	0x89a	; 0x89a <__bad_interrupt>
      68:	97 06       	cpc	r9, r23
      6a:	51 06       	cpc	r5, r17
      6c:	53 06       	cpc	r5, r19
      6e:	55 06       	cpc	r5, r21
      70:	57 06       	cpc	r5, r23
      72:	59 06       	cpc	r5, r25
      74:	5b 06       	cpc	r5, r27
      76:	5d 06       	cpc	r5, r29
      78:	5f 06       	cpc	r5, r31
      7a:	61 06       	cpc	r6, r17
      7c:	63 06       	cpc	r6, r19
      7e:	65 06       	cpc	r6, r21
      80:	67 06       	cpc	r6, r23
      82:	69 06       	cpc	r6, r25
      84:	6b 06       	cpc	r6, r27
      86:	6d 06       	cpc	r6, r29
      88:	95 06       	cpc	r9, r21
      8a:	95 06       	cpc	r9, r21
      8c:	95 06       	cpc	r9, r21
      8e:	95 06       	cpc	r9, r21
      90:	95 06       	cpc	r9, r21
      92:	95 06       	cpc	r9, r21
      94:	95 06       	cpc	r9, r21
      96:	95 06       	cpc	r9, r21
      98:	95 06       	cpc	r9, r21
      9a:	6f 06       	cpc	r6, r31
      9c:	71 06       	cpc	r7, r17
      9e:	73 06       	cpc	r7, r19
      a0:	75 06       	cpc	r7, r21
      a2:	77 06       	cpc	r7, r23
      a4:	79 06       	cpc	r7, r25
      a6:	7b 06       	cpc	r7, r27
      a8:	7d 06       	cpc	r7, r29
      aa:	95 06       	cpc	r9, r21
      ac:	95 06       	cpc	r9, r21
      ae:	95 06       	cpc	r9, r21
      b0:	95 06       	cpc	r9, r21
      b2:	95 06       	cpc	r9, r21
      b4:	95 06       	cpc	r9, r21
      b6:	95 06       	cpc	r9, r21
      b8:	95 06       	cpc	r9, r21
      ba:	95 06       	cpc	r9, r21
      bc:	95 06       	cpc	r9, r21
      be:	95 06       	cpc	r9, r21
      c0:	95 06       	cpc	r9, r21
      c2:	95 06       	cpc	r9, r21
      c4:	95 06       	cpc	r9, r21
      c6:	95 06       	cpc	r9, r21
      c8:	95 06       	cpc	r9, r21
      ca:	95 06       	cpc	r9, r21
      cc:	95 06       	cpc	r9, r21
      ce:	95 06       	cpc	r9, r21
      d0:	95 06       	cpc	r9, r21
      d2:	95 06       	cpc	r9, r21
      d4:	95 06       	cpc	r9, r21
      d6:	95 06       	cpc	r9, r21
      d8:	95 06       	cpc	r9, r21
      da:	95 06       	cpc	r9, r21
      dc:	7f 06       	cpc	r7, r31
      de:	81 06       	cpc	r8, r17
      e0:	83 06       	cpc	r8, r19
      e2:	85 06       	cpc	r8, r21
      e4:	87 06       	cpc	r8, r23
      e6:	89 06       	cpc	r8, r25
      e8:	8b 06       	cpc	r8, r27
      ea:	95 06       	cpc	r9, r21
      ec:	95 06       	cpc	r9, r21
      ee:	95 06       	cpc	r9, r21
      f0:	95 06       	cpc	r9, r21
      f2:	95 06       	cpc	r9, r21
      f4:	95 06       	cpc	r9, r21
      f6:	95 06       	cpc	r9, r21
      f8:	95 06       	cpc	r9, r21
      fa:	95 06       	cpc	r9, r21
      fc:	95 06       	cpc	r9, r21
      fe:	95 06       	cpc	r9, r21
     100:	95 06       	cpc	r9, r21
     102:	95 06       	cpc	r9, r21
     104:	95 06       	cpc	r9, r21
     106:	95 06       	cpc	r9, r21
     108:	95 06       	cpc	r9, r21
     10a:	95 06       	cpc	r9, r21
     10c:	95 06       	cpc	r9, r21
     10e:	95 06       	cpc	r9, r21
     110:	95 06       	cpc	r9, r21
     112:	95 06       	cpc	r9, r21
     114:	95 06       	cpc	r9, r21
     116:	95 06       	cpc	r9, r21
     118:	95 06       	cpc	r9, r21
     11a:	95 06       	cpc	r9, r21
     11c:	8d 06       	cpc	r8, r29
     11e:	8f 06       	cpc	r8, r31
     120:	91 06       	cpc	r9, r17
     122:	93 06       	cpc	r9, r19

00000124 <IM8_Descriptors>:
     124:	01 00 00 05 0b 00 07 16 00 05 21 00 07 2c 00 07     ..........!..,..
     134:	37 00 01 42 00 04 4d 00 04 58 00 05 63 00 05 6e     7..B..M..X..c..n
     144:	00 03 79 00 05 84 00 03 8f 00 05 9a 00 05 a5 00     ..y.............
     154:	06 b0 00 05 bb 00 05 c6 00 06 d1 00 05 dc 00 05     ................
     164:	e7 00 05 f2 00 05 fd 00 05 08 01 03 13 01 03 1e     ................
     174:	01 05 29 01 05 34 01 05 3f 01 06 4a 01 05 55 01     ..)..4..?..J..U.
     184:	07 60 01 05 6b 01 05 76 01 05 81 01 05 8c 01 05     .`..k..v........
     194:	97 01 05 a2 01 05 ad 01 05 b8 01 05 c3 01 06 ce     ................
     1a4:	01 05 d9 01 05 e4 01 05 ef 01 05 fa 01 05 05 02     ................
     1b4:	06 10 02 06 1b 02 05 26 02 07 31 02 05 3c 02 07     .......&..1..<..
     1c4:	47 02 07 52 02 07 5d 02 07 68 02 05 73 02 04 7e     G..R..]..h..s..~
     1d4:	02 05 89 02 04 94 02 07 9f 02 05 aa 02 03 b5 02     ................
     1e4:	06 c0 02 05 cb 02 05 d6 02 05 e1 02 05 ec 02 05     ................
     1f4:	f7 02 07 02 03 05 0d 03 05 18 03 04 23 03 05 2e     ............#...
     204:	03 05 39 03 05 44 03 05 4f 03 05 5a 03 05 65 03     ..9..D..O..Z..e.
     214:	05 70 03 05 7b 03 05 86 03 05 91 03 05 9c 03 05     .p..{...........
     224:	a7 03 07 b2 03 05 bd 03 05 c8 03 05 d3 03 06 de     ................
     234:	03 01 e9 03 06 f4 03 05 ff 03                       ..........

0000023e <IM8_Bitmaps>:
     23e:	00 80 80 80 80 80 00 80 80 00 00 00 d8 d8 d8 d8     ................
     24e:	00 00 00 00 00 00 00 28 28 fe 28 28 fe 28 28 00     .......((.((.((.
     25e:	00 20 78 b0 a0 70 28 a8 f0 20 20 00 00 60 a4 a6     . x..p(..  ..`..
     26e:	68 3c 72 92 0c 00 00 00 30 48 48 30 64 98 c8 76     h<r.....0HH0d..v
     27e:	00 00 00 80 80 80 80 00 00 00 00 00 00 00 30 40     ..............0@
     28e:	c0 80 80 80 80 c0 40 30 00 c0 20 30 10 10 10 10     ......@0.. 0....
     29e:	30 20 c0 00 20 a8 70 70 a8 20 00 00 00 00 00 00     0 .. .pp. ......
     2ae:	20 20 20 f8 20 20 20 00 00 00 00 00 00 00 00 00        .   .........
     2be:	60 40 c0 80 00 00 00 00 00 f8 00 00 00 00 00 00     `@..............
     2ce:	00 00 00 00 00 00 e0 e0 00 00 00 08 10 10 10 20     ............... 
     2de:	20 40 40 40 80 00 70 88 88 a8 a8 88 88 70 00 00      @@@..p......p..
     2ee:	00 30 f0 30 30 30 30 30 fc 00 00 00 70 88 88 08     .0.00000....p...
     2fe:	70 80 80 f8 00 00 00 70 88 08 70 08 08 88 f0 00     p......p..p.....
     30e:	00 00 18 38 78 58 98 fc 18 18 00 00 00 f8 80 80     ...8xX..........
     31e:	f8 08 08 88 f0 00 00 00 70 88 80 f0 88 88 88 70     ........p......p
     32e:	00 00 00 f8 08 10 10 20 20 20 60 00 00 00 f8 88     .......   `.....
     33e:	88 70 88 88 88 f8 00 00 00 70 88 88 88 78 08 88     .p.......p...x..
     34e:	70 00 00 00 00 00 e0 e0 00 00 e0 e0 00 00 00 00     p...............
     35e:	00 e0 e0 00 00 60 40 c0 80 00 00 08 30 40 80 40     .....`@.....0@.@
     36e:	30 08 00 00 00 00 00 00 f8 00 00 f8 00 00 00 00     0...............
     37e:	00 80 60 10 08 10 60 80 00 00 00 7c 44 44 84 38     ..`...`....|DD.8
     38e:	00 30 30 00 00 00 70 88 b8 a8 a8 a8 b8 80 78 00     .00...p.......x.
     39e:	00 10 30 28 28 28 7c 44 c6 00 00 00 f0 88 88 f0     ..0(((|D........
     3ae:	88 88 88 f8 00 00 00 70 88 88 80 80 88 88 78 00     .......p......x.
     3be:	00 00 f0 88 88 88 88 88 88 f0 00 00 00 f8 80 80     ................
     3ce:	f8 80 80 80 f8 00 00 00 f8 80 80 f8 80 80 80 80     ................
     3de:	00 00 00 70 88 88 80 b8 88 88 70 00 00 00 88 88     ...p......p.....
     3ee:	88 f8 88 88 88 88 00 00 00 f8 20 20 20 20 20 20     ..........      
     3fe:	f8 00 00 00 38 08 08 08 08 88 88 f0 00 00 00 8c     ....8...........
     40e:	90 a0 c0 a0 b0 90 8c 00 00 00 c0 c0 c0 c0 c0 c0     ................
     41e:	c0 f8 00 00 00 88 c8 d8 d8 e8 a8 88 88 00 00 00     ................
     42e:	c8 c8 c8 a8 a8 98 98 98 00 00 00 70 88 88 88 88     ...........p....
     43e:	88 88 70 00 00 00 f8 88 88 88 f8 80 80 80 00 00     ..p.............
     44e:	00 70 88 88 88 88 88 88 70 30 1c 00 f8 88 8c 88     .p......p0......
     45e:	f8 90 98 8c 00 00 00 70 88 80 70 08 08 88 70 00     .......p..p...p.
     46e:	00 00 fe 10 10 10 10 10 10 10 00 00 00 88 88 88     ................
     47e:	88 88 88 88 70 00 00 00 c6 44 44 28 28 28 28 10     ....p....DD((((.
     48e:	00 00 00 82 82 54 74 6c 6c 6c 44 00 00 00 c6 64     .....TtlllD....d
     49e:	28 10 18 28 44 c6 00 00 00 c6 44 28 28 10 10 10     (..(D.....D((...
     4ae:	10 00 00 00 f8 08 10 20 20 40 80 f8 00 00 00 f0     .......  @......
     4be:	80 80 80 80 80 80 80 80 f0 00 80 40 40 40 20 20     ...........@@@  
     4ce:	10 10 10 08 00 f0 10 10 10 10 10 10 10 10 f0 00     ................
     4de:	10 28 28 44 44 c6 00 00 00 00 00 00 00 00 00 00     .((DD...........
     4ee:	00 00 00 00 f8 00 c0 40 40 20 00 00 00 00 00 00     .......@@ ......
     4fe:	00 00 00 70 90 18 f8 98 ec 00 00 00 80 80 b0 c8     ...p............
     50e:	88 88 88 f0 00 00 00 00 00 70 88 80 80 88 70 00     .........p....p.
     51e:	00 00 08 08 78 88 88 88 88 78 00 00 00 00 00 70     ....x....x.....p
     52e:	88 f8 80 88 70 00 00 00 38 20 f8 60 60 60 60 60     ....p...8 .`````
     53e:	00 00 00 00 00 3c 48 4c 78 40 7c 46 fc 00 80 80     .....<HLx@|F....
     54e:	b0 c8 88 88 88 88 00 00 00 30 00 e0 20 20 20 20     .........0..    
     55e:	f8 00 00 00 30 00 f0 10 10 10 10 10 10 e0 00 c0     ....0...........
     56e:	c0 d8 f0 e0 e0 d0 c8 00 00 00 e0 20 20 20 20 20     ...........     
     57e:	20 f8 00 00 00 00 00 f8 a8 a8 a8 a8 a8 00 00 00      ...............
     58e:	00 00 b0 c8 88 88 88 88 00 00 00 00 00 70 88 88     .............p..
     59e:	88 88 70 00 00 00 00 00 b0 c8 88 88 88 f0 80 80     ..p.............
     5ae:	00 00 00 78 88 88 88 88 78 08 08 00 00 00 f8 c8     ...x....x.......
     5be:	c0 c0 c0 c0 00 00 00 00 00 f8 80 f0 08 88 70 00     ..............p.
     5ce:	00 00 40 40 f8 40 40 40 60 38 00 00 00 00 00 88     ..@@.@@@`8......
     5de:	88 88 88 98 68 00 00 00 00 00 88 88 50 50 50 20     ....h.......PPP 
     5ee:	00 00 00 00 00 82 54 74 6c 6c 6c 00 00 00 00 00     ......Ttlll.....
     5fe:	88 50 20 20 50 88 00 00 00 00 00 88 88 50 50 50     .P  P........PPP
     60e:	20 20 c0 00 00 00 f8 10 30 60 40 f8 00 00 00 3c       ......0`@....<
     61e:	20 60 30 10 e0 10 20 20 7c 00 80 80 80 80 80 80      `0...  |.......
     62e:	80 80 80 80 00 f0 10 18 30 20 1c 20 10 10 f8 00     ........0 . ....
     63e:	00 00 c8 a8 a8 98 00 00 00 00                       ..........

00000648 <_ZL6Atomic>:
     648:	00 00 00 07 c0 00 00 00 00 00 00 0f f0 00 00 00     ................
     658:	00 00 00 3c 38 00 00 00 00 00 00 70 1c 00 00 00     ...<8......p....
     668:	00 00 00 60 0e 00 00 00 00 00 00 e0 07 00 00 00     ...`............
     678:	00 00 01 c0 03 00 00 00 00 00 01 80 03 80 00 00     ................
     688:	00 00 03 80 01 80 00 00 00 00 03 00 01 c0 00 00     ................
     698:	00 00 03 00 00 c0 00 00 00 00 06 00 00 c0 00 00     ................
     6a8:	00 3f c6 00 00 67 fc 00 01 ff fe 00 00 ff ff 80     .?...g..........
     6b8:	07 c0 3f c0 03 fc 03 c0 07 00 0f f8 1f f0 00 e0     ..?.............
     6c8:	0c 00 0c 3e fc 30 00 70 0c 00 0c 0f e0 30 00 30     ...>.0.p.....0.0
     6d8:	18 00 1c 0f f0 30 00 38 18 00 18 3e 78 30 00 38     .....0.8...>x0.8
     6e8:	18 00 18 78 1e 18 00 38 1c 00 19 e0 07 98 00 30     ...x...8.......0
     6f8:	0c 00 1f 80 01 f8 00 30 0c 00 1f 00 00 f8 00 70     .......0.......p
     708:	06 00 3c 00 00 38 00 60 06 00 78 00 00 1e 00 e0     ..<..8.`..x.....
     718:	03 00 f0 00 00 1f 00 c0 03 81 f0 00 00 1f 81 c0     ................
     728:	01 c7 b0 03 80 19 c3 80 00 ce 30 07 e0 1c f7 00     ..........0.....
     738:	00 fc 30 0f e0 1c 3e 00 00 78 30 0f f0 1c 1c 00     ..0...>..x0.....
     748:	00 78 30 0f f0 1c 1c 00 00 fc 30 0f e0 1c 3e 00     .x0.......0...>.
     758:	00 ce 30 07 e0 1c f7 00 01 c7 b0 03 c0 19 c3 80     ..0.............
     768:	03 81 f0 00 00 1f 81 c0 03 00 f0 00 00 1f 00 c0     ................
     778:	06 00 78 00 00 1e 00 e0 06 00 3c 00 00 38 00 60     ..x.......<..8.`
     788:	0c 00 1f 00 00 f8 00 30 0c 00 1f 80 01 f8 00 30     .......0.......0
     798:	1c 00 19 e0 07 98 00 30 18 00 18 f8 1e 18 00 38     .......0.......8
     7a8:	18 00 18 3e 7c 30 00 18 18 00 1c 0f f0 30 00 38     ...>|0.......0.8
     7b8:	1c 00 0c 07 e0 30 00 30 0c 00 0c 3f fc 30 00 30     .....0.0...?.0.0
     7c8:	0e 00 0f f8 1f f0 00 60 07 c0 3f c0 07 f8 03 e0     .......`..?.....
     7d8:	01 ff fe 00 00 ff ff 80 00 7f e6 00 00 67 fe 00     .............g..
     7e8:	00 00 06 00 00 c0 00 00 00 00 03 00 00 c0 00 00     ................
     7f8:	00 00 03 00 01 c0 00 00 00 00 03 80 01 80 00 00     ................
     808:	00 00 01 80 03 80 00 00 00 00 01 c0 03 00 00 00     ................
     818:	00 00 00 e0 07 00 00 00 00 00 00 60 0e 00 00 00     ...........`....
     828:	00 00 00 30 1c 00 00 00 00 00 00 3c 38 00 00 00     ...0.......<8...
     838:	00 00 00 0f f0 00 00 00 00 00 00 07 c0 00 00 00     ................

00000848 <__ctors_start>:
     848:	1f 0c       	add	r1, r15

0000084a <__ctors_end>:
     84a:	11 24       	eor	r1, r1
     84c:	1f be       	out	0x3f, r1	; 63
     84e:	cf ef       	ldi	r28, 0xFF	; 255
     850:	d8 e0       	ldi	r29, 0x08	; 8
     852:	de bf       	out	0x3e, r29	; 62
     854:	cd bf       	out	0x3d, r28	; 61

00000856 <__do_copy_data>:
     856:	11 e0       	ldi	r17, 0x01	; 1
     858:	a0 e0       	ldi	r26, 0x00	; 0
     85a:	b1 e0       	ldi	r27, 0x01	; 1
     85c:	ea ea       	ldi	r30, 0xAA	; 170
     85e:	fb e1       	ldi	r31, 0x1B	; 27
     860:	02 c0       	rjmp	.+4      	; 0x866 <__do_copy_data+0x10>
     862:	05 90       	lpm	r0, Z+
     864:	0d 92       	st	X+, r0
     866:	aa 3a       	cpi	r26, 0xAA	; 170
     868:	b1 07       	cpc	r27, r17
     86a:	d9 f7       	brne	.-10     	; 0x862 <__do_copy_data+0xc>

0000086c <__do_clear_bss>:
     86c:	25 e0       	ldi	r18, 0x05	; 5
     86e:	aa ea       	ldi	r26, 0xAA	; 170
     870:	b1 e0       	ldi	r27, 0x01	; 1
     872:	01 c0       	rjmp	.+2      	; 0x876 <.do_clear_bss_start>

00000874 <.do_clear_bss_loop>:
     874:	1d 92       	st	X+, r1

00000876 <.do_clear_bss_start>:
     876:	a1 3b       	cpi	r26, 0xB1	; 177
     878:	b2 07       	cpc	r27, r18
     87a:	e1 f7       	brne	.-8      	; 0x874 <.do_clear_bss_loop>

0000087c <__do_global_ctors>:
     87c:	14 e0       	ldi	r17, 0x04	; 4
     87e:	c5 e2       	ldi	r28, 0x25	; 37
     880:	d4 e0       	ldi	r29, 0x04	; 4
     882:	04 c0       	rjmp	.+8      	; 0x88c <__do_global_ctors+0x10>
     884:	21 97       	sbiw	r28, 0x01	; 1
     886:	fe 01       	movw	r30, r28
     888:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__tablejump2__>
     88c:	c4 32       	cpi	r28, 0x24	; 36
     88e:	d1 07       	cpc	r29, r17
     890:	c9 f7       	brne	.-14     	; 0x884 <__do_global_ctors+0x8>
     892:	0e 94 2c 08 	call	0x1058	; 0x1058 <main>
     896:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <_exit>

0000089a <__bad_interrupt>:
     89a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000089e <_ZN11Framebuffer9drawPixelEhhh>:
    }
}
#endif

void Framebuffer::drawPixel(uint8_t pos_x, uint8_t pos_y, uint8_t pixel_status) {
    if (pos_x >= SSD1306_WIDTH || pos_y >= SSD1306_HEIGHT) {
     89e:	66 23       	and	r22, r22
     8a0:	ac f1       	brlt	.+106    	; 0x90c <__stack+0xd>
     8a2:	40 34       	cpi	r20, 0x40	; 64
     8a4:	98 f5       	brcc	.+102    	; 0x90c <__stack+0xd>
        return;
    }

    if (pixel_status) {
     8a6:	22 23       	and	r18, r18
     8a8:	c9 f0       	breq	.+50     	; 0x8dc <_ZN11Framebuffer9drawPixelEhhh+0x3e>
        this->buffer[pos_x+(pos_y/8)*SSD1306_WIDTH] |= (1 << (pos_y&7));
     8aa:	24 2f       	mov	r18, r20
     8ac:	26 95       	lsr	r18
     8ae:	26 95       	lsr	r18
     8b0:	26 95       	lsr	r18
     8b2:	50 e8       	ldi	r21, 0x80	; 128
     8b4:	25 9f       	mul	r18, r21
     8b6:	90 01       	movw	r18, r0
     8b8:	11 24       	eor	r1, r1
     8ba:	26 0f       	add	r18, r22
     8bc:	31 1d       	adc	r19, r1
     8be:	fc 01       	movw	r30, r24
     8c0:	e2 0f       	add	r30, r18
     8c2:	f3 1f       	adc	r31, r19
     8c4:	47 70       	andi	r20, 0x07	; 7
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <_ZN11Framebuffer9drawPixelEhhh+0x32>
     8cc:	88 0f       	add	r24, r24
     8ce:	99 1f       	adc	r25, r25
     8d0:	4a 95       	dec	r20
     8d2:	e2 f7       	brpl	.-8      	; 0x8cc <_ZN11Framebuffer9drawPixelEhhh+0x2e>
     8d4:	90 81       	ld	r25, Z
     8d6:	89 2b       	or	r24, r25
     8d8:	80 83       	st	Z, r24
     8da:	08 95       	ret
    } else {
        this->buffer[pos_x+(pos_y/8)*SSD1306_WIDTH] &= ~(1 << (pos_y&7));
     8dc:	24 2f       	mov	r18, r20
     8de:	26 95       	lsr	r18
     8e0:	26 95       	lsr	r18
     8e2:	26 95       	lsr	r18
     8e4:	30 e8       	ldi	r19, 0x80	; 128
     8e6:	23 9f       	mul	r18, r19
     8e8:	f0 01       	movw	r30, r0
     8ea:	11 24       	eor	r1, r1
     8ec:	e6 0f       	add	r30, r22
     8ee:	f1 1d       	adc	r31, r1
     8f0:	e8 0f       	add	r30, r24
     8f2:	f9 1f       	adc	r31, r25
     8f4:	47 70       	andi	r20, 0x07	; 7
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	02 c0       	rjmp	.+4      	; 0x900 <__stack+0x1>
     8fc:	88 0f       	add	r24, r24
     8fe:	99 1f       	adc	r25, r25
     900:	4a 95       	dec	r20
     902:	e2 f7       	brpl	.-8      	; 0x8fc <_ZN11Framebuffer9drawPixelEhhh+0x5e>
     904:	80 95       	com	r24
     906:	90 81       	ld	r25, Z
     908:	89 23       	and	r24, r25
     90a:	80 83       	st	Z, r24
     90c:	08 95       	ret

0000090e <_ZN11Framebuffer10drawBitmapEPKhhhhh>:
Framebuffer::Framebuffer() {
    this->clear();
}

#ifndef SIMULATOR
void Framebuffer::drawBitmap(const uint8_t *progmem_bitmap, uint8_t height, uint8_t width, uint8_t pos_x, uint8_t pos_y) {
     90e:	2f 92       	push	r2
     910:	3f 92       	push	r3
     912:	4f 92       	push	r4
     914:	5f 92       	push	r5
     916:	6f 92       	push	r6
     918:	7f 92       	push	r7
     91a:	8f 92       	push	r8
     91c:	9f 92       	push	r9
     91e:	af 92       	push	r10
     920:	bf 92       	push	r11
     922:	cf 92       	push	r12
     924:	df 92       	push	r13
     926:	ef 92       	push	r14
     928:	ff 92       	push	r15
     92a:	0f 93       	push	r16
     92c:	1f 93       	push	r17
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	00 d0       	rcall	.+0      	; 0x934 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0x26>
     934:	1f 92       	push	r1
     936:	cd b7       	in	r28, 0x3d	; 61
     938:	de b7       	in	r29, 0x3e	; 62
    uint8_t current_byte;
    uint8_t byte_width = (width + 7)/8;
     93a:	e2 2f       	mov	r30, r18
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	37 96       	adiw	r30, 0x07	; 7
     940:	3f 01       	movw	r6, r30
     942:	1a f4       	brpl	.+6      	; 0x94a <_ZN11Framebuffer10drawBitmapEPKhhhhh+0x3c>
     944:	37 e0       	ldi	r19, 0x07	; 7
     946:	63 0e       	add	r6, r19
     948:	71 1c       	adc	r7, r1
     94a:	75 94       	asr	r7
     94c:	67 94       	ror	r6
     94e:	75 94       	asr	r7
     950:	67 94       	ror	r6
     952:	75 94       	asr	r7
     954:	67 94       	ror	r6

    for (uint8_t current_y = 0; current_y < height; current_y++) {
     956:	44 23       	and	r20, r20
     958:	09 f4       	brne	.+2      	; 0x95c <_ZN11Framebuffer10drawBitmapEPKhhhhh+0x4e>
     95a:	4b c0       	rjmp	.+150    	; 0x9f2 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0xe4>
     95c:	42 2e       	mov	r4, r18
     95e:	5b 01       	movw	r10, r22
     960:	6c 01       	movw	r12, r24
     962:	24 2e       	mov	r2, r20
     964:	2e 0c       	add	r2, r14
     966:	81 2c       	mov	r8, r1
     968:	91 2c       	mov	r9, r1
        for (uint8_t current_x = 0; current_x < width; current_x++) {
            current_byte = pgm_read_byte(progmem_bitmap + current_y*byte_width + current_x/8);
     96a:	77 24       	eor	r7, r7
     96c:	09 83       	std	Y+1, r16	; 0x01
     96e:	31 2c       	mov	r3, r1
            if (current_byte & (128 >> (current_x&7))) {
     970:	00 e8       	ldi	r16, 0x80	; 128
     972:	10 e0       	ldi	r17, 0x00	; 0
     974:	30 c0       	rjmp	.+96     	; 0x9d6 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0xc8>
    uint8_t current_byte;
    uint8_t byte_width = (width + 7)/8;

    for (uint8_t current_y = 0; current_y < height; current_y++) {
        for (uint8_t current_x = 0; current_x < width; current_x++) {
            current_byte = pgm_read_byte(progmem_bitmap + current_y*byte_width + current_x/8);
     976:	8f 2d       	mov	r24, r15
     978:	86 95       	lsr	r24
     97a:	86 95       	lsr	r24
     97c:	86 95       	lsr	r24
     97e:	ea 81       	ldd	r30, Y+2	; 0x02
     980:	fb 81       	ldd	r31, Y+3	; 0x03
     982:	e8 0f       	add	r30, r24
     984:	f1 1d       	adc	r31, r1
     986:	ea 0d       	add	r30, r10
     988:	fb 1d       	adc	r31, r11
     98a:	84 91       	lpm	r24, Z
            if (current_byte & (128 >> (current_x&7))) {
     98c:	9f 2d       	mov	r25, r15
     98e:	97 70       	andi	r25, 0x07	; 7
     990:	98 01       	movw	r18, r16
     992:	02 c0       	rjmp	.+4      	; 0x998 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0x8a>
     994:	35 95       	asr	r19
     996:	27 95       	ror	r18
     998:	9a 95       	dec	r25
     99a:	e2 f7       	brpl	.-8      	; 0x994 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0x86>
     99c:	e8 2f       	mov	r30, r24
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	e2 23       	and	r30, r18
     9a2:	f3 23       	and	r31, r19
     9a4:	ef 2b       	or	r30, r31
     9a6:	39 f0       	breq	.+14     	; 0x9b6 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0xa8>
                this->drawPixel(current_x+pos_x,current_y+pos_y,1);
     9a8:	21 e0       	ldi	r18, 0x01	; 1
     9aa:	4e 2d       	mov	r20, r14
     9ac:	65 2d       	mov	r22, r5
     9ae:	c6 01       	movw	r24, r12
     9b0:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN11Framebuffer9drawPixelEhhh>
     9b4:	06 c0       	rjmp	.+12     	; 0x9c2 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0xb4>
            } else {
                this->drawPixel(current_x+pos_x,current_y+pos_y,0);
     9b6:	23 2d       	mov	r18, r3
     9b8:	4e 2d       	mov	r20, r14
     9ba:	65 2d       	mov	r22, r5
     9bc:	c6 01       	movw	r24, r12
     9be:	0e 94 4f 04 	call	0x89e	; 0x89e <_ZN11Framebuffer9drawPixelEhhh>
void Framebuffer::drawBitmap(const uint8_t *progmem_bitmap, uint8_t height, uint8_t width, uint8_t pos_x, uint8_t pos_y) {
    uint8_t current_byte;
    uint8_t byte_width = (width + 7)/8;

    for (uint8_t current_y = 0; current_y < height; current_y++) {
        for (uint8_t current_x = 0; current_x < width; current_x++) {
     9c2:	f3 94       	inc	r15
     9c4:	53 94       	inc	r5
     9c6:	f4 10       	cpse	r15, r4
     9c8:	d6 cf       	rjmp	.-84     	; 0x976 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0x68>
     9ca:	8f ef       	ldi	r24, 0xFF	; 255
     9cc:	88 1a       	sub	r8, r24
     9ce:	98 0a       	sbc	r9, r24
     9d0:	e3 94       	inc	r14
#ifndef SIMULATOR
void Framebuffer::drawBitmap(const uint8_t *progmem_bitmap, uint8_t height, uint8_t width, uint8_t pos_x, uint8_t pos_y) {
    uint8_t current_byte;
    uint8_t byte_width = (width + 7)/8;

    for (uint8_t current_y = 0; current_y < height; current_y++) {
     9d2:	e2 14       	cp	r14, r2
     9d4:	71 f0       	breq	.+28     	; 0x9f2 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0xe4>
        for (uint8_t current_x = 0; current_x < width; current_x++) {
     9d6:	44 20       	and	r4, r4
     9d8:	c1 f3       	breq	.-16     	; 0x9ca <_ZN11Framebuffer10drawBitmapEPKhhhhh+0xbc>
            current_byte = pgm_read_byte(progmem_bitmap + current_y*byte_width + current_x/8);
     9da:	86 9c       	mul	r8, r6
     9dc:	f0 01       	movw	r30, r0
     9de:	87 9c       	mul	r8, r7
     9e0:	f0 0d       	add	r31, r0
     9e2:	96 9c       	mul	r9, r6
     9e4:	f0 0d       	add	r31, r0
     9e6:	11 24       	eor	r1, r1
     9e8:	fb 83       	std	Y+3, r31	; 0x03
     9ea:	ea 83       	std	Y+2, r30	; 0x02
     9ec:	59 80       	ldd	r5, Y+1	; 0x01
     9ee:	f3 2c       	mov	r15, r3
     9f0:	c2 cf       	rjmp	.-124    	; 0x976 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0x68>
            } else {
                this->drawPixel(current_x+pos_x,current_y+pos_y,0);
            }
        }
    }
}
     9f2:	0f 90       	pop	r0
     9f4:	0f 90       	pop	r0
     9f6:	0f 90       	pop	r0
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	ff 90       	pop	r15
     a02:	ef 90       	pop	r14
     a04:	df 90       	pop	r13
     a06:	cf 90       	pop	r12
     a08:	bf 90       	pop	r11
     a0a:	af 90       	pop	r10
     a0c:	9f 90       	pop	r9
     a0e:	8f 90       	pop	r8
     a10:	7f 90       	pop	r7
     a12:	6f 90       	pop	r6
     a14:	5f 90       	pop	r5
     a16:	4f 90       	pop	r4
     a18:	3f 90       	pop	r3
     a1a:	2f 90       	pop	r2
     a1c:	08 95       	ret

00000a1e <_ZN11Framebuffer9drawPixelEhh>:
        this->buffer[pos_x+(pos_y/8)*SSD1306_WIDTH] &= ~(1 << (pos_y&7));
    }
}

void Framebuffer::drawPixel(uint8_t pos_x, uint8_t pos_y) {
    if (pos_x >= SSD1306_WIDTH || pos_y >= SSD1306_HEIGHT) {
     a1e:	66 23       	and	r22, r22
     a20:	cc f0       	brlt	.+50     	; 0xa54 <_ZN11Framebuffer9drawPixelEhh+0x36>
     a22:	40 34       	cpi	r20, 0x40	; 64
     a24:	b8 f4       	brcc	.+46     	; 0xa54 <_ZN11Framebuffer9drawPixelEhh+0x36>
        return;
    }

    this->buffer[pos_x+(pos_y/8)*SSD1306_WIDTH] |= (1 << (pos_y&7));
     a26:	24 2f       	mov	r18, r20
     a28:	26 95       	lsr	r18
     a2a:	26 95       	lsr	r18
     a2c:	26 95       	lsr	r18
     a2e:	30 e8       	ldi	r19, 0x80	; 128
     a30:	23 9f       	mul	r18, r19
     a32:	f0 01       	movw	r30, r0
     a34:	11 24       	eor	r1, r1
     a36:	e6 0f       	add	r30, r22
     a38:	f1 1d       	adc	r31, r1
     a3a:	e8 0f       	add	r30, r24
     a3c:	f9 1f       	adc	r31, r25
     a3e:	47 70       	andi	r20, 0x07	; 7
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	02 c0       	rjmp	.+4      	; 0xa4a <_ZN11Framebuffer9drawPixelEhh+0x2c>
     a46:	88 0f       	add	r24, r24
     a48:	99 1f       	adc	r25, r25
     a4a:	4a 95       	dec	r20
     a4c:	e2 f7       	brpl	.-8      	; 0xa46 <_ZN11Framebuffer9drawPixelEhh+0x28>
     a4e:	90 81       	ld	r25, Z
     a50:	89 2b       	or	r24, r25
     a52:	80 83       	st	Z, r24
     a54:	08 95       	ret

00000a56 <_ZN11Framebuffer9drawVLineEhhh>:
}

void Framebuffer::drawVLine(uint8_t x, uint8_t y, uint8_t length) {
     a56:	ff 92       	push	r15
     a58:	0f 93       	push	r16
     a5a:	1f 93       	push	r17
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
    for (uint8_t i = 0; i < length; ++i) {
     a60:	22 23       	and	r18, r18
     a62:	69 f0       	breq	.+26     	; 0xa7e <_ZN11Framebuffer9drawVLineEhhh+0x28>
     a64:	c4 2f       	mov	r28, r20
     a66:	f6 2e       	mov	r15, r22
     a68:	8c 01       	movw	r16, r24
     a6a:	d2 2f       	mov	r29, r18
     a6c:	d4 0f       	add	r29, r20
        this->drawPixel(x,i+y);
     a6e:	4c 2f       	mov	r20, r28
     a70:	6f 2d       	mov	r22, r15
     a72:	c8 01       	movw	r24, r16
     a74:	0e 94 0f 05 	call	0xa1e	; 0xa1e <_ZN11Framebuffer9drawPixelEhh>
     a78:	cf 5f       	subi	r28, 0xFF	; 255

    this->buffer[pos_x+(pos_y/8)*SSD1306_WIDTH] |= (1 << (pos_y&7));
}

void Framebuffer::drawVLine(uint8_t x, uint8_t y, uint8_t length) {
    for (uint8_t i = 0; i < length; ++i) {
     a7a:	cd 13       	cpse	r28, r29
     a7c:	f8 cf       	rjmp	.-16     	; 0xa6e <_ZN11Framebuffer9drawVLineEhhh+0x18>
        this->drawPixel(x,i+y);
    }
}
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	1f 91       	pop	r17
     a84:	0f 91       	pop	r16
     a86:	ff 90       	pop	r15
     a88:	08 95       	ret

00000a8a <_ZN11Framebuffer9drawHLineEhhh>:

void Framebuffer::drawHLine(uint8_t x, uint8_t y, uint8_t length) {
     a8a:	ff 92       	push	r15
     a8c:	0f 93       	push	r16
     a8e:	1f 93       	push	r17
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
    for (uint8_t i = 0; i < length; ++i) {
     a94:	22 23       	and	r18, r18
     a96:	69 f0       	breq	.+26     	; 0xab2 <_ZN11Framebuffer9drawHLineEhhh+0x28>
     a98:	f4 2e       	mov	r15, r20
     a9a:	c6 2f       	mov	r28, r22
     a9c:	8c 01       	movw	r16, r24
     a9e:	d2 2f       	mov	r29, r18
     aa0:	d6 0f       	add	r29, r22
        this->drawPixel(i+x,y);
     aa2:	4f 2d       	mov	r20, r15
     aa4:	6c 2f       	mov	r22, r28
     aa6:	c8 01       	movw	r24, r16
     aa8:	0e 94 0f 05 	call	0xa1e	; 0xa1e <_ZN11Framebuffer9drawPixelEhh>
     aac:	cf 5f       	subi	r28, 0xFF	; 255
        this->drawPixel(x,i+y);
    }
}

void Framebuffer::drawHLine(uint8_t x, uint8_t y, uint8_t length) {
    for (uint8_t i = 0; i < length; ++i) {
     aae:	cd 13       	cpse	r28, r29
     ab0:	f8 cf       	rjmp	.-16     	; 0xaa2 <_ZN11Framebuffer9drawHLineEhhh+0x18>
        this->drawPixel(i+x,y);
    }
}
     ab2:	df 91       	pop	r29
     ab4:	cf 91       	pop	r28
     ab6:	1f 91       	pop	r17
     ab8:	0f 91       	pop	r16
     aba:	ff 90       	pop	r15
     abc:	08 95       	ret

00000abe <_ZN11Framebuffer13drawRectangleEhhhh>:

void Framebuffer::drawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
     abe:	cf 92       	push	r12
     ac0:	df 92       	push	r13
     ac2:	ef 92       	push	r14
     ac4:	ff 92       	push	r15
     ac6:	0f 93       	push	r16
     ac8:	1f 93       	push	r17
     aca:	cf 93       	push	r28
     acc:	df 93       	push	r29
     ace:	ec 01       	movw	r28, r24
     ad0:	f6 2e       	mov	r15, r22
     ad2:	14 2f       	mov	r17, r20
     ad4:	d2 2e       	mov	r13, r18
    uint8_t length = x2 - x1 + 1;
     ad6:	e2 2e       	mov	r14, r18
     ad8:	e6 1a       	sub	r14, r22
     ada:	e3 94       	inc	r14
    uint8_t height = y2 - y1;
     adc:	c0 2e       	mov	r12, r16
     ade:	c4 1a       	sub	r12, r20

    this->drawHLine(x1,y1,length);
     ae0:	2e 2d       	mov	r18, r14
     ae2:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN11Framebuffer9drawHLineEhhh>
    this->drawHLine(x1,y2,length);
     ae6:	2e 2d       	mov	r18, r14
     ae8:	40 2f       	mov	r20, r16
     aea:	6f 2d       	mov	r22, r15
     aec:	ce 01       	movw	r24, r28
     aee:	0e 94 45 05 	call	0xa8a	; 0xa8a <_ZN11Framebuffer9drawHLineEhhh>
    this->drawVLine(x1,y1,height);
     af2:	2c 2d       	mov	r18, r12
     af4:	41 2f       	mov	r20, r17
     af6:	6f 2d       	mov	r22, r15
     af8:	ce 01       	movw	r24, r28
     afa:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN11Framebuffer9drawVLineEhhh>
    this->drawVLine(x2,y1,height);
     afe:	2c 2d       	mov	r18, r12
     b00:	41 2f       	mov	r20, r17
     b02:	6d 2d       	mov	r22, r13
     b04:	ce 01       	movw	r24, r28
     b06:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN11Framebuffer9drawVLineEhhh>
}
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	1f 91       	pop	r17
     b10:	0f 91       	pop	r16
     b12:	ff 90       	pop	r15
     b14:	ef 90       	pop	r14
     b16:	df 90       	pop	r13
     b18:	cf 90       	pop	r12
     b1a:	08 95       	ret

00000b1c <_ZN11Framebuffer13drawRectangleEhhhhh>:

void Framebuffer::drawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint8_t fill) {
     b1c:	5f 92       	push	r5
     b1e:	6f 92       	push	r6
     b20:	7f 92       	push	r7
     b22:	8f 92       	push	r8
     b24:	9f 92       	push	r9
     b26:	af 92       	push	r10
     b28:	bf 92       	push	r11
     b2a:	cf 92       	push	r12
     b2c:	df 92       	push	r13
     b2e:	ef 92       	push	r14
     b30:	ff 92       	push	r15
     b32:	0f 93       	push	r16
     b34:	1f 93       	push	r17
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	6c 01       	movw	r12, r24
     b3c:	76 2e       	mov	r7, r22
     b3e:	84 2e       	mov	r8, r20
    if (!fill) {
     b40:	e1 10       	cpse	r14, r1
     b42:	03 c0       	rjmp	.+6      	; 0xb4a <_ZN11Framebuffer13drawRectangleEhhhhh+0x2e>
        this->drawRectangle(x1,y1,x2,y2);
     b44:	0e 94 5f 05 	call	0xabe	; 0xabe <_ZN11Framebuffer13drawRectangleEhhhh>
     b48:	24 c0       	rjmp	.+72     	; 0xb92 <_ZN11Framebuffer13drawRectangleEhhhhh+0x76>
    } else {
        uint8_t length = x2 - x1 + 1;
        uint8_t height = y2 - y1;
     b4a:	04 1b       	sub	r16, r20
     b4c:	2f 5f       	subi	r18, 0xFF	; 255

void Framebuffer::drawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint8_t fill) {
    if (!fill) {
        this->drawRectangle(x1,y1,x2,y2);
    } else {
        uint8_t length = x2 - x1 + 1;
     b4e:	26 1b       	sub	r18, r22
        uint8_t height = y2 - y1;

        for (int x = 0; x < length; ++x) {
     b50:	a2 2e       	mov	r10, r18
     b52:	b1 2c       	mov	r11, r1
     b54:	1a 14       	cp	r1, r10
     b56:	1b 04       	cpc	r1, r11
     b58:	94 f0       	brlt	.+36     	; 0xb7e <_ZN11Framebuffer13drawRectangleEhhhhh+0x62>
     b5a:	1b c0       	rjmp	.+54     	; 0xb92 <_ZN11Framebuffer13drawRectangleEhhhhh+0x76>
     b5c:	4c 2f       	mov	r20, r28
     b5e:	48 0d       	add	r20, r8
            for (int y = 0; y <= height; ++y) {
                this->drawPixel(x1+x,y+y1);
     b60:	69 2d       	mov	r22, r9
     b62:	c6 01       	movw	r24, r12
     b64:	0e 94 0f 05 	call	0xa1e	; 0xa1e <_ZN11Framebuffer9drawPixelEhh>
    } else {
        uint8_t length = x2 - x1 + 1;
        uint8_t height = y2 - y1;

        for (int x = 0; x < length; ++x) {
            for (int y = 0; y <= height; ++y) {
     b68:	21 96       	adiw	r28, 0x01	; 1
     b6a:	0c 17       	cp	r16, r28
     b6c:	1d 07       	cpc	r17, r29
     b6e:	b4 f7       	brge	.-20     	; 0xb5c <_ZN11Framebuffer13drawRectangleEhhhhh+0x40>
        this->drawRectangle(x1,y1,x2,y2);
    } else {
        uint8_t length = x2 - x1 + 1;
        uint8_t height = y2 - y1;

        for (int x = 0; x < length; ++x) {
     b70:	8f ef       	ldi	r24, 0xFF	; 255
     b72:	e8 1a       	sub	r14, r24
     b74:	f8 0a       	sbc	r15, r24
     b76:	ea 14       	cp	r14, r10
     b78:	fb 04       	cpc	r15, r11
     b7a:	31 f4       	brne	.+12     	; 0xb88 <_ZN11Framebuffer13drawRectangleEhhhhh+0x6c>
     b7c:	0a c0       	rjmp	.+20     	; 0xb92 <_ZN11Framebuffer13drawRectangleEhhhhh+0x76>
     b7e:	e1 2c       	mov	r14, r1
     b80:	f1 2c       	mov	r15, r1
            for (int y = 0; y <= height; ++y) {
     b82:	10 e0       	ldi	r17, 0x00	; 0
     b84:	51 2c       	mov	r5, r1
     b86:	61 2c       	mov	r6, r1
     b88:	c5 2d       	mov	r28, r5
     b8a:	d6 2d       	mov	r29, r6
     b8c:	97 2c       	mov	r9, r7
     b8e:	9e 0c       	add	r9, r14
     b90:	e5 cf       	rjmp	.-54     	; 0xb5c <_ZN11Framebuffer13drawRectangleEhhhhh+0x40>
                this->drawPixel(x1+x,y+y1);
            }
        }
    }
}
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	1f 91       	pop	r17
     b98:	0f 91       	pop	r16
     b9a:	ff 90       	pop	r15
     b9c:	ef 90       	pop	r14
     b9e:	df 90       	pop	r13
     ba0:	cf 90       	pop	r12
     ba2:	bf 90       	pop	r11
     ba4:	af 90       	pop	r10
     ba6:	9f 90       	pop	r9
     ba8:	8f 90       	pop	r8
     baa:	7f 90       	pop	r7
     bac:	6f 90       	pop	r6
     bae:	5f 90       	pop	r5
     bb0:	08 95       	ret

00000bb2 <_ZN11Framebuffer5clearEv>:

void Framebuffer::clear() {
     bb2:	fc 01       	movw	r30, r24
     bb4:	9c 5f       	subi	r25, 0xFC	; 252
    for (uint16_t buffer_location = 0; buffer_location < SSD1306_BUFFERSIZE; buffer_location++) {
        this->buffer[buffer_location] = 0x00;
     bb6:	11 92       	st	Z+, r1
        }
    }
}

void Framebuffer::clear() {
    for (uint16_t buffer_location = 0; buffer_location < SSD1306_BUFFERSIZE; buffer_location++) {
     bb8:	e8 17       	cp	r30, r24
     bba:	f9 07       	cpc	r31, r25
     bbc:	e1 f7       	brne	.-8      	; 0xbb6 <_ZN11Framebuffer5clearEv+0x4>
        this->buffer[buffer_location] = 0x00;
    }
}
     bbe:	08 95       	ret

00000bc0 <_ZN11FramebufferC1Ev>:
For more information, please refer to <http://unlicense.org/>
*/

#include "Framebuffer.h"

Framebuffer::Framebuffer() {
     bc0:	cf 93       	push	r28
     bc2:	df 93       	push	r29
     bc4:	ec 01       	movw	r28, r24
     bc6:	9c 5f       	subi	r25, 0xFC	; 252
     bc8:	0e 94 3a 0c 	call	0x1874	; 0x1874 <_ZN7SSD1306C1Ev>
    this->clear();
     bcc:	ce 01       	movw	r24, r28
     bce:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <_ZN11Framebuffer5clearEv>
}
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	08 95       	ret

00000bd8 <_ZN11Framebuffer4showEv>:
void Framebuffer::invert(uint8_t status) {
    this->oled.invert(status);
}

void Framebuffer::show() {
    this->oled.sendFramebuffer(this->buffer);
     bd8:	bc 01       	movw	r22, r24
     bda:	9c 5f       	subi	r25, 0xFC	; 252
     bdc:	0e 94 aa 0c 	call	0x1954	; 0x1954 <_ZN7SSD130615sendFramebufferEPh>
     be0:	08 95       	ret

00000be2 <_ZN3I2CC1Ev>:
*/

#include "I2C.h"
#define F_CPU 8000000UL

I2C::I2C() {}
     be2:	08 95       	ret

00000be4 <_ZN3I2C4initEh>:

void I2C::init(uint8_t address) {
    this->address = address;
     be4:	fc 01       	movw	r30, r24
     be6:	60 83       	st	Z, r22
    TWSR = 0;
     be8:	10 92 b9 00 	sts	0x00B9, r1
    TWBR = ((F_CPU/SCL_CLOCK)-16)/2;
     bec:	80 e2       	ldi	r24, 0x20	; 32
     bee:	80 93 b8 00 	sts	0x00B8, r24
     bf2:	08 95       	ret

00000bf4 <_ZN3I2C5startEv>:
}

uint8_t I2C::start() {
     bf4:	dc 01       	movw	r26, r24
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     bf6:	84 ea       	ldi	r24, 0xA4	; 164
     bf8:	80 93 bc 00 	sts	0x00BC, r24
    while(!(TWCR & (1<<TWINT)));
     bfc:	ec eb       	ldi	r30, 0xBC	; 188
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	90 81       	ld	r25, Z
     c02:	99 23       	and	r25, r25
     c04:	ec f7       	brge	.-6      	; 0xc00 <_ZN3I2C5startEv+0xc>

    twi_status_register = TW_STATUS & 0xF8;
     c06:	90 91 b9 00 	lds	r25, 0x00B9
     c0a:	98 7f       	andi	r25, 0xF8	; 248
     c0c:	11 96       	adiw	r26, 0x01	; 1
     c0e:	9c 93       	st	X, r25
     c10:	11 97       	sbiw	r26, 0x01	; 1
    if ((this->twi_status_register != TW_START) && (this->twi_status_register != TW_REP_START)) {
     c12:	98 30       	cpi	r25, 0x08	; 8
     c14:	11 f0       	breq	.+4      	; 0xc1a <_ZN3I2C5startEv+0x26>
     c16:	90 31       	cpi	r25, 0x10	; 16
     c18:	b9 f4       	brne	.+46     	; 0xc48 <_ZN3I2C5startEv+0x54>
        return 1;
    }

    TWDR = address;
     c1a:	8c 91       	ld	r24, X
     c1c:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = (1<<TWINT) | (1<<TWEN);
     c20:	84 e8       	ldi	r24, 0x84	; 132
     c22:	80 93 bc 00 	sts	0x00BC, r24

    while(!(TWCR & (1<<TWINT)));
     c26:	ec eb       	ldi	r30, 0xBC	; 188
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	90 81       	ld	r25, Z
     c2c:	99 23       	and	r25, r25
     c2e:	ec f7       	brge	.-6      	; 0xc2a <_ZN3I2C5startEv+0x36>

    this->twi_status_register = TW_STATUS & 0xF8;
     c30:	90 91 b9 00 	lds	r25, 0x00B9
     c34:	98 7f       	andi	r25, 0xF8	; 248
     c36:	11 96       	adiw	r26, 0x01	; 1
     c38:	9c 93       	st	X, r25
    if ((this->twi_status_register != TW_MT_SLA_ACK) && (this->twi_status_register != TW_MR_SLA_ACK)) {
     c3a:	98 31       	cpi	r25, 0x18	; 24
     c3c:	39 f0       	breq	.+14     	; 0xc4c <_ZN3I2C5startEv+0x58>
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	90 34       	cpi	r25, 0x40	; 64
     c42:	29 f4       	brne	.+10     	; 0xc4e <_ZN3I2C5startEv+0x5a>
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	08 95       	ret
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    while(!(TWCR & (1<<TWINT)));

    twi_status_register = TW_STATUS & 0xF8;
    if ((this->twi_status_register != TW_START) && (this->twi_status_register != TW_REP_START)) {
        return 1;
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	08 95       	ret
    this->twi_status_register = TW_STATUS & 0xF8;
    if ((this->twi_status_register != TW_MT_SLA_ACK) && (this->twi_status_register != TW_MR_SLA_ACK)) {
        return 1;
    }

    return 0;
     c4c:	80 e0       	ldi	r24, 0x00	; 0
}
     c4e:	08 95       	ret

00000c50 <_ZN3I2C5writeEh>:

uint8_t I2C::write(uint8_t data) {
     c50:	dc 01       	movw	r26, r24
    TWDR = data;
     c52:	60 93 bb 00 	sts	0x00BB, r22
    TWCR = (1<<TWINT) | (1<<TWEN);
     c56:	84 e8       	ldi	r24, 0x84	; 132
     c58:	80 93 bc 00 	sts	0x00BC, r24

    while(!(TWCR & (1<<TWINT)));
     c5c:	ec eb       	ldi	r30, 0xBC	; 188
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	90 81       	ld	r25, Z
     c62:	99 23       	and	r25, r25
     c64:	ec f7       	brge	.-6      	; 0xc60 <_ZN3I2C5writeEh+0x10>

    this->twi_status_register = TW_STATUS & 0xF8;
     c66:	90 91 b9 00 	lds	r25, 0x00B9
     c6a:	98 7f       	andi	r25, 0xF8	; 248
     c6c:	11 96       	adiw	r26, 0x01	; 1
     c6e:	9c 93       	st	X, r25
    if (this->twi_status_register != TW_MT_DATA_ACK) {
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	98 32       	cpi	r25, 0x28	; 40
     c74:	09 f4       	brne	.+2      	; 0xc78 <_ZN3I2C5writeEh+0x28>
     c76:	80 e0       	ldi	r24, 0x00	; 0
        return 1;
    } else {
        return 0;
    }
}
     c78:	08 95       	ret

00000c7a <_ZN3I2C4stopEv>:

void I2C::stop(void) {
    TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     c7a:	84 e9       	ldi	r24, 0x94	; 148
     c7c:	80 93 bc 00 	sts	0x00BC, r24
    while(TWCR & (1<<TWSTO));
     c80:	ec eb       	ldi	r30, 0xBC	; 188
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	84 fd       	sbrc	r24, 4
     c88:	fd cf       	rjmp	.-6      	; 0xc84 <_ZN3I2C4stopEv+0xa>
     c8a:	08 95       	ret

00000c8c <_Z9Punctuatec>:
	0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x00, 0x00
};

uint8_t Punctuate(char mark)
{
	switch (mark)
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	fc 01       	movw	r30, r24
     c90:	b1 97       	sbiw	r30, 0x21	; 33
     c92:	ee 35       	cpi	r30, 0x5E	; 94
     c94:	f1 05       	cpc	r31, r1
     c96:	08 f0       	brcs	.+2      	; 0xc9a <_Z9Punctuatec+0xe>
     c98:	48 c0       	rjmp	.+144    	; 0xd2a <_Z9Punctuatec+0x9e>
     c9a:	ec 5c       	subi	r30, 0xCC	; 204
     c9c:	ff 4f       	sbci	r31, 0xFF	; 255
     c9e:	0c 94 0e 0d 	jmp	0x1a1c	; 0x1a1c <__tablejump2__>
	{
		case '!': return EXCLAMATION; break;
		case '"' : return DQUOTE; break;
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	08 95       	ret
		case '#' : return HASH; break;
     ca6:	82 e0       	ldi	r24, 0x02	; 2
     ca8:	08 95       	ret
		case '$' : return DOLLAR; break;
     caa:	83 e0       	ldi	r24, 0x03	; 3
     cac:	08 95       	ret
		case '%' : return PERCENT; break;
     cae:	84 e0       	ldi	r24, 0x04	; 4
     cb0:	08 95       	ret
		case '&' : return AMPERSAND; break;
     cb2:	85 e0       	ldi	r24, 0x05	; 5
     cb4:	08 95       	ret
		case '\'' : return SQUOTE; break;
     cb6:	86 e0       	ldi	r24, 0x06	; 6
     cb8:	08 95       	ret
		case '(' : return OBRACKET; break;
     cba:	87 e0       	ldi	r24, 0x07	; 7
     cbc:	08 95       	ret
		case ')' : return CBRACKET; break;
     cbe:	88 e0       	ldi	r24, 0x08	; 8
     cc0:	08 95       	ret
		case '*' : return ASTERISK; break;
     cc2:	89 e0       	ldi	r24, 0x09	; 9
     cc4:	08 95       	ret
		case '+' : return PLUS; break;
     cc6:	8a e0       	ldi	r24, 0x0A	; 10
     cc8:	08 95       	ret
		case ',' : return COMMA; break;
     cca:	8b e0       	ldi	r24, 0x0B	; 11
     ccc:	08 95       	ret
		case '-' : return DASH; break;
     cce:	8c e0       	ldi	r24, 0x0C	; 12
     cd0:	08 95       	ret
		case '.' : return DOT; break;
     cd2:	8d e0       	ldi	r24, 0x0D	; 13
     cd4:	08 95       	ret
		case '/' : return FSLASH; break;
     cd6:	8e e0       	ldi	r24, 0x0E	; 14
     cd8:	08 95       	ret
		case '0' : return ZERO; break;
     cda:	8f e0       	ldi	r24, 0x0F	; 15
     cdc:	08 95       	ret
		case ':' : return COLON; break;
     cde:	89 e1       	ldi	r24, 0x19	; 25
     ce0:	08 95       	ret
		case ';' : return SCOLON; break;
     ce2:	8a e1       	ldi	r24, 0x1A	; 26
     ce4:	08 95       	ret
		case '<' : return LTHAN; break;
     ce6:	8b e1       	ldi	r24, 0x1B	; 27
     ce8:	08 95       	ret
		case '=' : return EQUALS; break;
     cea:	8c e1       	ldi	r24, 0x1C	; 28
     cec:	08 95       	ret
		case '>' : return GTHAN; break;
     cee:	8d e1       	ldi	r24, 0x1D	; 29
     cf0:	08 95       	ret
		case '?' : return QUESTION; break;
     cf2:	8e e1       	ldi	r24, 0x1E	; 30
     cf4:	08 95       	ret
		case '@' : return AT; break;
     cf6:	8f e1       	ldi	r24, 0x1F	; 31
     cf8:	08 95       	ret
		case 'A' : return CAPA; break;
     cfa:	80 e2       	ldi	r24, 0x20	; 32
     cfc:	08 95       	ret
		case '[' : return OSQUARE; break;
     cfe:	8a e3       	ldi	r24, 0x3A	; 58
     d00:	08 95       	ret
		case '\\' : return BSLASH; break;
     d02:	8b e3       	ldi	r24, 0x3B	; 59
     d04:	08 95       	ret
		case ']' : return CSQUARE; break;
     d06:	8c e3       	ldi	r24, 0x3C	; 60
     d08:	08 95       	ret
		case '^' : return CARET; break;
     d0a:	8d e3       	ldi	r24, 0x3D	; 61
     d0c:	08 95       	ret
		case '_' : return USCORE; break;
     d0e:	8e e3       	ldi	r24, 0x3E	; 62
     d10:	08 95       	ret
		case '`' : return OQUOTE; break;
     d12:	8f e3       	ldi	r24, 0x3F	; 63
     d14:	08 95       	ret
		case 'a' : return LOWERA; break;
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	08 95       	ret
		case '{' : return OCURL; break;
     d1a:	8a e5       	ldi	r24, 0x5A	; 90
     d1c:	08 95       	ret
			case '|' : return PIPE; break;
     d1e:	8b e5       	ldi	r24, 0x5B	; 91
     d20:	08 95       	ret
		case '}' : return CCURL; break;
     d22:	8c e5       	ldi	r24, 0x5C	; 92
     d24:	08 95       	ret
		case '~' : return TILDE; break;
     d26:	8d e5       	ldi	r24, 0x5D	; 93
     d28:	08 95       	ret
		
	}
	return QUESTION;
     d2a:	8e e1       	ldi	r24, 0x1E	; 30
     d2c:	08 95       	ret

uint8_t Punctuate(char mark)
{
	switch (mark)
	{
		case '!': return EXCLAMATION; break;
     d2e:	80 e0       	ldi	r24, 0x00	; 0
		case '}' : return CCURL; break;
		case '~' : return TILDE; break;
		
	}
	return QUESTION;
}
     d30:	08 95       	ret

00000d32 <_Z9WriteTextPK9FONT_INFOPKchhh>:

void WriteText(const FONT_INFO *fontp, const char text[], uint8_t x, uint8_t y, uint8_t orient )
{
     d32:	2f 92       	push	r2
     d34:	3f 92       	push	r3
     d36:	4f 92       	push	r4
     d38:	5f 92       	push	r5
     d3a:	6f 92       	push	r6
     d3c:	7f 92       	push	r7
     d3e:	8f 92       	push	r8
     d40:	9f 92       	push	r9
     d42:	af 92       	push	r10
     d44:	bf 92       	push	r11
     d46:	cf 92       	push	r12
     d48:	df 92       	push	r13
     d4a:	ef 92       	push	r14
     d4c:	ff 92       	push	r15
     d4e:	0f 93       	push	r16
     d50:	1f 93       	push	r17
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	00 d0       	rcall	.+0      	; 0xd58 <_Z9WriteTextPK9FONT_INFOPKchhh+0x26>
     d58:	00 d0       	rcall	.+0      	; 0xd5a <_Z9WriteTextPK9FONT_INFOPKchhh+0x28>
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
     d5e:	5c 01       	movw	r10, r24
     d60:	7a 83       	std	Y+2, r23	; 0x02
     d62:	69 83       	std	Y+1, r22	; 0x01
     d64:	14 2f       	mov	r17, r20
     d66:	22 2e       	mov	r2, r18
     d68:	e0 2e       	mov	r14, r16
			fb.drawBitmap(fontp->data +pgm_read_word(&(fontp->charInfo[chars[i]].offset)),fontp->heightPixels,pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits)),x,y);
			x=x+pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits))+2;
		}
	}
	
}
     d6a:	2d b7       	in	r18, 0x3d	; 61
     d6c:	3e b7       	in	r19, 0x3e	; 62
     d6e:	3c 83       	std	Y+4, r19	; 0x04
     d70:	2b 83       	std	Y+3, r18	; 0x03

void WriteText(const FONT_INFO *fontp, const char text[], uint8_t x, uint8_t y, uint8_t orient )
{
	
	//uint8_t chars[sizeof(text)];
	uint8_t nChars = (strlen(text));
     d72:	fb 01       	movw	r30, r22
     d74:	01 90       	ld	r0, Z+
     d76:	00 20       	and	r0, r0
     d78:	e9 f7       	brne	.-6      	; 0xd74 <_Z9WriteTextPK9FONT_INFOPKchhh+0x42>
     d7a:	31 97       	sbiw	r30, 0x01	; 1
     d7c:	cf 01       	movw	r24, r30
     d7e:	86 1b       	sub	r24, r22
     d80:	97 0b       	sbc	r25, r23
     d82:	f8 2e       	mov	r15, r24
     d84:	99 27       	eor	r25, r25
	uint8_t chars[nChars]={0};
     d86:	ed b7       	in	r30, 0x3d	; 61
     d88:	fe b7       	in	r31, 0x3e	; 62
     d8a:	e8 1b       	sub	r30, r24
     d8c:	f9 0b       	sbc	r31, r25
     d8e:	0f b6       	in	r0, 0x3f	; 63
     d90:	f8 94       	cli
     d92:	fe bf       	out	0x3e, r31	; 62
     d94:	0f be       	out	0x3f, r0	; 63
     d96:	ed bf       	out	0x3d, r30	; 61
     d98:	2d b7       	in	r18, 0x3d	; 61
     d9a:	3e b7       	in	r19, 0x3e	; 62
     d9c:	2f 5f       	subi	r18, 0xFF	; 255
     d9e:	3f 4f       	sbci	r19, 0xFF	; 255
     da0:	29 01       	movw	r4, r18
     da2:	11 82       	std	Z+1, r1	; 0x01
     da4:	32 96       	adiw	r30, 0x02	; 2
     da6:	81 30       	cpi	r24, 0x01	; 1
     da8:	91 05       	cpc	r25, r1
     daa:	31 f0       	breq	.+12     	; 0xdb8 <_Z9WriteTextPK9FONT_INFOPKchhh+0x86>
     dac:	82 0f       	add	r24, r18
     dae:	93 1f       	adc	r25, r19
     db0:	11 92       	st	Z+, r1
     db2:	e8 17       	cp	r30, r24
     db4:	f9 07       	cpc	r31, r25
     db6:	e1 f7       	brne	.-8      	; 0xdb0 <_Z9WriteTextPK9FONT_INFOPKchhh+0x7e>
	
	uint8_t width=0;

	
	//for (uint8_t i=0; i<sizeof(text);i++)
	for (uint8_t i=0; i<nChars;i++)
     db8:	ff 20       	and	r15, r15
     dba:	09 f4       	brne	.+2      	; 0xdbe <_Z9WriteTextPK9FONT_INFOPKchhh+0x8c>
     dbc:	a1 c0       	rjmp	.+322    	; 0xf00 <_Z9WriteTextPK9FONT_INFOPKchhh+0x1ce>
     dbe:	89 80       	ldd	r8, Y+1	; 0x01
     dc0:	9a 80       	ldd	r9, Y+2	; 0x02
     dc2:	04 2d       	mov	r16, r4
     dc4:	c4 2c       	mov	r12, r4
     dc6:	d5 2c       	mov	r13, r5
     dc8:	31 2c       	mov	r3, r1
	{
		if ((uint8_t)text[i]==0x20) width=width+fontp->spacePixels;
     dca:	d4 01       	movw	r26, r8
     dcc:	8d 91       	ld	r24, X+
     dce:	4d 01       	movw	r8, r26
     dd0:	80 32       	cpi	r24, 0x20	; 32
     dd2:	21 f4       	brne	.+8      	; 0xddc <_Z9WriteTextPK9FONT_INFOPKchhh+0xaa>
     dd4:	f5 01       	movw	r30, r10
     dd6:	83 81       	ldd	r24, Z+3	; 0x03
     dd8:	38 0e       	add	r3, r24
     dda:	34 c0       	rjmp	.+104    	; 0xe44 <_Z9WriteTextPK9FONT_INFOPKchhh+0x112>
		else
		{
			if ((uint8_t)text[i]>=0x41 && (uint8_t)text[i]<=0x5A) chars[i]=(uint8_t)text[i]-0x41+CAPA;
     ddc:	9f eb       	ldi	r25, 0xBF	; 191
     dde:	98 0f       	add	r25, r24
     de0:	9a 31       	cpi	r25, 0x1A	; 26
     de2:	20 f4       	brcc	.+8      	; 0xdec <_Z9WriteTextPK9FONT_INFOPKchhh+0xba>
     de4:	9f ed       	ldi	r25, 0xDF	; 223
     de6:	98 0f       	add	r25, r24
     de8:	d6 01       	movw	r26, r12
     dea:	9c 93       	st	X, r25
			if ((uint8_t)text[i]>=0x61 && (uint8_t)text[i]<=0x7A) chars[i]=(uint8_t)text[i]-0x61+LOWERA;
     dec:	9f e9       	ldi	r25, 0x9F	; 159
     dee:	98 0f       	add	r25, r24
     df0:	9a 31       	cpi	r25, 0x1A	; 26
     df2:	20 f4       	brcc	.+8      	; 0xdfc <_Z9WriteTextPK9FONT_INFOPKchhh+0xca>
     df4:	9f ed       	ldi	r25, 0xDF	; 223
     df6:	98 0f       	add	r25, r24
     df8:	f6 01       	movw	r30, r12
     dfa:	90 83       	st	Z, r25
			if ((uint8_t)text[i]>=0x30 && (uint8_t)text[i]<=0x39) chars[i]=(uint8_t)text[i]-0x30+ZERO;
     dfc:	90 ed       	ldi	r25, 0xD0	; 208
     dfe:	98 0f       	add	r25, r24
     e00:	9a 30       	cpi	r25, 0x0A	; 10
     e02:	20 f4       	brcc	.+8      	; 0xe0c <_Z9WriteTextPK9FONT_INFOPKchhh+0xda>
     e04:	9f ed       	ldi	r25, 0xDF	; 223
     e06:	98 0f       	add	r25, r24
     e08:	d6 01       	movw	r26, r12
     e0a:	9c 93       	st	X, r25
     e0c:	36 01       	movw	r6, r12
			if (chars[i]==0) chars[i]=Punctuate(text[i]);
     e0e:	f6 01       	movw	r30, r12
     e10:	90 81       	ld	r25, Z
     e12:	91 11       	cpse	r25, r1
     e14:	04 c0       	rjmp	.+8      	; 0xe1e <_Z9WriteTextPK9FONT_INFOPKchhh+0xec>
     e16:	0e 94 46 06 	call	0xc8c	; 0xc8c <_Z9Punctuatec>
     e1a:	d6 01       	movw	r26, r12
     e1c:	8c 93       	st	X, r24
			width=width+pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits))+2;
     e1e:	d3 01       	movw	r26, r6
     e20:	ec 91       	ld	r30, X
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	cf 01       	movw	r24, r30
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	e8 0f       	add	r30, r24
     e2c:	f9 1f       	adc	r31, r25
     e2e:	d5 01       	movw	r26, r10
     e30:	14 96       	adiw	r26, 0x04	; 4
     e32:	8d 91       	ld	r24, X+
     e34:	9c 91       	ld	r25, X
     e36:	15 97       	sbiw	r26, 0x05	; 5
     e38:	e8 0f       	add	r30, r24
     e3a:	f9 1f       	adc	r31, r25
     e3c:	e4 91       	lpm	r30, Z
     e3e:	33 94       	inc	r3
     e40:	33 94       	inc	r3
     e42:	3e 0e       	add	r3, r30
     e44:	bf ef       	ldi	r27, 0xFF	; 255
     e46:	cb 1a       	sub	r12, r27
     e48:	db 0a       	sbc	r13, r27
     e4a:	8c 2d       	mov	r24, r12
     e4c:	80 1b       	sub	r24, r16
	
	uint8_t width=0;

	
	//for (uint8_t i=0; i<sizeof(text);i++)
	for (uint8_t i=0; i<nChars;i++)
     e4e:	8f 15       	cp	r24, r15
     e50:	08 f4       	brcc	.+2      	; 0xe54 <_Z9WriteTextPK9FONT_INFOPKchhh+0x122>
     e52:	bb cf       	rjmp	.-138    	; 0xdca <_Z9WriteTextPK9FONT_INFOPKchhh+0x98>
			if ((uint8_t)text[i]>=0x30 && (uint8_t)text[i]<=0x39) chars[i]=(uint8_t)text[i]-0x30+ZERO;
			if (chars[i]==0) chars[i]=Punctuate(text[i]);
			width=width+pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits))+2;
		}
	}
	switch(orient)
     e54:	e1 e0       	ldi	r30, 0x01	; 1
     e56:	ee 16       	cp	r14, r30
     e58:	49 f0       	breq	.+18     	; 0xe6c <_Z9WriteTextPK9FONT_INFOPKchhh+0x13a>
     e5a:	ee 16       	cp	r14, r30
     e5c:	20 f0       	brcs	.+8      	; 0xe66 <_Z9WriteTextPK9FONT_INFOPKchhh+0x134>
     e5e:	f2 e0       	ldi	r31, 0x02	; 2
     e60:	ef 16       	cp	r14, r31
     e62:	49 f0       	breq	.+18     	; 0xe76 <_Z9WriteTextPK9FONT_INFOPKchhh+0x144>
     e64:	0a c0       	rjmp	.+20     	; 0xe7a <_Z9WriteTextPK9FONT_INFOPKchhh+0x148>
	{
		case LEFT: x=0; break;
     e66:	10 e0       	ldi	r17, 0x00	; 0
     e68:	08 c0       	rjmp	.+16     	; 0xe7a <_Z9WriteTextPK9FONT_INFOPKchhh+0x148>
			if ((uint8_t)text[i]>=0x30 && (uint8_t)text[i]<=0x39) chars[i]=(uint8_t)text[i]-0x30+ZERO;
			if (chars[i]==0) chars[i]=Punctuate(text[i]);
			width=width+pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits))+2;
		}
	}
	switch(orient)
     e6a:	31 2c       	mov	r3, r1
	{
		case LEFT: x=0; break;
		case CENTRE: x=64-(width/2); break;
     e6c:	36 94       	lsr	r3
     e6e:	10 e4       	ldi	r17, 0x40	; 64
     e70:	13 19       	sub	r17, r3
     e72:	03 c0       	rjmp	.+6      	; 0xe7a <_Z9WriteTextPK9FONT_INFOPKchhh+0x148>
			if ((uint8_t)text[i]>=0x30 && (uint8_t)text[i]<=0x39) chars[i]=(uint8_t)text[i]-0x30+ZERO;
			if (chars[i]==0) chars[i]=Punctuate(text[i]);
			width=width+pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits))+2;
		}
	}
	switch(orient)
     e74:	31 2c       	mov	r3, r1
	{
		case LEFT: x=0; break;
		case CENTRE: x=64-(width/2); break;
		case RIGHT: x=128-width; break;
     e76:	10 e8       	ldi	r17, 0x80	; 128
     e78:	13 19       	sub	r17, r3
	}
	//for (uint8_t i=0; i<sizeof(text);i++)
	for (uint8_t i=0; i<nChars;i++)
     e7a:	ff 20       	and	r15, r15
     e7c:	09 f4       	brne	.+2      	; 0xe80 <_Z9WriteTextPK9FONT_INFOPKchhh+0x14e>
     e7e:	4b c0       	rjmp	.+150    	; 0xf16 <_Z9WriteTextPK9FONT_INFOPKchhh+0x1e4>
     e80:	39 80       	ldd	r3, Y+1	; 0x01
     e82:	32 01       	movw	r6, r4
     e84:	83 2c       	mov	r8, r3
     e86:	9a 80       	ldd	r9, Y+2	; 0x02
	{
		if ((uint8_t)text[i]==0x20) x=x+fontp->spacePixels;
     e88:	d4 01       	movw	r26, r8
     e8a:	8d 91       	ld	r24, X+
     e8c:	4d 01       	movw	r8, r26
     e8e:	80 32       	cpi	r24, 0x20	; 32
     e90:	21 f4       	brne	.+8      	; 0xe9a <_Z9WriteTextPK9FONT_INFOPKchhh+0x168>
     e92:	f5 01       	movw	r30, r10
     e94:	83 81       	ldd	r24, Z+3	; 0x03
     e96:	18 0f       	add	r17, r24
     e98:	2a c0       	rjmp	.+84     	; 0xeee <_Z9WriteTextPK9FONT_INFOPKchhh+0x1bc>
		else
		{
			fb.drawBitmap(fontp->data +pgm_read_word(&(fontp->charInfo[chars[i]].offset)),fontp->heightPixels,pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits)),x,y);
     e9a:	d3 01       	movw	r26, r6
     e9c:	cc 90       	ld	r12, X
     e9e:	8c 2d       	mov	r24, r12
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	6c 01       	movw	r12, r24
     ea4:	cc 0c       	add	r12, r12
     ea6:	dd 1c       	adc	r13, r13
     ea8:	c8 0e       	add	r12, r24
     eaa:	d9 1e       	adc	r13, r25
     eac:	d5 01       	movw	r26, r10
     eae:	14 96       	adiw	r26, 0x04	; 4
     eb0:	ed 91       	ld	r30, X+
     eb2:	fc 91       	ld	r31, X
     eb4:	15 97       	sbiw	r26, 0x05	; 5
     eb6:	ec 0d       	add	r30, r12
     eb8:	fd 1d       	adc	r31, r13
     eba:	24 91       	lpm	r18, Z
     ebc:	31 96       	adiw	r30, 0x01	; 1
     ebe:	85 91       	lpm	r24, Z+
     ec0:	94 91       	lpm	r25, Z
     ec2:	f5 01       	movw	r30, r10
     ec4:	66 81       	ldd	r22, Z+6	; 0x06
     ec6:	77 81       	ldd	r23, Z+7	; 0x07
     ec8:	68 0f       	add	r22, r24
     eca:	79 1f       	adc	r23, r25
     ecc:	e2 2c       	mov	r14, r2
     ece:	01 2f       	mov	r16, r17
     ed0:	40 81       	ld	r20, Z
     ed2:	8f ea       	ldi	r24, 0xAF	; 175
     ed4:	91 e0       	ldi	r25, 0x01	; 1
     ed6:	0e 94 87 04 	call	0x90e	; 0x90e <_ZN11Framebuffer10drawBitmapEPKhhhhh>
			x=x+pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits))+2;
     eda:	d5 01       	movw	r26, r10
     edc:	14 96       	adiw	r26, 0x04	; 4
     ede:	ed 91       	ld	r30, X+
     ee0:	fc 91       	ld	r31, X
     ee2:	15 97       	sbiw	r26, 0x05	; 5
     ee4:	ec 0d       	add	r30, r12
     ee6:	fd 1d       	adc	r31, r13
     ee8:	e4 91       	lpm	r30, Z
     eea:	1e 5f       	subi	r17, 0xFE	; 254
     eec:	1e 0f       	add	r17, r30
     eee:	bf ef       	ldi	r27, 0xFF	; 255
     ef0:	6b 1a       	sub	r6, r27
     ef2:	7b 0a       	sbc	r7, r27
     ef4:	88 2d       	mov	r24, r8
     ef6:	83 19       	sub	r24, r3
		case LEFT: x=0; break;
		case CENTRE: x=64-(width/2); break;
		case RIGHT: x=128-width; break;
	}
	//for (uint8_t i=0; i<sizeof(text);i++)
	for (uint8_t i=0; i<nChars;i++)
     ef8:	8f 15       	cp	r24, r15
     efa:	08 f4       	brcc	.+2      	; 0xefe <_Z9WriteTextPK9FONT_INFOPKchhh+0x1cc>
     efc:	c5 cf       	rjmp	.-118    	; 0xe88 <_Z9WriteTextPK9FONT_INFOPKchhh+0x156>
     efe:	0b c0       	rjmp	.+22     	; 0xf16 <_Z9WriteTextPK9FONT_INFOPKchhh+0x1e4>
			if ((uint8_t)text[i]>=0x30 && (uint8_t)text[i]<=0x39) chars[i]=(uint8_t)text[i]-0x30+ZERO;
			if (chars[i]==0) chars[i]=Punctuate(text[i]);
			width=width+pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits))+2;
		}
	}
	switch(orient)
     f00:	e1 e0       	ldi	r30, 0x01	; 1
     f02:	ee 16       	cp	r14, r30
     f04:	09 f4       	brne	.+2      	; 0xf08 <_Z9WriteTextPK9FONT_INFOPKchhh+0x1d6>
     f06:	b1 cf       	rjmp	.-158    	; 0xe6a <_Z9WriteTextPK9FONT_INFOPKchhh+0x138>
     f08:	ee 16       	cp	r14, r30
     f0a:	08 f4       	brcc	.+2      	; 0xf0e <_Z9WriteTextPK9FONT_INFOPKchhh+0x1dc>
     f0c:	ac cf       	rjmp	.-168    	; 0xe66 <_Z9WriteTextPK9FONT_INFOPKchhh+0x134>
     f0e:	f2 e0       	ldi	r31, 0x02	; 2
     f10:	ef 16       	cp	r14, r31
     f12:	09 f4       	brne	.+2      	; 0xf16 <_Z9WriteTextPK9FONT_INFOPKchhh+0x1e4>
     f14:	af cf       	rjmp	.-162    	; 0xe74 <_Z9WriteTextPK9FONT_INFOPKchhh+0x142>
			fb.drawBitmap(fontp->data +pgm_read_word(&(fontp->charInfo[chars[i]].offset)),fontp->heightPixels,pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits)),x,y);
			x=x+pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits))+2;
		}
	}
	
}
     f16:	2b 81       	ldd	r18, Y+3	; 0x03
     f18:	3c 81       	ldd	r19, Y+4	; 0x04
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	f8 94       	cli
     f1e:	3e bf       	out	0x3e, r19	; 62
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	2d bf       	out	0x3d, r18	; 61
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	df 90       	pop	r13
     f3a:	cf 90       	pop	r12
     f3c:	bf 90       	pop	r11
     f3e:	af 90       	pop	r10
     f40:	9f 90       	pop	r9
     f42:	8f 90       	pop	r8
     f44:	7f 90       	pop	r7
     f46:	6f 90       	pop	r6
     f48:	5f 90       	pop	r5
     f4a:	4f 90       	pop	r4
     f4c:	3f 90       	pop	r3
     f4e:	2f 90       	pop	r2
     f50:	08 95       	ret

00000f52 <__vector_11>:


ISR(TIMER1_COMPA_vect) { 
     f52:	1f 92       	push	r1
     f54:	0f 92       	push	r0
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	0f 92       	push	r0
     f5a:	11 24       	eor	r1, r1
     f5c:	2f 93       	push	r18
     f5e:	3f 93       	push	r19
     f60:	4f 93       	push	r20
     f62:	5f 93       	push	r21
     f64:	8f 93       	push	r24
     f66:	9f 93       	push	r25
     f68:	ef 93       	push	r30
     f6a:	ff 93       	push	r31

	TC++;
     f6c:	80 91 ac 01 	lds	r24, 0x01AC
     f70:	90 91 ad 01 	lds	r25, 0x01AD
     f74:	01 96       	adiw	r24, 0x01	; 1
     f76:	90 93 ad 01 	sts	0x01AD, r25
     f7a:	80 93 ac 01 	sts	0x01AC, r24
	if ((PIND & (1<<DDD3))) {
     f7e:	4b 9b       	sbis	0x09, 3	; 9
     f80:	1d c0       	rjmp	.+58     	; 0xfbc <__vector_11+0x6a>
		
//		fb.buffer[(uint16_t)(TC%8)*128+(TC/8)]=0xFF;
		buffer[(uint16_t)TC/8] |= (1<<(TC%8));
     f82:	20 91 ac 01 	lds	r18, 0x01AC
     f86:	30 91 ad 01 	lds	r19, 0x01AD
     f8a:	e0 91 ac 01 	lds	r30, 0x01AC
     f8e:	f0 91 ad 01 	lds	r31, 0x01AD
     f92:	f6 95       	lsr	r31
     f94:	e7 95       	ror	r30
     f96:	f6 95       	lsr	r31
     f98:	e7 95       	ror	r30
     f9a:	f6 95       	lsr	r31
     f9c:	e7 95       	ror	r30
     f9e:	eb 5f       	subi	r30, 0xFB	; 251
     fa0:	fe 4f       	sbci	r31, 0xFE	; 254
     fa2:	40 81       	ld	r20, Z
     fa4:	27 70       	andi	r18, 0x07	; 7
     fa6:	33 27       	eor	r19, r19
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <__vector_11+0x60>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	2a 95       	dec	r18
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <__vector_11+0x5c>
     fb6:	84 2b       	or	r24, r20
     fb8:	80 83       	st	Z, r24
     fba:	20 c0       	rjmp	.+64     	; 0xffc <__vector_11+0xaa>
	
	} else {
//		fb.buffer[(uint16_t)(TC%8)*128+(TC/8)]=0x00;	
		buffer[(uint16_t)TC/8] &= ~(1<<(TC%8));
     fbc:	40 91 ac 01 	lds	r20, 0x01AC
     fc0:	50 91 ad 01 	lds	r21, 0x01AD
     fc4:	e0 91 ac 01 	lds	r30, 0x01AC
     fc8:	f0 91 ad 01 	lds	r31, 0x01AD
     fcc:	f6 95       	lsr	r31
     fce:	e7 95       	ror	r30
     fd0:	f6 95       	lsr	r31
     fd2:	e7 95       	ror	r30
     fd4:	f6 95       	lsr	r31
     fd6:	e7 95       	ror	r30
     fd8:	eb 5f       	subi	r30, 0xFB	; 251
     fda:	fe 4f       	sbci	r31, 0xFE	; 254
     fdc:	20 81       	ld	r18, Z
     fde:	47 70       	andi	r20, 0x07	; 7
     fe0:	55 27       	eor	r21, r21
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <__vector_11+0x9a>
     fe8:	88 0f       	add	r24, r24
     fea:	99 1f       	adc	r25, r25
     fec:	4a 95       	dec	r20
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <__vector_11+0x96>
     ff0:	80 95       	com	r24
     ff2:	90 95       	com	r25
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	82 23       	and	r24, r18
     ff8:	93 23       	and	r25, r19
     ffa:	80 83       	st	Z, r24
	
	}
	if (TC>=1000) {
     ffc:	80 91 ac 01 	lds	r24, 0x01AC
    1000:	90 91 ad 01 	lds	r25, 0x01AD
    1004:	88 3e       	cpi	r24, 0xE8	; 232
    1006:	93 40       	sbci	r25, 0x03	; 3
    1008:	20 f0       	brcs	.+8      	; 0x1012 <__vector_11+0xc0>
		TC=0;
    100a:	10 92 ad 01 	sts	0x01AD, r1
    100e:	10 92 ac 01 	sts	0x01AC, r1

	}	

	if (TC==LEdge) { 
    1012:	20 91 ac 01 	lds	r18, 0x01AC
    1016:	30 91 ad 01 	lds	r19, 0x01AD
    101a:	80 91 aa 01 	lds	r24, 0x01AA
    101e:	90 91 ab 01 	lds	r25, 0x01AB
    1022:	28 17       	cp	r18, r24
    1024:	39 07       	cpc	r19, r25
    1026:	59 f4       	brne	.+22     	; 0x103e <__vector_11+0xec>
		TICK=true;	
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	80 93 ae 01 	sts	0x01AE, r24
		TC=0;
    102e:	10 92 ad 01 	sts	0x01AD, r1
    1032:	10 92 ac 01 	sts	0x01AC, r1
		LEdge=0;
    1036:	10 92 ab 01 	sts	0x01AB, r1
    103a:	10 92 aa 01 	sts	0x01AA, r1
	}

}
    103e:	ff 91       	pop	r31
    1040:	ef 91       	pop	r30
    1042:	9f 91       	pop	r25
    1044:	8f 91       	pop	r24
    1046:	5f 91       	pop	r21
    1048:	4f 91       	pop	r20
    104a:	3f 91       	pop	r19
    104c:	2f 91       	pop	r18
    104e:	0f 90       	pop	r0
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	0f 90       	pop	r0
    1054:	1f 90       	pop	r1
    1056:	18 95       	reti

00001058 <main>:



int main(void)
{
    1058:	cf 93       	push	r28
    105a:	df 93       	push	r29
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    1060:	cb 59       	subi	r28, 0x9B	; 155
    1062:	d1 09       	sbc	r29, r1
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	f8 94       	cli
    1068:	de bf       	out	0x3e, r29	; 62
    106a:	0f be       	out	0x3f, r0	; 63
    106c:	cd bf       	out	0x3d, r28	; 61
	uint16_t y=0;
	
	// Leading Edge detection variables
	uint16_t LEdgeSMin=0; // bottom of leading edge search range
	uint8_t LEdgeSRange=100; // leading edge search bin size - effectively acts as Ledge Search mode too
	uint8_t LEdgeCount[10]={0}; // count of hits in each bin for current second
    106e:	fe 01       	movw	r30, r28
    1070:	ed 57       	subi	r30, 0x7D	; 125
    1072:	ff 4f       	sbci	r31, 0xFF	; 255
    1074:	8a e0       	ldi	r24, 0x0A	; 10
    1076:	df 01       	movw	r26, r30
    1078:	28 2f       	mov	r18, r24
    107a:	1d 92       	st	X+, r1
    107c:	2a 95       	dec	r18
    107e:	e9 f7       	brne	.-6      	; 0x107a <main+0x22>
	uint8_t LEdgeSum[10]={0};	// count of consecutive seconds that a bin has had a hit
    1080:	3a 97       	sbiw	r30, 0x0a	; 10
    1082:	df 01       	movw	r26, r30
    1084:	1d 92       	st	X+, r1
    1086:	8a 95       	dec	r24
    1088:	e9 f7       	brne	.-6      	; 0x1084 <main+0x2c>
	bool MMarkFound=false; // has the Minute Marker been found
	bool SigSecond=0; // what second are we at during the minute?
	uint8_t BitASample=0; // for counting the strikes in the BitA window 
	uint8_t BitBSample=0; // for counting the strikes in the BitB window
	uint8_t BitCSample=0; // for counting the strikes in the remainder of the first half of the second
	bool BitA[60]={false}; // BitA array (one minute's worth)
    108a:	8c e3       	ldi	r24, 0x3C	; 60
    108c:	fc 97       	sbiw	r30, 0x3c	; 60
    108e:	df 01       	movw	r26, r30
    1090:	28 2f       	mov	r18, r24
    1092:	1d 92       	st	X+, r1
    1094:	2a 95       	dec	r18
    1096:	e9 f7       	brne	.-6      	; 0x1092 <main+0x3a>
	bool BitB[60]={false}; // BitB array (one minute's worth)
    1098:	fc 97       	sbiw	r30, 0x3c	; 60
    109a:	df 01       	movw	r26, r30
    109c:	1d 92       	st	X+, r1
    109e:	8a 95       	dec	r24
    10a0:	e9 f7       	brne	.-6      	; 0x109c <main+0x44>
	
	bool PinState=false;
	bool PrevPinState=false;
	
	// Show splash-screen
	fb.clear();
    10a2:	8f ea       	ldi	r24, 0xAF	; 175
    10a4:	91 e0       	ldi	r25, 0x01	; 1
    10a6:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <_ZN11Framebuffer5clearEv>
	fb.drawBitmap(Atomic,64,64,32,0);
    10aa:	e1 2c       	mov	r14, r1
    10ac:	00 e2       	ldi	r16, 0x20	; 32
    10ae:	20 e4       	ldi	r18, 0x40	; 64
    10b0:	40 e4       	ldi	r20, 0x40	; 64
    10b2:	68 e4       	ldi	r22, 0x48	; 72
    10b4:	76 e0       	ldi	r23, 0x06	; 6
    10b6:	8f ea       	ldi	r24, 0xAF	; 175
    10b8:	91 e0       	ldi	r25, 0x01	; 1
    10ba:	0e 94 87 04 	call	0x90e	; 0x90e <_ZN11Framebuffer10drawBitmapEPKhhhhh>
	fb.show();
    10be:	8f ea       	ldi	r24, 0xAF	; 175
    10c0:	91 e0       	ldi	r25, 0x01	; 1
    10c2:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN11Framebuffer4showEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10c6:	bf ef       	ldi	r27, 0xFF	; 255
    10c8:	eb e7       	ldi	r30, 0x7B	; 123
    10ca:	f2 e9       	ldi	r31, 0x92	; 146
    10cc:	b1 50       	subi	r27, 0x01	; 1
    10ce:	e0 40       	sbci	r30, 0x00	; 0
    10d0:	f0 40       	sbci	r31, 0x00	; 0
    10d2:	e1 f7       	brne	.-8      	; 0x10cc <main+0x74>
    10d4:	00 c0       	rjmp	.+0      	; 0x10d6 <main+0x7e>
    10d6:	00 00       	nop
	_delay_ms(3000);
	fb.clear();
    10d8:	8f ea       	ldi	r24, 0xAF	; 175
    10da:	91 e0       	ldi	r25, 0x01	; 1
    10dc:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <_ZN11Framebuffer5clearEv>
	fb.show();
    10e0:	8f ea       	ldi	r24, 0xAF	; 175
    10e2:	91 e0       	ldi	r25, 0x01	; 1
    10e4:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN11Framebuffer4showEv>


	// Enable atomic clock pulse pin for input
	DDRD &= ~(1<<DDD3);// // pin PC3
    10e8:	53 98       	cbi	0x0a, 3	; 10
	PORTD |= (1<<DDD3); //  pin PC3 set to pulled-up
    10ea:	5b 9a       	sbi	0x0b, 3	; 11
	
	
	// Initialise ticker
	TCCR1B |= (1 << WGM12); // Configure timer 1 for CTC mode
    10ec:	e1 e8       	ldi	r30, 0x81	; 129
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	88 60       	ori	r24, 0x08	; 8
    10f4:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS11); // Start timer at Fcpu/8
    10f6:	80 81       	ld	r24, Z
    10f8:	82 60       	ori	r24, 0x02	; 2
    10fa:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A); // Enable CTC interrupt
    10fc:	ef e6       	ldi	r30, 0x6F	; 111
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	82 60       	ori	r24, 0x02	; 2
    1104:	80 83       	st	Z, r24
	sei(); // Enable global interrupts
    1106:	78 94       	sei
	OCR1A = 1999; // Set CTC compare value to 1000Hz at 16MHz AVR clock, with a prescaler of 8
    1108:	8f ec       	ldi	r24, 0xCF	; 207
    110a:	97 e0       	ldi	r25, 0x07	; 7
    110c:	90 93 89 00 	sts	0x0089, r25
    1110:	80 93 88 00 	sts	0x0088, r24
	uint8_t BitCSample=0; // for counting the strikes in the remainder of the first half of the second
	bool BitA[60]={false}; // BitA array (one minute's worth)
	bool BitB[60]={false}; // BitB array (one minute's worth)
	bool BitC=false; // BitC - just for the current second as it has no use other than for the minute marker
	
	bool PinState=false;
    1114:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t BitASample=0; // for counting the strikes in the BitA window 
	uint8_t BitBSample=0; // for counting the strikes in the BitB window
	uint8_t BitCSample=0; // for counting the strikes in the remainder of the first half of the second
	bool BitA[60]={false}; // BitA array (one minute's worth)
	bool BitB[60]={false}; // BitB array (one minute's worth)
	bool BitC=false; // BitC - just for the current second as it has no use other than for the minute marker
    1116:	c5 56       	subi	r28, 0x65	; 101
    1118:	df 4f       	sbci	r29, 0xFF	; 255
    111a:	18 82       	st	Y, r1
    111c:	cb 59       	subi	r28, 0x9B	; 155
    111e:	d0 40       	sbci	r29, 0x00	; 0
	// Leading Edge adjustment variables
	bool LEdgeDetect= false;
	
	// Time decoding variables
	bool MMarkFound=false; // has the Minute Marker been found
	bool SigSecond=0; // what second are we at during the minute?
    1120:	c7 56       	subi	r28, 0x67	; 103
    1122:	df 4f       	sbci	r29, 0xFF	; 255
    1124:	18 82       	st	Y, r1
    1126:	c9 59       	subi	r28, 0x99	; 153
    1128:	d0 40       	sbci	r29, 0x00	; 0
	
	// Leading Edge adjustment variables
	bool LEdgeDetect= false;
	
	// Time decoding variables
	bool MMarkFound=false; // has the Minute Marker been found
    112a:	cb 56       	subi	r28, 0x6B	; 107
    112c:	df 4f       	sbci	r29, 0xFF	; 255
    112e:	18 82       	st	Y, r1
    1130:	c5 59       	subi	r28, 0x95	; 149
    1132:	d0 40       	sbci	r29, 0x00	; 0
	uint8_t LEdgeSRange=100; // leading edge search bin size - effectively acts as Ledge Search mode too
	uint8_t LEdgeCount[10]={0}; // count of hits in each bin for current second
	uint8_t LEdgeSum[10]={0};	// count of consecutive seconds that a bin has had a hit
	uint8_t LEMax=0; // bin with highest number of consecutive hits
	uint8_t LE2Max=0; // bin with second highest number of consecutive hits
	uint8_t LESecsInMode=0; // number of seconds that we have been in this LEdge Search mode
    1134:	c6 56       	subi	r28, 0x66	; 102
    1136:	df 4f       	sbci	r29, 0xFF	; 255
    1138:	18 82       	st	Y, r1
    113a:	ca 59       	subi	r28, 0x9A	; 154
    113c:	d0 40       	sbci	r29, 0x00	; 0
	uint16_t LEdgeSMin=0; // bottom of leading edge search range
	uint8_t LEdgeSRange=100; // leading edge search bin size - effectively acts as Ledge Search mode too
	uint8_t LEdgeCount[10]={0}; // count of hits in each bin for current second
	uint8_t LEdgeSum[10]={0};	// count of consecutive seconds that a bin has had a hit
	uint8_t LEMax=0; // bin with highest number of consecutive hits
	uint8_t LE2Max=0; // bin with second highest number of consecutive hits
    113e:	ca 56       	subi	r28, 0x6A	; 106
    1140:	df 4f       	sbci	r29, 0xFF	; 255
    1142:	18 82       	st	Y, r1
    1144:	c6 59       	subi	r28, 0x96	; 150
    1146:	d0 40       	sbci	r29, 0x00	; 0
	// Leading Edge detection variables
	uint16_t LEdgeSMin=0; // bottom of leading edge search range
	uint8_t LEdgeSRange=100; // leading edge search bin size - effectively acts as Ledge Search mode too
	uint8_t LEdgeCount[10]={0}; // count of hits in each bin for current second
	uint8_t LEdgeSum[10]={0};	// count of consecutive seconds that a bin has had a hit
	uint8_t LEMax=0; // bin with highest number of consecutive hits
    1148:	ce 56       	subi	r28, 0x6E	; 110
    114a:	df 4f       	sbci	r29, 0xFF	; 255
    114c:	18 82       	st	Y, r1
    114e:	c2 59       	subi	r28, 0x92	; 146
    1150:	d0 40       	sbci	r29, 0x00	; 0
	uint16_t x=0;
	uint16_t y=0;
	
	// Leading Edge detection variables
	uint16_t LEdgeSMin=0; // bottom of leading edge search range
	uint8_t LEdgeSRange=100; // leading edge search bin size - effectively acts as Ledge Search mode too
    1152:	24 e6       	ldi	r18, 0x64	; 100
    1154:	cf 56       	subi	r28, 0x6F	; 111
    1156:	df 4f       	sbci	r29, 0xFF	; 255
    1158:	28 83       	st	Y, r18
    115a:	c1 59       	subi	r28, 0x91	; 145
    115c:	d0 40       	sbci	r29, 0x00	; 0
	uint16_t i=0;
	uint16_t x=0;
	uint16_t y=0;
	
	// Leading Edge detection variables
	uint16_t LEdgeSMin=0; // bottom of leading edge search range
    115e:	41 2c       	mov	r4, r1
    1160:	51 2c       	mov	r5, r1
    1162:	ce 01       	movw	r24, r28
    1164:	87 58       	subi	r24, 0x87	; 135
    1166:	9f 4f       	sbci	r25, 0xFF	; 255
    1168:	c3 57       	subi	r28, 0x73	; 115
    116a:	df 4f       	sbci	r29, 0xFF	; 255
    116c:	99 83       	std	Y+1, r25	; 0x01
    116e:	88 83       	st	Y, r24
    1170:	cd 58       	subi	r28, 0x8D	; 141
    1172:	d0 40       	sbci	r29, 0x00	; 0
				fb.drawRectangle(10,31,113,40);
			}
			
			x=0;  // Buffer byte counter
			y=0;  // Buffer bit counter
			for (i=0; i<=999; i++) {   // millisecond counter
    1174:	c3 57       	subi	r28, 0x73	; 115
    1176:	df 4f       	sbci	r29, 0xFF	; 255
    1178:	98 81       	ld	r25, Y
    117a:	cd 58       	subi	r28, 0x8D	; 141
    117c:	d0 40       	sbci	r29, 0x00	; 0
    117e:	cd 56       	subi	r28, 0x6D	; 109
    1180:	df 4f       	sbci	r29, 0xFF	; 255
    1182:	98 83       	st	Y, r25
    1184:	c3 59       	subi	r28, 0x93	; 147
    1186:	d0 40       	sbci	r29, 0x00	; 0
    1188:	c2 57       	subi	r28, 0x72	; 114
    118a:	df 4f       	sbci	r29, 0xFF	; 255
    118c:	a8 81       	ld	r26, Y
    118e:	ce 58       	subi	r28, 0x8E	; 142
    1190:	d0 40       	sbci	r29, 0x00	; 0
    1192:	cc 56       	subi	r28, 0x6C	; 108
    1194:	df 4f       	sbci	r29, 0xFF	; 255
    1196:	a8 83       	st	Y, r26
    1198:	c4 59       	subi	r28, 0x94	; 148
    119a:	d0 40       	sbci	r29, 0x00	; 0
    119c:	e9 e7       	ldi	r30, 0x79	; 121
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	ec 0f       	add	r30, r28
    11a2:	fd 1f       	adc	r31, r29
    11a4:	3a 96       	adiw	r30, 0x0a	; 10
    11a6:	c9 56       	subi	r28, 0x69	; 105
    11a8:	df 4f       	sbci	r29, 0xFF	; 255
    11aa:	f9 83       	std	Y+1, r31	; 0x01
    11ac:	e8 83       	st	Y, r30
    11ae:	c7 59       	subi	r28, 0x97	; 151
    11b0:	d0 40       	sbci	r29, 0x00	; 0
				y++;
				if (y==8) {  
					y=0;
    11b2:	21 2c       	mov	r2, r1
    11b4:	31 2c       	mov	r3, r1
	
	
	/* Replace with your application code */
	while (1)
	{
		while (!TICK); // wait for a tick
    11b6:	80 91 ae 01 	lds	r24, 0x01AE
    11ba:	88 23       	and	r24, r24
    11bc:	e1 f3       	breq	.-8      	; 0x11b6 <main+0x15e>
		TICK=false;
    11be:	10 92 ae 01 	sts	0x01AE, r1
		
		fb.clear();
    11c2:	8f ea       	ldi	r24, 0xAF	; 175
    11c4:	91 e0       	ldi	r25, 0x01	; 1
    11c6:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <_ZN11Framebuffer5clearEv>

		

		// Leading Edge Search Region below
		#pragma region LeadingEdgeSearch
		if (LEdgeSearch) {		
    11ca:	80 91 04 01 	lds	r24, 0x0104
    11ce:	88 23       	and	r24, r24
    11d0:	09 f4       	brne	.+2      	; 0x11d4 <main+0x17c>
    11d2:	e5 c1       	rjmp	.+970    	; 0x159e <main+0x546>
			
			fb.drawRectangle(10,12,113,25); // main signal window - shows whole second
    11d4:	09 e1       	ldi	r16, 0x19	; 25
    11d6:	21 e7       	ldi	r18, 0x71	; 113
    11d8:	4c e0       	ldi	r20, 0x0C	; 12
    11da:	6a e0       	ldi	r22, 0x0A	; 10
    11dc:	8f ea       	ldi	r24, 0xAF	; 175
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	0e 94 5f 05 	call	0xabe	; 0xabe <_ZN11Framebuffer13drawRectangleEhhhh>
    11e4:	0c e0       	ldi	r16, 0x0C	; 12
			for (uint8_t j=0; j<=49; j++) {
				fb.drawPixel(12+j*2,43);
    11e6:	4b e2       	ldi	r20, 0x2B	; 43
    11e8:	60 2f       	mov	r22, r16
    11ea:	8f ea       	ldi	r24, 0xAF	; 175
    11ec:	91 e0       	ldi	r25, 0x01	; 1
    11ee:	0e 94 0f 05 	call	0xa1e	; 0xa1e <_ZN11Framebuffer9drawPixelEhh>
    11f2:	0e 5f       	subi	r16, 0xFE	; 254
		// Leading Edge Search Region below
		#pragma region LeadingEdgeSearch
		if (LEdgeSearch) {		
			
			fb.drawRectangle(10,12,113,25); // main signal window - shows whole second
			for (uint8_t j=0; j<=49; j++) {
    11f4:	00 37       	cpi	r16, 0x70	; 112
    11f6:	b9 f7       	brne	.-18     	; 0x11e6 <main+0x18e>
				fb.drawPixel(12+j*2,43);
			}
			
			if (LEdgeSRange==100) WriteText(&IM8_FontInfo,"Search : 100ms",63,0,CENTRE);
    11f8:	cf 56       	subi	r28, 0x6F	; 111
    11fa:	df 4f       	sbci	r29, 0xFF	; 255
    11fc:	f8 81       	ld	r31, Y
    11fe:	c1 59       	subi	r28, 0x91	; 145
    1200:	d0 40       	sbci	r29, 0x00	; 0
    1202:	f4 36       	cpi	r31, 0x64	; 100
    1204:	51 f4       	brne	.+20     	; 0x121a <main+0x1c2>
    1206:	01 e0       	ldi	r16, 0x01	; 1
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	4f e3       	ldi	r20, 0x3F	; 63
    120c:	6d e8       	ldi	r22, 0x8D	; 141
    120e:	71 e0       	ldi	r23, 0x01	; 1
    1210:	85 e8       	ldi	r24, 0x85	; 133
    1212:	91 e0       	ldi	r25, 0x01	; 1
    1214:	0e 94 99 06 	call	0xd32	; 0xd32 <_Z9WriteTextPK9FONT_INFOPKchhh>
    1218:	bb c2       	rjmp	.+1398   	; 0x1790 <main+0x738>
			if (LEdgeSRange==10) {
    121a:	cf 56       	subi	r28, 0x6F	; 111
    121c:	df 4f       	sbci	r29, 0xFF	; 255
    121e:	28 81       	ld	r18, Y
    1220:	c1 59       	subi	r28, 0x91	; 145
    1222:	d0 40       	sbci	r29, 0x00	; 0
    1224:	2a 30       	cpi	r18, 0x0A	; 10
    1226:	09 f0       	breq	.+2      	; 0x122a <main+0x1d2>
    1228:	b3 c2       	rjmp	.+1382   	; 0x1790 <main+0x738>
				WriteText(&IM8_FontInfo,"Search : 10ms",63,0,CENTRE);
    122a:	01 e0       	ldi	r16, 0x01	; 1
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	4f e3       	ldi	r20, 0x3F	; 63
    1230:	6c e9       	ldi	r22, 0x9C	; 156
    1232:	71 e0       	ldi	r23, 0x01	; 1
    1234:	85 e8       	ldi	r24, 0x85	; 133
    1236:	91 e0       	ldi	r25, 0x01	; 1
    1238:	0e 94 99 06 	call	0xd32	; 0xd32 <_Z9WriteTextPK9FONT_INFOPKchhh>
				fb.drawRectangle(10,31,113,40);
    123c:	08 e2       	ldi	r16, 0x28	; 40
    123e:	21 e7       	ldi	r18, 0x71	; 113
    1240:	4f e1       	ldi	r20, 0x1F	; 31
    1242:	6a e0       	ldi	r22, 0x0A	; 10
    1244:	8f ea       	ldi	r24, 0xAF	; 175
    1246:	91 e0       	ldi	r25, 0x01	; 1
    1248:	0e 94 5f 05 	call	0xabe	; 0xabe <_ZN11Framebuffer13drawRectangleEhhhh>
    124c:	a1 c2       	rjmp	.+1346   	; 0x1790 <main+0x738>
			}
			
			x=0;  // Buffer byte counter
			y=0;  // Buffer bit counter
			for (i=0; i<=999; i++) {   // millisecond counter
				y++;
    124e:	8f ef       	ldi	r24, 0xFF	; 255
    1250:	c8 1a       	sub	r12, r24
    1252:	d8 0a       	sbc	r13, r24
				if (y==8) {  
    1254:	98 e0       	ldi	r25, 0x08	; 8
    1256:	c9 16       	cp	r12, r25
    1258:	d1 04       	cpc	r13, r1
    125a:	29 f4       	brne	.+10     	; 0x1266 <main+0x20e>
					y=0;
					x++;
    125c:	af ef       	ldi	r26, 0xFF	; 255
    125e:	aa 1a       	sub	r10, r26
    1260:	ba 0a       	sbc	r11, r26
			x=0;  // Buffer byte counter
			y=0;  // Buffer bit counter
			for (i=0; i<=999; i++) {   // millisecond counter
				y++;
				if (y==8) {  
					y=0;
    1262:	c2 2c       	mov	r12, r2
    1264:	d3 2c       	mov	r13, r3
    1266:	73 94       	inc	r7
					x++;
				}
				PrevPinState=PinState;
				PinState=CHECK_BIT(buffer[x],y);  // read pin state
    1268:	21 2f       	mov	r18, r17
    126a:	f5 01       	movw	r30, r10
    126c:	eb 5f       	subi	r30, 0xFB	; 251
    126e:	fe 4f       	sbci	r31, 0xFE	; 254
    1270:	80 81       	ld	r24, Z
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	0c 2c       	mov	r0, r12
    1276:	02 c0       	rjmp	.+4      	; 0x127c <main+0x224>
    1278:	95 95       	asr	r25
    127a:	87 95       	ror	r24
    127c:	0a 94       	dec	r0
    127e:	e2 f7       	brpl	.-8      	; 0x1278 <main+0x220>
    1280:	18 2f       	mov	r17, r24
    1282:	11 70       	andi	r17, 0x01	; 1
			
				if (i>=LEdgeSMin && i<=LEdgeSMin+(10*LEdgeSRange)-1) // id ms counter within Leading Edge search range
    1284:	e4 14       	cp	r14, r4
    1286:	f5 04       	cpc	r15, r5
    1288:	48 f1       	brcs	.+82     	; 0x12dc <main+0x284>
    128a:	8e 14       	cp	r8, r14
    128c:	9f 04       	cpc	r9, r15
    128e:	30 f1       	brcs	.+76     	; 0x12dc <main+0x284>
				{
					if (!PrevPinState && PinState) 	LEdgeCount[(i-LEdgeSMin)/LEdgeSRange]++; // leading Edge found, increment counter for current bin
    1290:	21 11       	cpse	r18, r1
    1292:	18 c0       	rjmp	.+48     	; 0x12c4 <main+0x26c>
    1294:	11 23       	and	r17, r17
    1296:	09 f4       	brne	.+2      	; 0x129a <main+0x242>
    1298:	44 c0       	rjmp	.+136    	; 0x1322 <main+0x2ca>
    129a:	c7 01       	movw	r24, r14
    129c:	84 19       	sub	r24, r4
    129e:	95 09       	sbc	r25, r5
    12a0:	c1 57       	subi	r28, 0x71	; 113
    12a2:	df 4f       	sbci	r29, 0xFF	; 255
    12a4:	68 81       	ld	r22, Y
    12a6:	79 81       	ldd	r23, Y+1	; 0x01
    12a8:	cf 58       	subi	r28, 0x8F	; 143
    12aa:	d0 40       	sbci	r29, 0x00	; 0
    12ac:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <__udivmodhi4>
    12b0:	e3 e8       	ldi	r30, 0x83	; 131
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	ec 0f       	add	r30, r28
    12b6:	fd 1f       	adc	r31, r29
    12b8:	e6 0f       	add	r30, r22
    12ba:	f7 1f       	adc	r31, r23
    12bc:	80 81       	ld	r24, Z
    12be:	8f 5f       	subi	r24, 0xFF	; 255
    12c0:	80 83       	st	Z, r24
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <main+0x270>
					if (PinState && LEdgeSRange==10) fb.drawVLine(12+(i-LEdgeSMin),33,6);
    12c4:	11 23       	and	r17, r17
    12c6:	69 f1       	breq	.+90     	; 0x1322 <main+0x2ca>
    12c8:	0a 30       	cpi	r16, 0x0A	; 10
    12ca:	51 f4       	brne	.+20     	; 0x12e0 <main+0x288>
    12cc:	26 e0       	ldi	r18, 0x06	; 6
    12ce:	41 e2       	ldi	r20, 0x21	; 33
    12d0:	67 2d       	mov	r22, r7
    12d2:	8f ea       	ldi	r24, 0xAF	; 175
    12d4:	91 e0       	ldi	r25, 0x01	; 1
    12d6:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN11Framebuffer9drawVLineEhhh>
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <main+0x288>
				}
				if (PinState) fb.drawPixel((i/10)+12,(i%10)+14); // draw pixel to show raw signal
    12dc:	11 23       	and	r17, r17
    12de:	09 f1       	breq	.+66     	; 0x1322 <main+0x2ca>
    12e0:	97 01       	movw	r18, r14
    12e2:	ad ec       	ldi	r26, 0xCD	; 205
    12e4:	bc ec       	ldi	r27, 0xCC	; 204
    12e6:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__umulhisi3>
    12ea:	96 95       	lsr	r25
    12ec:	87 95       	ror	r24
    12ee:	96 95       	lsr	r25
    12f0:	87 95       	ror	r24
    12f2:	96 95       	lsr	r25
    12f4:	87 95       	ror	r24
    12f6:	ac 01       	movw	r20, r24
    12f8:	44 0f       	add	r20, r20
    12fa:	55 1f       	adc	r21, r21
    12fc:	9c 01       	movw	r18, r24
    12fe:	22 0f       	add	r18, r18
    1300:	33 1f       	adc	r19, r19
    1302:	22 0f       	add	r18, r18
    1304:	33 1f       	adc	r19, r19
    1306:	22 0f       	add	r18, r18
    1308:	33 1f       	adc	r19, r19
    130a:	24 0f       	add	r18, r20
    130c:	35 1f       	adc	r19, r21
    130e:	a7 01       	movw	r20, r14
    1310:	42 1b       	sub	r20, r18
    1312:	53 0b       	sbc	r21, r19
    1314:	42 5f       	subi	r20, 0xF2	; 242
    1316:	6c e0       	ldi	r22, 0x0C	; 12
    1318:	68 0f       	add	r22, r24
    131a:	8f ea       	ldi	r24, 0xAF	; 175
    131c:	91 e0       	ldi	r25, 0x01	; 1
    131e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <_ZN11Framebuffer9drawPixelEhh>
				fb.drawRectangle(10,31,113,40);
			}
			
			x=0;  // Buffer byte counter
			y=0;  // Buffer bit counter
			for (i=0; i<=999; i++) {   // millisecond counter
    1322:	bf ef       	ldi	r27, 0xFF	; 255
    1324:	eb 1a       	sub	r14, r27
    1326:	fb 0a       	sbc	r15, r27
    1328:	e8 ee       	ldi	r30, 0xE8	; 232
    132a:	ee 16       	cp	r14, r30
    132c:	e3 e0       	ldi	r30, 0x03	; 3
    132e:	fe 06       	cpc	r15, r30
    1330:	09 f0       	breq	.+2      	; 0x1334 <main+0x2dc>
    1332:	8d cf       	rjmp	.-230    	; 0x124e <main+0x1f6>
    1334:	5a c2       	rjmp	.+1204   	; 0x17ea <main+0x792>
    1336:	67 01       	movw	r12, r14
				
			}

			for(uint8_t j=0; j<=9; j++){
				
				if (LEdgeCount[j]>=1) {  // increment counter if there has been a hit in this bin this second
    1338:	d7 01       	movw	r26, r14
    133a:	8c 91       	ld	r24, X
    133c:	88 23       	and	r24, r24
    133e:	29 f0       	breq	.+10     	; 0x134a <main+0x2f2>
					LEdgeSum[j]++;
    1340:	f5 01       	movw	r30, r10
    1342:	80 81       	ld	r24, Z
    1344:	8f 5f       	subi	r24, 0xFF	; 255
    1346:	80 83       	st	Z, r24
    1348:	02 c0       	rjmp	.+4      	; 0x134e <main+0x2f6>
				}
				else
				{
					LEdgeSum[j]=0;  // else set count of number of consecutive seconds to zero
    134a:	d5 01       	movw	r26, r10
    134c:	1c 92       	st	X, r1
				}
				fb.drawRectangle(12+(j*10),63-LEdgeSum[j]*2,12+((j+1)*10),63);  // display bar for bin on OLED screen
    134e:	1a e0       	ldi	r17, 0x0A	; 10
    1350:	16 0f       	add	r17, r22
    1352:	f5 01       	movw	r30, r10
    1354:	41 91       	ld	r20, Z+
    1356:	5f 01       	movw	r10, r30
    1358:	41 95       	neg	r20
    135a:	44 0f       	add	r20, r20
    135c:	41 5c       	subi	r20, 0xC1	; 193
    135e:	0f e3       	ldi	r16, 0x3F	; 63
    1360:	21 2f       	mov	r18, r17
    1362:	8f ea       	ldi	r24, 0xAF	; 175
    1364:	91 e0       	ldi	r25, 0x01	; 1
    1366:	0e 94 5f 05 	call	0xabe	; 0xabe <_ZN11Framebuffer13drawRectangleEhhhh>
				LEdgeCount[j]=0;  // reset count of hits this second ready for next second
    136a:	d6 01       	movw	r26, r12
    136c:	1c 92       	st	X, r1
    136e:	bf ef       	ldi	r27, 0xFF	; 255
    1370:	eb 1a       	sub	r14, r27
    1372:	fb 0a       	sbc	r15, r27
    1374:	61 2f       	mov	r22, r17
				}
				if (PinState) fb.drawPixel((i/10)+12,(i%10)+14); // draw pixel to show raw signal
				
			}

			for(uint8_t j=0; j<=9; j++){
    1376:	10 37       	cpi	r17, 0x70	; 112
    1378:	f1 f6       	brne	.-68     	; 0x1336 <main+0x2de>
    137a:	17 2d       	mov	r17, r7
    137c:	cd 56       	subi	r28, 0x6D	; 109
    137e:	df 4f       	sbci	r29, 0xFF	; 255
    1380:	e8 81       	ld	r30, Y
    1382:	c3 59       	subi	r28, 0x93	; 147
    1384:	d0 40       	sbci	r29, 0x00	; 0
    1386:	cc 56       	subi	r28, 0x6C	; 108
    1388:	df 4f       	sbci	r29, 0xFF	; 255
    138a:	f8 81       	ld	r31, Y
    138c:	c4 59       	subi	r28, 0x94	; 148
    138e:	d0 40       	sbci	r29, 0x00	; 0
    1390:	ce 56       	subi	r28, 0x6E	; 110
    1392:	df 4f       	sbci	r29, 0xFF	; 255
    1394:	98 81       	ld	r25, Y
    1396:	c2 59       	subi	r28, 0x92	; 146
    1398:	d0 40       	sbci	r29, 0x00	; 0
    139a:	ca 56       	subi	r28, 0x6A	; 106
    139c:	df 4f       	sbci	r29, 0xFF	; 255
    139e:	38 81       	ld	r19, Y
    13a0:	c6 59       	subi	r28, 0x96	; 150
    13a2:	d0 40       	sbci	r29, 0x00	; 0
    13a4:	c9 56       	subi	r28, 0x69	; 105
    13a6:	df 4f       	sbci	r29, 0xFF	; 255
    13a8:	68 81       	ld	r22, Y
    13aa:	79 81       	ldd	r23, Y+1	; 0x01
    13ac:	c7 59       	subi	r28, 0x97	; 151
    13ae:	d0 40       	sbci	r29, 0x00	; 0
    13b0:	4e 2f       	mov	r20, r30
    13b2:	c3 57       	subi	r28, 0x73	; 115
    13b4:	df 4f       	sbci	r29, 0xFF	; 255
    13b6:	28 81       	ld	r18, Y
    13b8:	cd 58       	subi	r28, 0x8D	; 141
    13ba:	d0 40       	sbci	r29, 0x00	; 0
    13bc:	42 1b       	sub	r20, r18
				fb.drawRectangle(12+(j*10),63-LEdgeSum[j]*2,12+((j+1)*10),63);  // display bar for bin on OLED screen
				LEdgeCount[j]=0;  // reset count of hits this second ready for next second
			}

			for(uint8_t j=0; j<=9; j++){  // identify bins with first and second highest counts of leading edges
				if(LEdgeSum[j]>LEdgeSum[LEMax]) {LE2Max=LEMax; LEMax=j;}
    13be:	81 91       	ld	r24, Z+
    13c0:	a9 e7       	ldi	r26, 0x79	; 121
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	ac 0f       	add	r26, r28
    13c6:	bd 1f       	adc	r27, r29
    13c8:	a9 0f       	add	r26, r25
    13ca:	b1 1d       	adc	r27, r1
    13cc:	2c 91       	ld	r18, X
    13ce:	28 17       	cp	r18, r24
    13d0:	10 f4       	brcc	.+4      	; 0x13d6 <main+0x37e>
    13d2:	39 2f       	mov	r19, r25
    13d4:	94 2f       	mov	r25, r20
				if(LEdgeSum[j]>LE2Max && LEdgeSum[j]<LEMax) LE2Max=j;
    13d6:	38 17       	cp	r19, r24
    13d8:	18 f4       	brcc	.+6      	; 0x13e0 <main+0x388>
    13da:	89 17       	cp	r24, r25
    13dc:	08 f4       	brcc	.+2      	; 0x13e0 <main+0x388>
    13de:	34 2f       	mov	r19, r20
				}
				fb.drawRectangle(12+(j*10),63-LEdgeSum[j]*2,12+((j+1)*10),63);  // display bar for bin on OLED screen
				LEdgeCount[j]=0;  // reset count of hits this second ready for next second
			}

			for(uint8_t j=0; j<=9; j++){  // identify bins with first and second highest counts of leading edges
    13e0:	e6 17       	cp	r30, r22
    13e2:	f7 07       	cpc	r31, r23
    13e4:	29 f7       	brne	.-54     	; 0x13b0 <main+0x358>
    13e6:	ce 56       	subi	r28, 0x6E	; 110
    13e8:	df 4f       	sbci	r29, 0xFF	; 255
    13ea:	98 83       	st	Y, r25
    13ec:	c2 59       	subi	r28, 0x92	; 146
    13ee:	d0 40       	sbci	r29, 0x00	; 0
    13f0:	ca 56       	subi	r28, 0x6A	; 106
    13f2:	df 4f       	sbci	r29, 0xFF	; 255
    13f4:	38 83       	st	Y, r19
    13f6:	c6 59       	subi	r28, 0x96	; 150
    13f8:	d0 40       	sbci	r29, 0x00	; 0
    13fa:	09 2f       	mov	r16, r25
				if(LEdgeSum[j]>LEdgeSum[LEMax]) {LE2Max=LEMax; LEMax=j;}
				if(LEdgeSum[j]>LE2Max && LEdgeSum[j]<LEMax) LE2Max=j;
			}


			if (LEdgeSRange==100 && LEdgeSum[LEMax]>=10) { // one of the 100ms-wide bins has more than 10 consecutive hits
    13fc:	cf 56       	subi	r28, 0x6F	; 111
    13fe:	df 4f       	sbci	r29, 0xFF	; 255
    1400:	88 81       	ld	r24, Y
    1402:	c1 59       	subi	r28, 0x91	; 145
    1404:	d0 40       	sbci	r29, 0x00	; 0
    1406:	84 36       	cpi	r24, 0x64	; 100
    1408:	39 f5       	brne	.+78     	; 0x1458 <main+0x400>
    140a:	89 2f       	mov	r24, r25
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	e9 e7       	ldi	r30, 0x79	; 121
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	ec 0f       	add	r30, r28
    1414:	fd 1f       	adc	r31, r29
    1416:	e8 0f       	add	r30, r24
    1418:	f9 1f       	adc	r31, r25
    141a:	20 81       	ld	r18, Z
    141c:	2a 30       	cpi	r18, 0x0A	; 10
    141e:	08 f4       	brcc	.+2      	; 0x1422 <main+0x3ca>
    1420:	be c0       	rjmp	.+380    	; 0x159e <main+0x546>
				LEdgeSRange=10; // so we're going to narrow the search with 10ms wide bins ...
				LEdgeSMin=100*LEMax; // ... in the bin that had the most consecutive hits
    1422:	a4 e6       	ldi	r26, 0x64	; 100
    1424:	a8 9f       	mul	r26, r24
    1426:	20 01       	movw	r4, r0
    1428:	a9 9f       	mul	r26, r25
    142a:	50 0c       	add	r5, r0
    142c:	11 24       	eor	r1, r1
    142e:	cd 56       	subi	r28, 0x6D	; 109
    1430:	df 4f       	sbci	r29, 0xFF	; 255
    1432:	e8 81       	ld	r30, Y
    1434:	c3 59       	subi	r28, 0x93	; 147
    1436:	d0 40       	sbci	r29, 0x00	; 0
    1438:	cc 56       	subi	r28, 0x6C	; 108
    143a:	df 4f       	sbci	r29, 0xFF	; 255
    143c:	f8 81       	ld	r31, Y
    143e:	c4 59       	subi	r28, 0x94	; 148
    1440:	d0 40       	sbci	r29, 0x00	; 0
    1442:	c9 56       	subi	r28, 0x69	; 105
    1444:	df 4f       	sbci	r29, 0xFF	; 255
    1446:	88 81       	ld	r24, Y
    1448:	99 81       	ldd	r25, Y+1	; 0x01
    144a:	c7 59       	subi	r28, 0x97	; 151
    144c:	d0 40       	sbci	r29, 0x00	; 0
				for(uint8_t j=0; j<=9; j++) { // reset the bin counts
					LEdgeSum[j]=0; 
    144e:	11 92       	st	Z+, r1


			if (LEdgeSRange==100 && LEdgeSum[LEMax]>=10) { // one of the 100ms-wide bins has more than 10 consecutive hits
				LEdgeSRange=10; // so we're going to narrow the search with 10ms wide bins ...
				LEdgeSMin=100*LEMax; // ... in the bin that had the most consecutive hits
				for(uint8_t j=0; j<=9; j++) { // reset the bin counts
    1450:	8e 17       	cp	r24, r30
    1452:	9f 07       	cpc	r25, r31
    1454:	e1 f7       	brne	.-8      	; 0x144e <main+0x3f6>
    1456:	08 c0       	rjmp	.+16     	; 0x1468 <main+0x410>
					LEdgeSum[j]=0; 
				}
			}

			if (LEdgeSRange==10) {
    1458:	cf 56       	subi	r28, 0x6F	; 111
    145a:	df 4f       	sbci	r29, 0xFF	; 255
    145c:	b8 81       	ld	r27, Y
    145e:	c1 59       	subi	r28, 0x91	; 145
    1460:	d0 40       	sbci	r29, 0x00	; 0
    1462:	ba 30       	cpi	r27, 0x0A	; 10
    1464:	09 f0       	breq	.+2      	; 0x1468 <main+0x410>
    1466:	9b c0       	rjmp	.+310    	; 0x159e <main+0x546>
				fb.drawVLine(12+(LEdgeSMin/100)*10,25,5); // Mark range that we're searching in with two small v lines
    1468:	92 01       	movw	r18, r4
    146a:	36 95       	lsr	r19
    146c:	27 95       	ror	r18
    146e:	36 95       	lsr	r19
    1470:	27 95       	ror	r18
    1472:	ab e7       	ldi	r26, 0x7B	; 123
    1474:	b4 e1       	ldi	r27, 0x14	; 20
    1476:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__umulhisi3>
    147a:	7c 01       	movw	r14, r24
    147c:	f6 94       	lsr	r15
    147e:	e7 94       	ror	r14
    1480:	6e 2d       	mov	r22, r14
    1482:	66 0f       	add	r22, r22
    1484:	86 2f       	mov	r24, r22
    1486:	88 0f       	add	r24, r24
    1488:	88 0f       	add	r24, r24
    148a:	68 0f       	add	r22, r24
    148c:	64 5f       	subi	r22, 0xF4	; 244
    148e:	25 e0       	ldi	r18, 0x05	; 5
    1490:	49 e1       	ldi	r20, 0x19	; 25
    1492:	8f ea       	ldi	r24, 0xAF	; 175
    1494:	91 e0       	ldi	r25, 0x01	; 1
    1496:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN11Framebuffer9drawVLineEhhh>
				fb.drawVLine(12+((LEdgeSMin/100)+1)*10,25,5);
    149a:	ef ef       	ldi	r30, 0xFF	; 255
    149c:	ee 1a       	sub	r14, r30
    149e:	fe 0a       	sbc	r15, r30
    14a0:	ee 0c       	add	r14, r14
    14a2:	6e 2d       	mov	r22, r14
    14a4:	66 0f       	add	r22, r22
    14a6:	66 0f       	add	r22, r22
    14a8:	6e 0d       	add	r22, r14
    14aa:	64 5f       	subi	r22, 0xF4	; 244
    14ac:	25 e0       	ldi	r18, 0x05	; 5
    14ae:	49 e1       	ldi	r20, 0x19	; 25
    14b0:	8f ea       	ldi	r24, 0xAF	; 175
    14b2:	91 e0       	ldi	r25, 0x01	; 1
    14b4:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN11Framebuffer9drawVLineEhhh>
				LESecsInMode++;
    14b8:	c6 56       	subi	r28, 0x66	; 102
    14ba:	df 4f       	sbci	r29, 0xFF	; 255
    14bc:	f8 81       	ld	r31, Y
    14be:	ca 59       	subi	r28, 0x9A	; 154
    14c0:	d0 40       	sbci	r29, 0x00	; 0
    14c2:	ff 5f       	subi	r31, 0xFF	; 255
    14c4:	c6 56       	subi	r28, 0x66	; 102
    14c6:	df 4f       	sbci	r29, 0xFF	; 255
    14c8:	f8 83       	st	Y, r31
    14ca:	ca 59       	subi	r28, 0x9A	; 154
    14cc:	d0 40       	sbci	r29, 0x00	; 0
				if (LESecsInMode>=20) { // we've been searching in 10ms bins for 30 seconds now, so revert to 100ms bins
    14ce:	f4 31       	cpi	r31, 0x14	; 20
    14d0:	70 f1       	brcs	.+92     	; 0x152e <main+0x4d6>
    14d2:	cd 56       	subi	r28, 0x6D	; 109
    14d4:	df 4f       	sbci	r29, 0xFF	; 255
    14d6:	e8 81       	ld	r30, Y
    14d8:	c3 59       	subi	r28, 0x93	; 147
    14da:	d0 40       	sbci	r29, 0x00	; 0
    14dc:	cc 56       	subi	r28, 0x6C	; 108
    14de:	df 4f       	sbci	r29, 0xFF	; 255
    14e0:	f8 81       	ld	r31, Y
    14e2:	c4 59       	subi	r28, 0x94	; 148
    14e4:	d0 40       	sbci	r29, 0x00	; 0
    14e6:	c9 56       	subi	r28, 0x69	; 105
    14e8:	df 4f       	sbci	r29, 0xFF	; 255
    14ea:	88 81       	ld	r24, Y
    14ec:	99 81       	ldd	r25, Y+1	; 0x01
    14ee:	c7 59       	subi	r28, 0x97	; 151
    14f0:	d0 40       	sbci	r29, 0x00	; 0
					LEdgeSRange=100;
					LEdgeSMin=0;
					for(uint8_t j=0; j<=9; j++) { // reset the bin counts
						LEdgeSum[j]=0;
    14f2:	11 92       	st	Z+, r1
				fb.drawVLine(12+((LEdgeSMin/100)+1)*10,25,5);
				LESecsInMode++;
				if (LESecsInMode>=20) { // we've been searching in 10ms bins for 30 seconds now, so revert to 100ms bins
					LEdgeSRange=100;
					LEdgeSMin=0;
					for(uint8_t j=0; j<=9; j++) { // reset the bin counts
    14f4:	8e 17       	cp	r24, r30
    14f6:	9f 07       	cpc	r25, r31
    14f8:	e1 f7       	brne	.-8      	; 0x14f2 <main+0x49a>
						LEdgeSum[j]=0;
					}	
					TC=TC+(rand() & 0xFF);
    14fa:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <rand>
    14fe:	20 91 ac 01 	lds	r18, 0x01AC
    1502:	30 91 ad 01 	lds	r19, 0x01AD
    1506:	28 0f       	add	r18, r24
    1508:	31 1d       	adc	r19, r1
    150a:	30 93 ad 01 	sts	0x01AD, r19
    150e:	20 93 ac 01 	sts	0x01AC, r18
					LESecsInMode=0;			
    1512:	c6 56       	subi	r28, 0x66	; 102
    1514:	df 4f       	sbci	r29, 0xFF	; 255
    1516:	18 82       	st	Y, r1
    1518:	ca 59       	subi	r28, 0x9A	; 154
    151a:	d0 40       	sbci	r29, 0x00	; 0
			if (LEdgeSRange==10) {
				fb.drawVLine(12+(LEdgeSMin/100)*10,25,5); // Mark range that we're searching in with two small v lines
				fb.drawVLine(12+((LEdgeSMin/100)+1)*10,25,5);
				LESecsInMode++;
				if (LESecsInMode>=20) { // we've been searching in 10ms bins for 30 seconds now, so revert to 100ms bins
					LEdgeSRange=100;
    151c:	24 e6       	ldi	r18, 0x64	; 100
    151e:	cf 56       	subi	r28, 0x6F	; 111
    1520:	df 4f       	sbci	r29, 0xFF	; 255
    1522:	28 83       	st	Y, r18
    1524:	c1 59       	subi	r28, 0x91	; 145
    1526:	d0 40       	sbci	r29, 0x00	; 0
					LEdgeSMin=0;
    1528:	41 2c       	mov	r4, r1
    152a:	51 2c       	mov	r5, r1
    152c:	06 c0       	rjmp	.+12     	; 0x153a <main+0x4e2>
    152e:	8a e0       	ldi	r24, 0x0A	; 10
    1530:	cf 56       	subi	r28, 0x6F	; 111
    1532:	df 4f       	sbci	r29, 0xFF	; 255
    1534:	88 83       	st	Y, r24
    1536:	c1 59       	subi	r28, 0x91	; 145
    1538:	d0 40       	sbci	r29, 0x00	; 0
					}	
					TC=TC+(rand() & 0xFF);
					LESecsInMode=0;			
				}
				
				if (LEdgeSum[LEMax]>=10){  // *** START OF SECOND FOUND ***
    153a:	80 2f       	mov	r24, r16
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	e9 e7       	ldi	r30, 0x79	; 121
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	ec 0f       	add	r30, r28
    1544:	fd 1f       	adc	r31, r29
    1546:	e8 0f       	add	r30, r24
    1548:	f9 1f       	adc	r31, r25
    154a:	20 81       	ld	r18, Z
    154c:	2a 30       	cpi	r18, 0x0A	; 10
    154e:	38 f1       	brcs	.+78     	; 0x159e <main+0x546>
					LEdge=LEdgeSMin+(LEMax*10)+5; // << This is what we'll treat as the start of the second
    1550:	9c 01       	movw	r18, r24
    1552:	22 0f       	add	r18, r18
    1554:	33 1f       	adc	r19, r19
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	88 0f       	add	r24, r24
    1560:	99 1f       	adc	r25, r25
    1562:	82 0f       	add	r24, r18
    1564:	93 1f       	adc	r25, r19
    1566:	05 96       	adiw	r24, 0x05	; 5
    1568:	48 0e       	add	r4, r24
    156a:	59 1e       	adc	r5, r25
    156c:	50 92 ab 01 	sts	0x01AB, r5
    1570:	40 92 aa 01 	sts	0x01AA, r4
    1574:	f4 01       	movw	r30, r8
    1576:	c9 56       	subi	r28, 0x69	; 105
    1578:	df 4f       	sbci	r29, 0xFF	; 255
    157a:	88 81       	ld	r24, Y
    157c:	99 81       	ldd	r25, Y+1	; 0x01
    157e:	c7 59       	subi	r28, 0x97	; 151
    1580:	d0 40       	sbci	r29, 0x00	; 0
					LEdgeSMin=0; // reset these variables ready for next time
					LEdgeSRange=100;
					for(uint8_t j=0; j<=9; j++) { // reset the bin counts
						LEdgeSum[j]=0;
    1582:	11 92       	st	Z+, r1
				
				if (LEdgeSum[LEMax]>=10){  // *** START OF SECOND FOUND ***
					LEdge=LEdgeSMin+(LEMax*10)+5; // << This is what we'll treat as the start of the second
					LEdgeSMin=0; // reset these variables ready for next time
					LEdgeSRange=100;
					for(uint8_t j=0; j<=9; j++) { // reset the bin counts
    1584:	8e 17       	cp	r24, r30
    1586:	9f 07       	cpc	r25, r31
    1588:	e1 f7       	brne	.-8      	; 0x1582 <main+0x52a>
						LEdgeSum[j]=0;
					}		
					LEdgeSearch=false;		
    158a:	10 92 04 01 	sts	0x0104, r1
				}
				
				if (LEdgeSum[LEMax]>=10){  // *** START OF SECOND FOUND ***
					LEdge=LEdgeSMin+(LEMax*10)+5; // << This is what we'll treat as the start of the second
					LEdgeSMin=0; // reset these variables ready for next time
					LEdgeSRange=100;
    158e:	94 e6       	ldi	r25, 0x64	; 100
    1590:	cf 56       	subi	r28, 0x6F	; 111
    1592:	df 4f       	sbci	r29, 0xFF	; 255
    1594:	98 83       	st	Y, r25
    1596:	c1 59       	subi	r28, 0x91	; 145
    1598:	d0 40       	sbci	r29, 0x00	; 0
					LESecsInMode=0;			
				}
				
				if (LEdgeSum[LEMax]>=10){  // *** START OF SECOND FOUND ***
					LEdge=LEdgeSMin+(LEMax*10)+5; // << This is what we'll treat as the start of the second
					LEdgeSMin=0; // reset these variables ready for next time
    159a:	41 2c       	mov	r4, r1
    159c:	51 2c       	mov	r5, r1
		}
		#pragma endregion
		
		// --------------------------------------------------------------------------------------

		if (!LEdgeSearch) {	
    159e:	80 91 04 01 	lds	r24, 0x0104
    15a2:	81 11       	cpse	r24, r1
    15a4:	f0 c0       	rjmp	.+480    	; 0x1786 <main+0x72e>
    15a6:	aa 24       	eor	r10, r10
    15a8:	a3 94       	inc	r10
    15aa:	b1 2c       	mov	r11, r1
    15ac:	e1 2c       	mov	r14, r1
    15ae:	f1 2c       	mov	r15, r1
    15b0:	71 2c       	mov	r7, r1
    15b2:	61 2c       	mov	r6, r1
    15b4:	c1 2c       	mov	r12, r1
    15b6:	d1 2c       	mov	r13, r1
    15b8:	81 2c       	mov	r8, r1
    15ba:	91 2c       	mov	r9, r1
    15bc:	c7 01       	movw	r24, r14
    15be:	8c 01       	movw	r16, r24
    15c0:	05 c0       	rjmp	.+10     	; 0x15cc <main+0x574>
    15c2:	af ef       	ldi	r26, 0xFF	; 255
    15c4:	aa 1a       	sub	r10, r26
    15c6:	ba 0a       	sbc	r11, r26
    15c8:	0f 5f       	subi	r16, 0xFF	; 255
    15ca:	1f 4f       	sbci	r17, 0xFF	; 255
			BitASample=0;
			BitBSample=0;
			BitCSample=0;
			
			for (i=0; i<=999; i++) {
				y++;
    15cc:	bf ef       	ldi	r27, 0xFF	; 255
    15ce:	cb 1a       	sub	r12, r27
    15d0:	db 0a       	sbc	r13, r27
				if (y==8) {
    15d2:	e8 e0       	ldi	r30, 0x08	; 8
    15d4:	ce 16       	cp	r12, r30
    15d6:	d1 04       	cpc	r13, r1
    15d8:	09 f0       	breq	.+2      	; 0x15dc <main+0x584>
    15da:	20 c1       	rjmp	.+576    	; 0x181c <main+0x7c4>
					y=0;
					x++;
    15dc:	ff ef       	ldi	r31, 0xFF	; 255
    15de:	8f 1a       	sub	r8, r31
    15e0:	9f 0a       	sbc	r9, r31
				}

				PinState=CHECK_BIT(buffer[x],y);  // read pin state
    15e2:	f4 01       	movw	r30, r8
    15e4:	eb 5f       	subi	r30, 0xFB	; 251
    15e6:	fe 4f       	sbci	r31, 0xFE	; 254
    15e8:	80 81       	ld	r24, Z
					//TC=TC-i;
					//LEdgeDetect=true;
				//}
							
//				if (PinState) fb.drawPixel(x,y+2); // draw pixel to show raw signal		
				if (PinState) fb.drawPixel(i/10,i%10); // draw pixel to show raw signal
    15ea:	28 2f       	mov	r18, r24
    15ec:	21 70       	andi	r18, 0x01	; 1
    15ee:	f2 2e       	mov	r15, r18
    15f0:	80 ff       	sbrs	r24, 0
    15f2:	3c c0       	rjmp	.+120    	; 0x166c <main+0x614>
			BitCSample=0;
			
			for (i=0; i<=999; i++) {
				y++;
				if (y==8) {
					y=0;
    15f4:	c2 2c       	mov	r12, r2
    15f6:	d3 2c       	mov	r13, r3
					//TC=TC-i;
					//LEdgeDetect=true;
				//}
							
//				if (PinState) fb.drawPixel(x,y+2); // draw pixel to show raw signal		
				if (PinState) fb.drawPixel(i/10,i%10); // draw pixel to show raw signal
    15f8:	98 01       	movw	r18, r16
    15fa:	ad ec       	ldi	r26, 0xCD	; 205
    15fc:	bc ec       	ldi	r27, 0xCC	; 204
    15fe:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__umulhisi3>
    1602:	96 95       	lsr	r25
    1604:	87 95       	ror	r24
    1606:	96 95       	lsr	r25
    1608:	87 95       	ror	r24
    160a:	96 95       	lsr	r25
    160c:	87 95       	ror	r24
    160e:	ac 01       	movw	r20, r24
    1610:	44 0f       	add	r20, r20
    1612:	55 1f       	adc	r21, r21
    1614:	9c 01       	movw	r18, r24
    1616:	22 0f       	add	r18, r18
    1618:	33 1f       	adc	r19, r19
    161a:	22 0f       	add	r18, r18
    161c:	33 1f       	adc	r19, r19
    161e:	22 0f       	add	r18, r18
    1620:	33 1f       	adc	r19, r19
    1622:	24 0f       	add	r18, r20
    1624:	35 1f       	adc	r19, r21
    1626:	a8 01       	movw	r20, r16
    1628:	42 1b       	sub	r20, r18
    162a:	53 0b       	sbc	r21, r19
    162c:	68 2f       	mov	r22, r24
    162e:	8f ea       	ldi	r24, 0xAF	; 175
    1630:	91 e0       	ldi	r25, 0x01	; 1
    1632:	0e 94 0f 05 	call	0xa1e	; 0xa1e <_ZN11Framebuffer9drawPixelEhh>
				
					
				if (PinState && i>=100 && i<=199) BitASample++;
    1636:	04 36       	cpi	r16, 0x64	; 100
    1638:	11 05       	cpc	r17, r1
    163a:	28 f0       	brcs	.+10     	; 0x1646 <main+0x5ee>
    163c:	08 3c       	cpi	r16, 0xC8	; 200
    163e:	11 05       	cpc	r17, r1
    1640:	28 f4       	brcc	.+10     	; 0x164c <main+0x5f4>
    1642:	63 94       	inc	r6
    1644:	09 c0       	rjmp	.+18     	; 0x1658 <main+0x600>
				if (PinState && i>=200 && i<=299) BitBSample++;
    1646:	08 3c       	cpi	r16, 0xC8	; 200
    1648:	11 05       	cpc	r17, r1
    164a:	30 f0       	brcs	.+12     	; 0x1658 <main+0x600>
    164c:	0c 32       	cpi	r16, 0x2C	; 44
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	18 07       	cpc	r17, r24
    1652:	30 f4       	brcc	.+12     	; 0x1660 <main+0x608>
    1654:	73 94       	inc	r7
    1656:	0c c0       	rjmp	.+24     	; 0x1670 <main+0x618>
				if (PinState && i>=300 && i<=499) BitCSample++;
    1658:	0c 32       	cpi	r16, 0x2C	; 44
    165a:	91 e0       	ldi	r25, 0x01	; 1
    165c:	19 07       	cpc	r17, r25
    165e:	40 f0       	brcs	.+16     	; 0x1670 <main+0x618>
    1660:	04 3f       	cpi	r16, 0xF4	; 244
    1662:	a1 e0       	ldi	r26, 0x01	; 1
    1664:	1a 07       	cpc	r17, r26
    1666:	20 f4       	brcc	.+8      	; 0x1670 <main+0x618>
    1668:	e3 94       	inc	r14
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <main+0x618>
			BitCSample=0;
			
			for (i=0; i<=999; i++) {
				y++;
				if (y==8) {
					y=0;
    166c:	c2 2c       	mov	r12, r2
    166e:	d3 2c       	mov	r13, r3
					
				if (PinState && i>=100 && i<=199) BitASample++;
				if (PinState && i>=200 && i<=299) BitBSample++;
				if (PinState && i>=300 && i<=499) BitCSample++;
				
				if (i==500) {  // resolve samples into bits
    1670:	04 3f       	cpi	r16, 0xF4	; 244
    1672:	b1 e0       	ldi	r27, 0x01	; 1
    1674:	1b 07       	cpc	r17, r27
    1676:	09 f0       	breq	.+2      	; 0x167a <main+0x622>
    1678:	4c c0       	rjmp	.+152    	; 0x1712 <main+0x6ba>
					if (BitASample>=85) BitA[SigSecond]=true;
    167a:	e4 e5       	ldi	r30, 0x54	; 84
    167c:	e6 15       	cp	r30, r6
    167e:	68 f4       	brcc	.+26     	; 0x169a <main+0x642>
    1680:	ed e3       	ldi	r30, 0x3D	; 61
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	ec 0f       	add	r30, r28
    1686:	fd 1f       	adc	r31, r29
    1688:	c7 56       	subi	r28, 0x67	; 103
    168a:	df 4f       	sbci	r29, 0xFF	; 255
    168c:	28 81       	ld	r18, Y
    168e:	c9 59       	subi	r28, 0x99	; 153
    1690:	d0 40       	sbci	r29, 0x00	; 0
    1692:	e2 0f       	add	r30, r18
    1694:	f1 1d       	adc	r31, r1
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	80 83       	st	Z, r24
					if (BitBSample>=85) BitB[SigSecond]=true;
    169a:	94 e5       	ldi	r25, 0x54	; 84
    169c:	97 15       	cp	r25, r7
    169e:	68 f4       	brcc	.+26     	; 0x16ba <main+0x662>
    16a0:	e1 e0       	ldi	r30, 0x01	; 1
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	ec 0f       	add	r30, r28
    16a6:	fd 1f       	adc	r31, r29
    16a8:	c7 56       	subi	r28, 0x67	; 103
    16aa:	df 4f       	sbci	r29, 0xFF	; 255
    16ac:	a8 81       	ld	r26, Y
    16ae:	c9 59       	subi	r28, 0x99	; 153
    16b0:	d0 40       	sbci	r29, 0x00	; 0
    16b2:	ea 0f       	add	r30, r26
    16b4:	f1 1d       	adc	r31, r1
    16b6:	b1 e0       	ldi	r27, 0x01	; 1
    16b8:	b0 83       	st	Z, r27
					if (BitCSample>=170) BitC=true;
    16ba:	e9 ea       	ldi	r30, 0xA9	; 169
    16bc:	ee 15       	cp	r30, r14
    16be:	30 f4       	brcc	.+12     	; 0x16cc <main+0x674>
    16c0:	f1 e0       	ldi	r31, 0x01	; 1
    16c2:	c5 56       	subi	r28, 0x65	; 101
    16c4:	df 4f       	sbci	r29, 0xFF	; 255
    16c6:	f8 83       	st	Y, r31
    16c8:	cb 59       	subi	r28, 0x9B	; 155
    16ca:	d0 40       	sbci	r29, 0x00	; 0
					BitASample=0; // reset samples ready for next second
					BitBSample=0;
					BitCSample=0;
					if (!MMarkFound && BitA[0] && BitB[0] && BitC) { // test for minute marker if not found
    16cc:	cb 56       	subi	r28, 0x6B	; 107
    16ce:	df 4f       	sbci	r29, 0xFF	; 255
    16d0:	28 81       	ld	r18, Y
    16d2:	c5 59       	subi	r28, 0x95	; 149
    16d4:	d0 40       	sbci	r29, 0x00	; 0
    16d6:	21 11       	cpse	r18, r1
    16d8:	9d c0       	rjmp	.+314    	; 0x1814 <main+0x7bc>
    16da:	8d ad       	ldd	r24, Y+61	; 0x3d
    16dc:	88 23       	and	r24, r24
    16de:	09 f4       	brne	.+2      	; 0x16e2 <main+0x68a>
    16e0:	99 c0       	rjmp	.+306    	; 0x1814 <main+0x7bc>
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	88 23       	and	r24, r24
    16e6:	09 f4       	brne	.+2      	; 0x16ea <main+0x692>
    16e8:	95 c0       	rjmp	.+298    	; 0x1814 <main+0x7bc>
    16ea:	c5 56       	subi	r28, 0x65	; 101
    16ec:	df 4f       	sbci	r29, 0xFF	; 255
    16ee:	88 81       	ld	r24, Y
    16f0:	cb 59       	subi	r28, 0x9B	; 155
    16f2:	d0 40       	sbci	r29, 0x00	; 0
    16f4:	88 23       	and	r24, r24
    16f6:	09 f4       	brne	.+2      	; 0x16fa <main+0x6a2>
    16f8:	8d c0       	rjmp	.+282    	; 0x1814 <main+0x7bc>
						MMarkFound=true;
						SigSecond=0;
    16fa:	c7 56       	subi	r28, 0x67	; 103
    16fc:	df 4f       	sbci	r29, 0xFF	; 255
    16fe:	18 82       	st	Y, r1
    1700:	c9 59       	subi	r28, 0x99	; 153
    1702:	d0 40       	sbci	r29, 0x00	; 0
					if (BitCSample>=170) BitC=true;
					BitASample=0; // reset samples ready for next second
					BitBSample=0;
					BitCSample=0;
					if (!MMarkFound && BitA[0] && BitB[0] && BitC) { // test for minute marker if not found
						MMarkFound=true;
    1704:	91 e0       	ldi	r25, 0x01	; 1
    1706:	cb 56       	subi	r28, 0x6B	; 107
    1708:	df 4f       	sbci	r29, 0xFF	; 255
    170a:	98 83       	st	Y, r25
    170c:	c5 59       	subi	r28, 0x95	; 149
    170e:	d0 40       	sbci	r29, 0x00	; 0
    1710:	81 c0       	rjmp	.+258    	; 0x1814 <main+0x7bc>
			
			BitASample=0;
			BitBSample=0;
			BitCSample=0;
			
			for (i=0; i<=999; i++) {
    1712:	a8 ee       	ldi	r26, 0xE8	; 232
    1714:	aa 16       	cp	r10, r26
    1716:	a3 e0       	ldi	r26, 0x03	; 3
    1718:	ba 06       	cpc	r11, r26
    171a:	08 f4       	brcc	.+2      	; 0x171e <main+0x6c6>
    171c:	52 cf       	rjmp	.-348    	; 0x15c2 <main+0x56a>
    171e:	1f 2d       	mov	r17, r15
					}
				}
			
			
			}
			fb.drawVLine(9,10,3); // draw bit boundaries in signal display area
    1720:	23 e0       	ldi	r18, 0x03	; 3
    1722:	4a e0       	ldi	r20, 0x0A	; 10
    1724:	69 e0       	ldi	r22, 0x09	; 9
    1726:	8f ea       	ldi	r24, 0xAF	; 175
    1728:	91 e0       	ldi	r25, 0x01	; 1
    172a:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN11Framebuffer9drawVLineEhhh>
			fb.drawVLine(19,10,3);
    172e:	23 e0       	ldi	r18, 0x03	; 3
    1730:	4a e0       	ldi	r20, 0x0A	; 10
    1732:	63 e1       	ldi	r22, 0x13	; 19
    1734:	8f ea       	ldi	r24, 0xAF	; 175
    1736:	91 e0       	ldi	r25, 0x01	; 1
    1738:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN11Framebuffer9drawVLineEhhh>
			fb.drawVLine(29,10,3);
    173c:	23 e0       	ldi	r18, 0x03	; 3
    173e:	4a e0       	ldi	r20, 0x0A	; 10
    1740:	6d e1       	ldi	r22, 0x1D	; 29
    1742:	8f ea       	ldi	r24, 0xAF	; 175
    1744:	91 e0       	ldi	r25, 0x01	; 1
    1746:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN11Framebuffer9drawVLineEhhh>
			fb.drawVLine(49,10,3);	
    174a:	23 e0       	ldi	r18, 0x03	; 3
    174c:	4a e0       	ldi	r20, 0x0A	; 10
    174e:	61 e3       	ldi	r22, 0x31	; 49
    1750:	8f ea       	ldi	r24, 0xAF	; 175
    1752:	91 e0       	ldi	r25, 0x01	; 1
    1754:	0e 94 2b 05 	call	0xa56	; 0xa56 <_ZN11Framebuffer9drawVLineEhhh>
			
			if (MMarkFound) {
    1758:	cb 56       	subi	r28, 0x6B	; 107
    175a:	df 4f       	sbci	r29, 0xFF	; 255
    175c:	b8 81       	ld	r27, Y
    175e:	c5 59       	subi	r28, 0x95	; 149
    1760:	d0 40       	sbci	r29, 0x00	; 0
    1762:	bb 23       	and	r27, r27
    1764:	81 f0       	breq	.+32     	; 0x1786 <main+0x72e>
				fb.drawRectangle(0,60,3,63,true); // draw a filled square bottom left corner if minute marker found 
    1766:	ee 24       	eor	r14, r14
    1768:	e3 94       	inc	r14
    176a:	0f e3       	ldi	r16, 0x3F	; 63
    176c:	23 e0       	ldi	r18, 0x03	; 3
    176e:	4c e3       	ldi	r20, 0x3C	; 60
    1770:	60 e0       	ldi	r22, 0x00	; 0
    1772:	8f ea       	ldi	r24, 0xAF	; 175
    1774:	91 e0       	ldi	r25, 0x01	; 1
    1776:	0e 94 8e 05 	call	0xb1c	; 0xb1c <_ZN11Framebuffer13drawRectangleEhhhhh>
				SigSecond=SigSecond+1;
    177a:	e1 e0       	ldi	r30, 0x01	; 1
    177c:	c7 56       	subi	r28, 0x67	; 103
    177e:	df 4f       	sbci	r29, 0xFF	; 255
    1780:	e8 83       	st	Y, r30
    1782:	c9 59       	subi	r28, 0x99	; 153
    1784:	d0 40       	sbci	r29, 0x00	; 0
		}
		// --------------------------------------------------------------------------------------


		
		fb.show(); // update OLED screen
    1786:	8f ea       	ldi	r24, 0xAF	; 175
    1788:	91 e0       	ldi	r25, 0x01	; 1
    178a:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <_ZN11Framebuffer4showEv>
		
		
	}
    178e:	13 cd       	rjmp	.-1498   	; 0x11b6 <main+0x15e>
					x++;
				}
				PrevPinState=PinState;
				PinState=CHECK_BIT(buffer[x],y);  // read pin state
			
				if (i>=LEdgeSMin && i<=LEdgeSMin+(10*LEdgeSRange)-1) // id ms counter within Leading Edge search range
    1790:	cf 56       	subi	r28, 0x6F	; 111
    1792:	df 4f       	sbci	r29, 0xFF	; 255
    1794:	f8 81       	ld	r31, Y
    1796:	c1 59       	subi	r28, 0x91	; 145
    1798:	d0 40       	sbci	r29, 0x00	; 0
    179a:	8f 2f       	mov	r24, r31
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	4c 01       	movw	r8, r24
    17a0:	88 0c       	add	r8, r8
    17a2:	99 1c       	adc	r9, r9
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	88 0f       	add	r24, r24
    17aa:	99 1f       	adc	r25, r25
    17ac:	88 0f       	add	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	88 0d       	add	r24, r8
    17b2:	99 1d       	adc	r25, r9
    17b4:	42 01       	movw	r8, r4
    17b6:	21 e0       	ldi	r18, 0x01	; 1
    17b8:	82 1a       	sub	r8, r18
    17ba:	91 08       	sbc	r9, r1
    17bc:	88 0e       	add	r8, r24
    17be:	99 1e       	adc	r9, r25
    17c0:	0c e0       	ldi	r16, 0x0C	; 12
    17c2:	04 19       	sub	r16, r4
    17c4:	21 2f       	mov	r18, r17
    17c6:	e1 2c       	mov	r14, r1
    17c8:	f1 2c       	mov	r15, r1
			}
			
			x=0;  // Buffer byte counter
			y=0;  // Buffer bit counter
			for (i=0; i<=999; i++) {   // millisecond counter
				y++;
    17ca:	cc 24       	eor	r12, r12
    17cc:	c3 94       	inc	r12
    17ce:	d1 2c       	mov	r13, r1
					x++;
				}
				PrevPinState=PinState;
				PinState=CHECK_BIT(buffer[x],y);  // read pin state
			
				if (i>=LEdgeSMin && i<=LEdgeSMin+(10*LEdgeSRange)-1) // id ms counter within Leading Edge search range
    17d0:	a1 2c       	mov	r10, r1
    17d2:	b1 2c       	mov	r11, r1
				{
					if (!PrevPinState && PinState) 	LEdgeCount[(i-LEdgeSMin)/LEdgeSRange]++; // leading Edge found, increment counter for current bin
    17d4:	6f 2e       	mov	r6, r31
    17d6:	71 2c       	mov	r7, r1
    17d8:	c1 57       	subi	r28, 0x71	; 113
    17da:	df 4f       	sbci	r29, 0xFF	; 255
    17dc:	79 82       	std	Y+1, r7	; 0x01
    17de:	68 82       	st	Y, r6
    17e0:	cf 58       	subi	r28, 0x8F	; 143
    17e2:	d0 40       	sbci	r29, 0x00	; 0
    17e4:	70 2e       	mov	r7, r16
    17e6:	0f 2f       	mov	r16, r31
    17e8:	40 cd       	rjmp	.-1408   	; 0x126a <main+0x212>
    17ea:	ce 01       	movw	r24, r28
    17ec:	87 58       	subi	r24, 0x87	; 135
    17ee:	9f 4f       	sbci	r25, 0xFF	; 255
    17f0:	4c 01       	movw	r8, r24
    17f2:	de 01       	movw	r26, r28
    17f4:	ad 57       	subi	r26, 0x7D	; 125
    17f6:	bf 4f       	sbci	r27, 0xFF	; 255
    17f8:	7d 01       	movw	r14, r26
				fb.drawRectangle(10,31,113,40);
			}
			
			x=0;  // Buffer byte counter
			y=0;  // Buffer bit counter
			for (i=0; i<=999; i++) {   // millisecond counter
    17fa:	cd 56       	subi	r28, 0x6D	; 109
    17fc:	df 4f       	sbci	r29, 0xFF	; 255
    17fe:	a8 80       	ld	r10, Y
    1800:	c3 59       	subi	r28, 0x93	; 147
    1802:	d0 40       	sbci	r29, 0x00	; 0
    1804:	cc 56       	subi	r28, 0x6C	; 108
    1806:	df 4f       	sbci	r29, 0xFF	; 255
    1808:	b8 80       	ld	r11, Y
    180a:	c4 59       	subi	r28, 0x94	; 148
    180c:	d0 40       	sbci	r29, 0x00	; 0
    180e:	6c e0       	ldi	r22, 0x0C	; 12
    1810:	71 2e       	mov	r7, r17
    1812:	91 cd       	rjmp	.-1246   	; 0x1336 <main+0x2de>
					LESecsInMode=0;			
				}
				
				if (LEdgeSum[LEMax]>=10){  // *** START OF SECOND FOUND ***
					LEdge=LEdgeSMin+(LEMax*10)+5; // << This is what we'll treat as the start of the second
					LEdgeSMin=0; // reset these variables ready for next time
    1814:	e1 2c       	mov	r14, r1
    1816:	71 2c       	mov	r7, r1
    1818:	61 2c       	mov	r6, r1
    181a:	d3 ce       	rjmp	.-602    	; 0x15c2 <main+0x56a>
				if (y==8) {
					y=0;
					x++;
				}

				PinState=CHECK_BIT(buffer[x],y);  // read pin state
    181c:	f4 01       	movw	r30, r8
    181e:	eb 5f       	subi	r30, 0xFB	; 251
    1820:	fe 4f       	sbci	r31, 0xFE	; 254
    1822:	80 81       	ld	r24, Z
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	0c 2c       	mov	r0, r12
    1828:	02 c0       	rjmp	.+4      	; 0x182e <main+0x7d6>
    182a:	95 95       	asr	r25
    182c:	87 95       	ror	r24
    182e:	0a 94       	dec	r0
    1830:	e2 f7       	brpl	.-8      	; 0x182a <main+0x7d2>
					//TC=TC-i;
					//LEdgeDetect=true;
				//}
							
//				if (PinState) fb.drawPixel(x,y+2); // draw pixel to show raw signal		
				if (PinState) fb.drawPixel(i/10,i%10); // draw pixel to show raw signal
    1832:	b8 2f       	mov	r27, r24
    1834:	b1 70       	andi	r27, 0x01	; 1
    1836:	fb 2e       	mov	r15, r27
    1838:	80 ff       	sbrs	r24, 0
    183a:	1a cf       	rjmp	.-460    	; 0x1670 <main+0x618>
    183c:	dd ce       	rjmp	.-582    	; 0x15f8 <main+0x5a0>

0000183e <_GLOBAL__sub_I_fb>:
const uint8_t TILDE = 93;

#pragma endregion

// Global variables
Framebuffer fb;
    183e:	8f ea       	ldi	r24, 0xAF	; 175
    1840:	91 e0       	ldi	r25, 0x01	; 1
    1842:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <_ZN11FramebufferC1Ev>
    1846:	08 95       	ret

00001848 <_ZN7SSD130611sendCommandEh>:

    // Turn display back on
    sendCommand(SSD1306_DISPLAYON);
}

void SSD1306::sendCommand(uint8_t command) {
    1848:	1f 93       	push	r17
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
    184e:	ec 01       	movw	r28, r24
    1850:	16 2f       	mov	r17, r22
    i2c.start();
    1852:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN3I2C5startEv>
    i2c.write(0x00);
    1856:	60 e0       	ldi	r22, 0x00	; 0
    1858:	ce 01       	movw	r24, r28
    185a:	0e 94 28 06 	call	0xc50	; 0xc50 <_ZN3I2C5writeEh>
    i2c.write(command);
    185e:	61 2f       	mov	r22, r17
    1860:	ce 01       	movw	r24, r28
    1862:	0e 94 28 06 	call	0xc50	; 0xc50 <_ZN3I2C5writeEh>
    i2c.stop();
    1866:	ce 01       	movw	r24, r28
    1868:	0e 94 3d 06 	call	0xc7a	; 0xc7a <_ZN3I2C4stopEv>
}
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	1f 91       	pop	r17
    1872:	08 95       	ret

00001874 <_ZN7SSD1306C1Ev>:
#include "simulator/I2C.h"
#else
#include "I2C.h"
#endif

SSD1306::SSD1306() {
    1874:	cf 93       	push	r28
    1876:	df 93       	push	r29
    1878:	ec 01       	movw	r28, r24
    187a:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <_ZN3I2CC1Ev>
    i2c.init(SSD1306_DEFAULT_ADDRESS);
    187e:	68 e7       	ldi	r22, 0x78	; 120
    1880:	ce 01       	movw	r24, r28
    1882:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN3I2C4initEh>

    // Turn display off
    sendCommand(SSD1306_DISPLAYOFF);
    1886:	6e ea       	ldi	r22, 0xAE	; 174
    1888:	ce 01       	movw	r24, r28
    188a:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_SETDISPLAYCLOCKDIV);
    188e:	65 ed       	ldi	r22, 0xD5	; 213
    1890:	ce 01       	movw	r24, r28
    1892:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x80);
    1896:	60 e8       	ldi	r22, 0x80	; 128
    1898:	ce 01       	movw	r24, r28
    189a:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_SETMULTIPLEX);
    189e:	68 ea       	ldi	r22, 0xA8	; 168
    18a0:	ce 01       	movw	r24, r28
    18a2:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x3F);
    18a6:	6f e3       	ldi	r22, 0x3F	; 63
    18a8:	ce 01       	movw	r24, r28
    18aa:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>
    
    sendCommand(SSD1306_SETDISPLAYOFFSET);
    18ae:	63 ed       	ldi	r22, 0xD3	; 211
    18b0:	ce 01       	movw	r24, r28
    18b2:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x00);
    18b6:	60 e0       	ldi	r22, 0x00	; 0
    18b8:	ce 01       	movw	r24, r28
    18ba:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>
    
    sendCommand(SSD1306_SETSTARTLINE | 0x00);
    18be:	60 e4       	ldi	r22, 0x40	; 64
    18c0:	ce 01       	movw	r24, r28
    18c2:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>
    
    // We use internal charge pump
    sendCommand(SSD1306_CHARGEPUMP);
    18c6:	6d e8       	ldi	r22, 0x8D	; 141
    18c8:	ce 01       	movw	r24, r28
    18ca:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x14);
    18ce:	64 e1       	ldi	r22, 0x14	; 20
    18d0:	ce 01       	movw	r24, r28
    18d2:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>
    
    // Horizontal memory mode
    sendCommand(SSD1306_MEMORYMODE);
    18d6:	60 e2       	ldi	r22, 0x20	; 32
    18d8:	ce 01       	movw	r24, r28
    18da:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x00);
    18de:	60 e0       	ldi	r22, 0x00	; 0
    18e0:	ce 01       	movw	r24, r28
    18e2:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>
    
    sendCommand(SSD1306_SEGREMAP | 0x1);
    18e6:	61 ea       	ldi	r22, 0xA1	; 161
    18e8:	ce 01       	movw	r24, r28
    18ea:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_COMSCANDEC);
    18ee:	68 ec       	ldi	r22, 0xC8	; 200
    18f0:	ce 01       	movw	r24, r28
    18f2:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_SETCOMPINS);
    18f6:	6a ed       	ldi	r22, 0xDA	; 218
    18f8:	ce 01       	movw	r24, r28
    18fa:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x12);
    18fe:	62 e1       	ldi	r22, 0x12	; 18
    1900:	ce 01       	movw	r24, r28
    1902:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>

    // Max contrast
    sendCommand(SSD1306_SETCONTRAST);
    1906:	61 e8       	ldi	r22, 0x81	; 129
    1908:	ce 01       	movw	r24, r28
    190a:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>
    sendCommand(0xCF);
    190e:	6f ec       	ldi	r22, 0xCF	; 207
    1910:	ce 01       	movw	r24, r28
    1912:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_SETPRECHARGE);
    1916:	69 ed       	ldi	r22, 0xD9	; 217
    1918:	ce 01       	movw	r24, r28
    191a:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>
    sendCommand(0xF1);
    191e:	61 ef       	ldi	r22, 0xF1	; 241
    1920:	ce 01       	movw	r24, r28
    1922:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_SETVCOMDETECT);
    1926:	6b ed       	ldi	r22, 0xDB	; 219
    1928:	ce 01       	movw	r24, r28
    192a:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x40);
    192e:	60 e4       	ldi	r22, 0x40	; 64
    1930:	ce 01       	movw	r24, r28
    1932:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_DISPLAYALLON_RESUME);
    1936:	64 ea       	ldi	r22, 0xA4	; 164
    1938:	ce 01       	movw	r24, r28
    193a:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>

    // Non-inverted display
    sendCommand(SSD1306_NORMALDISPLAY);
    193e:	66 ea       	ldi	r22, 0xA6	; 166
    1940:	ce 01       	movw	r24, r28
    1942:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>

    // Turn display back on
    sendCommand(SSD1306_DISPLAYON);
    1946:	6f ea       	ldi	r22, 0xAF	; 175
    1948:	ce 01       	movw	r24, r28
    194a:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>
}
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	08 95       	ret

00001954 <_ZN7SSD130615sendFramebufferEPh>:
    } else {
        sendCommand(SSD1306_NORMALDISPLAY);
    }
}

void SSD1306::sendFramebuffer(uint8_t *buffer) {
    1954:	cf 92       	push	r12
    1956:	df 92       	push	r13
    1958:	ef 92       	push	r14
    195a:	ff 92       	push	r15
    195c:	0f 93       	push	r16
    195e:	1f 93       	push	r17
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
    1964:	08 2f       	mov	r16, r24
    1966:	19 2f       	mov	r17, r25
    1968:	7b 01       	movw	r14, r22
    sendCommand(SSD1306_COLUMNADDR);
    196a:	61 e2       	ldi	r22, 0x21	; 33
    196c:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x00);
    1970:	60 e0       	ldi	r22, 0x00	; 0
    1972:	80 2f       	mov	r24, r16
    1974:	91 2f       	mov	r25, r17
    1976:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x7F);
    197a:	6f e7       	ldi	r22, 0x7F	; 127
    197c:	80 2f       	mov	r24, r16
    197e:	91 2f       	mov	r25, r17
    1980:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_PAGEADDR);
    1984:	62 e2       	ldi	r22, 0x22	; 34
    1986:	80 2f       	mov	r24, r16
    1988:	91 2f       	mov	r25, r17
    198a:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x00);
    198e:	60 e0       	ldi	r22, 0x00	; 0
    1990:	80 2f       	mov	r24, r16
    1992:	91 2f       	mov	r25, r17
    1994:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x07);
    1998:	67 e0       	ldi	r22, 0x07	; 7
    199a:	80 2f       	mov	r24, r16
    199c:	91 2f       	mov	r25, r17
    199e:	0e 94 24 0c 	call	0x1848	; 0x1848 <_ZN7SSD130611sendCommandEh>
    19a2:	e7 01       	movw	r28, r14
    19a4:	8c ef       	ldi	r24, 0xFC	; 252
    19a6:	f8 1a       	sub	r15, r24

    // We have to send the buffer as 16 bytes packets
    // Our buffer is 1024 bytes long, 1024/16 = 64
    // We have to send 64 packets
    for (uint8_t packet = 0; packet < 64; packet++) {
        i2c.start();
    19a8:	80 2f       	mov	r24, r16
    19aa:	91 2f       	mov	r25, r17
    19ac:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <_ZN3I2C5startEv>
        i2c.write(0x40);
    19b0:	60 e4       	ldi	r22, 0x40	; 64
    19b2:	80 2f       	mov	r24, r16
    19b4:	91 2f       	mov	r25, r17
    19b6:	0e 94 28 06 	call	0xc50	; 0xc50 <_ZN3I2C5writeEh>
    19ba:	6e 01       	movw	r12, r28
    19bc:	80 e1       	ldi	r24, 0x10	; 16
    19be:	c8 0e       	add	r12, r24
    19c0:	d1 1c       	adc	r13, r1
        for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
            i2c.write(buffer[packet*16+packet_byte]);
    19c2:	69 91       	ld	r22, Y+
    19c4:	80 2f       	mov	r24, r16
    19c6:	91 2f       	mov	r25, r17
    19c8:	0e 94 28 06 	call	0xc50	; 0xc50 <_ZN3I2C5writeEh>
    // Our buffer is 1024 bytes long, 1024/16 = 64
    // We have to send 64 packets
    for (uint8_t packet = 0; packet < 64; packet++) {
        i2c.start();
        i2c.write(0x40);
        for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
    19cc:	cc 15       	cp	r28, r12
    19ce:	dd 05       	cpc	r29, r13
    19d0:	c1 f7       	brne	.-16     	; 0x19c2 <_ZN7SSD130615sendFramebufferEPh+0x6e>
            i2c.write(buffer[packet*16+packet_byte]);
        }
        i2c.stop();
    19d2:	80 2f       	mov	r24, r16
    19d4:	91 2f       	mov	r25, r17
    19d6:	0e 94 3d 06 	call	0xc7a	; 0xc7a <_ZN3I2C4stopEv>
    19da:	e6 01       	movw	r28, r12
    sendCommand(0x07);

    // We have to send the buffer as 16 bytes packets
    // Our buffer is 1024 bytes long, 1024/16 = 64
    // We have to send 64 packets
    for (uint8_t packet = 0; packet < 64; packet++) {
    19dc:	ce 14       	cp	r12, r14
    19de:	df 04       	cpc	r13, r15
    19e0:	19 f7       	brne	.-58     	; 0x19a8 <_ZN7SSD130615sendFramebufferEPh+0x54>
        for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
            i2c.write(buffer[packet*16+packet_byte]);
        }
        i2c.stop();
    }
    19e2:	df 91       	pop	r29
    19e4:	cf 91       	pop	r28
    19e6:	1f 91       	pop	r17
    19e8:	0f 91       	pop	r16
    19ea:	ff 90       	pop	r15
    19ec:	ef 90       	pop	r14
    19ee:	df 90       	pop	r13
    19f0:	cf 90       	pop	r12
    19f2:	08 95       	ret

000019f4 <__udivmodhi4>:
    19f4:	aa 1b       	sub	r26, r26
    19f6:	bb 1b       	sub	r27, r27
    19f8:	51 e1       	ldi	r21, 0x11	; 17
    19fa:	07 c0       	rjmp	.+14     	; 0x1a0a <__udivmodhi4_ep>

000019fc <__udivmodhi4_loop>:
    19fc:	aa 1f       	adc	r26, r26
    19fe:	bb 1f       	adc	r27, r27
    1a00:	a6 17       	cp	r26, r22
    1a02:	b7 07       	cpc	r27, r23
    1a04:	10 f0       	brcs	.+4      	; 0x1a0a <__udivmodhi4_ep>
    1a06:	a6 1b       	sub	r26, r22
    1a08:	b7 0b       	sbc	r27, r23

00001a0a <__udivmodhi4_ep>:
    1a0a:	88 1f       	adc	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	5a 95       	dec	r21
    1a10:	a9 f7       	brne	.-22     	; 0x19fc <__udivmodhi4_loop>
    1a12:	80 95       	com	r24
    1a14:	90 95       	com	r25
    1a16:	bc 01       	movw	r22, r24
    1a18:	cd 01       	movw	r24, r26
    1a1a:	08 95       	ret

00001a1c <__tablejump2__>:
    1a1c:	ee 0f       	add	r30, r30
    1a1e:	ff 1f       	adc	r31, r31
    1a20:	05 90       	lpm	r0, Z+
    1a22:	f4 91       	lpm	r31, Z
    1a24:	e0 2d       	mov	r30, r0
    1a26:	09 94       	ijmp

00001a28 <__umulhisi3>:
    1a28:	a2 9f       	mul	r26, r18
    1a2a:	b0 01       	movw	r22, r0
    1a2c:	b3 9f       	mul	r27, r19
    1a2e:	c0 01       	movw	r24, r0
    1a30:	a3 9f       	mul	r26, r19
    1a32:	70 0d       	add	r23, r0
    1a34:	81 1d       	adc	r24, r1
    1a36:	11 24       	eor	r1, r1
    1a38:	91 1d       	adc	r25, r1
    1a3a:	b2 9f       	mul	r27, r18
    1a3c:	70 0d       	add	r23, r0
    1a3e:	81 1d       	adc	r24, r1
    1a40:	11 24       	eor	r1, r1
    1a42:	91 1d       	adc	r25, r1
    1a44:	08 95       	ret

00001a46 <do_rand>:
    1a46:	8f 92       	push	r8
    1a48:	9f 92       	push	r9
    1a4a:	af 92       	push	r10
    1a4c:	bf 92       	push	r11
    1a4e:	cf 92       	push	r12
    1a50:	df 92       	push	r13
    1a52:	ef 92       	push	r14
    1a54:	ff 92       	push	r15
    1a56:	cf 93       	push	r28
    1a58:	df 93       	push	r29
    1a5a:	ec 01       	movw	r28, r24
    1a5c:	68 81       	ld	r22, Y
    1a5e:	79 81       	ldd	r23, Y+1	; 0x01
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	9b 81       	ldd	r25, Y+3	; 0x03
    1a64:	61 15       	cp	r22, r1
    1a66:	71 05       	cpc	r23, r1
    1a68:	81 05       	cpc	r24, r1
    1a6a:	91 05       	cpc	r25, r1
    1a6c:	21 f4       	brne	.+8      	; 0x1a76 <do_rand+0x30>
    1a6e:	64 e2       	ldi	r22, 0x24	; 36
    1a70:	79 ed       	ldi	r23, 0xD9	; 217
    1a72:	8b e5       	ldi	r24, 0x5B	; 91
    1a74:	97 e0       	ldi	r25, 0x07	; 7
    1a76:	2d e1       	ldi	r18, 0x1D	; 29
    1a78:	33 ef       	ldi	r19, 0xF3	; 243
    1a7a:	41 e0       	ldi	r20, 0x01	; 1
    1a7c:	50 e0       	ldi	r21, 0x00	; 0
    1a7e:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <__divmodsi4>
    1a82:	49 01       	movw	r8, r18
    1a84:	5a 01       	movw	r10, r20
    1a86:	9b 01       	movw	r18, r22
    1a88:	ac 01       	movw	r20, r24
    1a8a:	a7 ea       	ldi	r26, 0xA7	; 167
    1a8c:	b1 e4       	ldi	r27, 0x41	; 65
    1a8e:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__muluhisi3>
    1a92:	6b 01       	movw	r12, r22
    1a94:	7c 01       	movw	r14, r24
    1a96:	ac ee       	ldi	r26, 0xEC	; 236
    1a98:	b4 ef       	ldi	r27, 0xF4	; 244
    1a9a:	a5 01       	movw	r20, r10
    1a9c:	94 01       	movw	r18, r8
    1a9e:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <__mulohisi3>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	8c 0d       	add	r24, r12
    1aa8:	9d 1d       	adc	r25, r13
    1aaa:	ae 1d       	adc	r26, r14
    1aac:	bf 1d       	adc	r27, r15
    1aae:	b7 ff       	sbrs	r27, 7
    1ab0:	03 c0       	rjmp	.+6      	; 0x1ab8 <do_rand+0x72>
    1ab2:	01 97       	sbiw	r24, 0x01	; 1
    1ab4:	a1 09       	sbc	r26, r1
    1ab6:	b0 48       	sbci	r27, 0x80	; 128
    1ab8:	88 83       	st	Y, r24
    1aba:	99 83       	std	Y+1, r25	; 0x01
    1abc:	aa 83       	std	Y+2, r26	; 0x02
    1abe:	bb 83       	std	Y+3, r27	; 0x03
    1ac0:	9f 77       	andi	r25, 0x7F	; 127
    1ac2:	df 91       	pop	r29
    1ac4:	cf 91       	pop	r28
    1ac6:	ff 90       	pop	r15
    1ac8:	ef 90       	pop	r14
    1aca:	df 90       	pop	r13
    1acc:	cf 90       	pop	r12
    1ace:	bf 90       	pop	r11
    1ad0:	af 90       	pop	r10
    1ad2:	9f 90       	pop	r9
    1ad4:	8f 90       	pop	r8
    1ad6:	08 95       	ret

00001ad8 <rand_r>:
    1ad8:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <do_rand>
    1adc:	08 95       	ret

00001ade <rand>:
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	91 e0       	ldi	r25, 0x01	; 1
    1ae2:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <do_rand>
    1ae6:	08 95       	ret

00001ae8 <srand>:
    1ae8:	a0 e0       	ldi	r26, 0x00	; 0
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	80 93 00 01 	sts	0x0100, r24
    1af0:	90 93 01 01 	sts	0x0101, r25
    1af4:	a0 93 02 01 	sts	0x0102, r26
    1af8:	b0 93 03 01 	sts	0x0103, r27
    1afc:	08 95       	ret

00001afe <__divmodsi4>:
    1afe:	05 2e       	mov	r0, r21
    1b00:	97 fb       	bst	r25, 7
    1b02:	1e f4       	brtc	.+6      	; 0x1b0a <__divmodsi4+0xc>
    1b04:	00 94       	com	r0
    1b06:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <__negsi2>
    1b0a:	57 fd       	sbrc	r21, 7
    1b0c:	07 d0       	rcall	.+14     	; 0x1b1c <__divmodsi4_neg2>
    1b0e:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__udivmodsi4>
    1b12:	07 fc       	sbrc	r0, 7
    1b14:	03 d0       	rcall	.+6      	; 0x1b1c <__divmodsi4_neg2>
    1b16:	4e f4       	brtc	.+18     	; 0x1b2a <__divmodsi4_exit>
    1b18:	0c 94 96 0d 	jmp	0x1b2c	; 0x1b2c <__negsi2>

00001b1c <__divmodsi4_neg2>:
    1b1c:	50 95       	com	r21
    1b1e:	40 95       	com	r20
    1b20:	30 95       	com	r19
    1b22:	21 95       	neg	r18
    1b24:	3f 4f       	sbci	r19, 0xFF	; 255
    1b26:	4f 4f       	sbci	r20, 0xFF	; 255
    1b28:	5f 4f       	sbci	r21, 0xFF	; 255

00001b2a <__divmodsi4_exit>:
    1b2a:	08 95       	ret

00001b2c <__negsi2>:
    1b2c:	90 95       	com	r25
    1b2e:	80 95       	com	r24
    1b30:	70 95       	com	r23
    1b32:	61 95       	neg	r22
    1b34:	7f 4f       	sbci	r23, 0xFF	; 255
    1b36:	8f 4f       	sbci	r24, 0xFF	; 255
    1b38:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3a:	08 95       	ret

00001b3c <__muluhisi3>:
    1b3c:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <__umulhisi3>
    1b40:	a5 9f       	mul	r26, r21
    1b42:	90 0d       	add	r25, r0
    1b44:	b4 9f       	mul	r27, r20
    1b46:	90 0d       	add	r25, r0
    1b48:	a4 9f       	mul	r26, r20
    1b4a:	80 0d       	add	r24, r0
    1b4c:	91 1d       	adc	r25, r1
    1b4e:	11 24       	eor	r1, r1
    1b50:	08 95       	ret

00001b52 <__mulshisi3>:
    1b52:	b7 ff       	sbrs	r27, 7
    1b54:	0c 94 9e 0d 	jmp	0x1b3c	; 0x1b3c <__muluhisi3>

00001b58 <__mulohisi3>:
    1b58:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <__muluhisi3>
    1b5c:	82 1b       	sub	r24, r18
    1b5e:	93 0b       	sbc	r25, r19
    1b60:	08 95       	ret

00001b62 <__udivmodsi4>:
    1b62:	a1 e2       	ldi	r26, 0x21	; 33
    1b64:	1a 2e       	mov	r1, r26
    1b66:	aa 1b       	sub	r26, r26
    1b68:	bb 1b       	sub	r27, r27
    1b6a:	fd 01       	movw	r30, r26
    1b6c:	0d c0       	rjmp	.+26     	; 0x1b88 <__udivmodsi4_ep>

00001b6e <__udivmodsi4_loop>:
    1b6e:	aa 1f       	adc	r26, r26
    1b70:	bb 1f       	adc	r27, r27
    1b72:	ee 1f       	adc	r30, r30
    1b74:	ff 1f       	adc	r31, r31
    1b76:	a2 17       	cp	r26, r18
    1b78:	b3 07       	cpc	r27, r19
    1b7a:	e4 07       	cpc	r30, r20
    1b7c:	f5 07       	cpc	r31, r21
    1b7e:	20 f0       	brcs	.+8      	; 0x1b88 <__udivmodsi4_ep>
    1b80:	a2 1b       	sub	r26, r18
    1b82:	b3 0b       	sbc	r27, r19
    1b84:	e4 0b       	sbc	r30, r20
    1b86:	f5 0b       	sbc	r31, r21

00001b88 <__udivmodsi4_ep>:
    1b88:	66 1f       	adc	r22, r22
    1b8a:	77 1f       	adc	r23, r23
    1b8c:	88 1f       	adc	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	1a 94       	dec	r1
    1b92:	69 f7       	brne	.-38     	; 0x1b6e <__udivmodsi4_loop>
    1b94:	60 95       	com	r22
    1b96:	70 95       	com	r23
    1b98:	80 95       	com	r24
    1b9a:	90 95       	com	r25
    1b9c:	9b 01       	movw	r18, r22
    1b9e:	ac 01       	movw	r20, r24
    1ba0:	bd 01       	movw	r22, r26
    1ba2:	cf 01       	movw	r24, r30
    1ba4:	08 95       	ret

00001ba6 <_exit>:
    1ba6:	f8 94       	cli

00001ba8 <__stop_program>:
    1ba8:	ff cf       	rjmp	.-2      	; 0x1ba8 <__stop_program>
