
MSF_Scan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000110  00800100  00003252  000032e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003252  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000407  00800210  00800210  000033f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000033f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003428  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00003468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002edd  00000000  00000000  000035b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a8d  00000000  00000000  00006495  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009e5  00000000  00000000  00006f22  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000043c  00000000  00000000  00007908  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a87  00000000  00000000  00007d44  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024cd  00000000  00000000  000087cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  0000ac98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 85 0b 	jmp	0x170a	; 0x170a <__ctors_end>
       4:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
       8:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
       c:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      10:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      14:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      18:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      1c:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      20:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      24:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      28:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      2c:	0c 94 02 0f 	jmp	0x1e04	; 0x1e04 <__vector_11>
      30:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      34:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      38:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      3c:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      40:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      44:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      48:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      4c:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      50:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      54:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      58:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      5c:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      60:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      64:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__bad_interrupt>
      68:	ac 0d       	add	r26, r12
      6a:	66 0d       	add	r22, r6
      6c:	68 0d       	add	r22, r8
      6e:	6a 0d       	add	r22, r10
      70:	6c 0d       	add	r22, r12
      72:	6e 0d       	add	r22, r14
      74:	70 0d       	add	r23, r0
      76:	72 0d       	add	r23, r2
      78:	74 0d       	add	r23, r4
      7a:	76 0d       	add	r23, r6
      7c:	78 0d       	add	r23, r8
      7e:	7a 0d       	add	r23, r10
      80:	7c 0d       	add	r23, r12
      82:	7e 0d       	add	r23, r14
      84:	80 0d       	add	r24, r0
      86:	82 0d       	add	r24, r2
      88:	aa 0d       	add	r26, r10
      8a:	aa 0d       	add	r26, r10
      8c:	aa 0d       	add	r26, r10
      8e:	aa 0d       	add	r26, r10
      90:	aa 0d       	add	r26, r10
      92:	aa 0d       	add	r26, r10
      94:	aa 0d       	add	r26, r10
      96:	aa 0d       	add	r26, r10
      98:	aa 0d       	add	r26, r10
      9a:	84 0d       	add	r24, r4
      9c:	86 0d       	add	r24, r6
      9e:	88 0d       	add	r24, r8
      a0:	8a 0d       	add	r24, r10
      a2:	8c 0d       	add	r24, r12
      a4:	8e 0d       	add	r24, r14
      a6:	90 0d       	add	r25, r0
      a8:	92 0d       	add	r25, r2
      aa:	aa 0d       	add	r26, r10
      ac:	aa 0d       	add	r26, r10
      ae:	aa 0d       	add	r26, r10
      b0:	aa 0d       	add	r26, r10
      b2:	aa 0d       	add	r26, r10
      b4:	aa 0d       	add	r26, r10
      b6:	aa 0d       	add	r26, r10
      b8:	aa 0d       	add	r26, r10
      ba:	aa 0d       	add	r26, r10
      bc:	aa 0d       	add	r26, r10
      be:	aa 0d       	add	r26, r10
      c0:	aa 0d       	add	r26, r10
      c2:	aa 0d       	add	r26, r10
      c4:	aa 0d       	add	r26, r10
      c6:	aa 0d       	add	r26, r10
      c8:	aa 0d       	add	r26, r10
      ca:	aa 0d       	add	r26, r10
      cc:	aa 0d       	add	r26, r10
      ce:	aa 0d       	add	r26, r10
      d0:	aa 0d       	add	r26, r10
      d2:	aa 0d       	add	r26, r10
      d4:	aa 0d       	add	r26, r10
      d6:	aa 0d       	add	r26, r10
      d8:	aa 0d       	add	r26, r10
      da:	aa 0d       	add	r26, r10
      dc:	94 0d       	add	r25, r4
      de:	96 0d       	add	r25, r6
      e0:	98 0d       	add	r25, r8
      e2:	9a 0d       	add	r25, r10
      e4:	9c 0d       	add	r25, r12
      e6:	9e 0d       	add	r25, r14
      e8:	a0 0d       	add	r26, r0
      ea:	aa 0d       	add	r26, r10
      ec:	aa 0d       	add	r26, r10
      ee:	aa 0d       	add	r26, r10
      f0:	aa 0d       	add	r26, r10
      f2:	aa 0d       	add	r26, r10
      f4:	aa 0d       	add	r26, r10
      f6:	aa 0d       	add	r26, r10
      f8:	aa 0d       	add	r26, r10
      fa:	aa 0d       	add	r26, r10
      fc:	aa 0d       	add	r26, r10
      fe:	aa 0d       	add	r26, r10
     100:	aa 0d       	add	r26, r10
     102:	aa 0d       	add	r26, r10
     104:	aa 0d       	add	r26, r10
     106:	aa 0d       	add	r26, r10
     108:	aa 0d       	add	r26, r10
     10a:	aa 0d       	add	r26, r10
     10c:	aa 0d       	add	r26, r10
     10e:	aa 0d       	add	r26, r10
     110:	aa 0d       	add	r26, r10
     112:	aa 0d       	add	r26, r10
     114:	aa 0d       	add	r26, r10
     116:	aa 0d       	add	r26, r10
     118:	aa 0d       	add	r26, r10
     11a:	aa 0d       	add	r26, r10
     11c:	a2 0d       	add	r26, r2
     11e:	a4 0d       	add	r26, r4
     120:	a6 0d       	add	r26, r6
     122:	a8 0d       	add	r26, r8
     124:	20 16       	cp	r2, r16
     126:	2a 16       	cp	r2, r26
     128:	34 16       	cp	r3, r20
     12a:	3e 16       	cp	r3, r30
     12c:	48 16       	cp	r4, r24
     12e:	52 16       	cp	r5, r18
     130:	5c 16       	cp	r5, r28

00000132 <IM16_Descriptors>:
     132:	03 00 00 09 14 00 0b 3c 00 09 64 00 0b 8c 00 0c     .......<..d.....
     142:	b4 00 03 dc 00 06 f0 00 06 04 01 0b 18 01 0b 40     ...............@
     152:	01 05 68 01 0b 7c 01 05 a4 01 09 b8 01 0b e0 01     ..h..|..........
     162:	0a 08 02 0b 30 02 0b 58 02 0c 80 02 0b a8 02 0b     ....0..X........
     172:	d0 02 0b f8 02 0b 20 03 0b 48 03 05 70 03 05 84     ...... ..H..p...
     182:	03 09 98 03 0b c0 03 09 e8 03 0b 10 04 09 38 04     ..............8.
     192:	0b 60 04 0a 88 04 0b b0 04 0a d8 04 0a 00 05 0a     .`..............
     1a2:	28 05 0b 50 05 09 78 05 09 a0 05 0a c8 05 0a f0     (..P..x.........
     1b2:	05 08 18 06 0b 2c 06 09 54 06 0b 7c 06 0a a4 06     .....,..T..|....
     1c2:	0b cc 06 0a f4 06 0b 1c 07 0b 44 07 09 6c 07 0b     ..........D..l..
     1d2:	94 07 0d bc 07 0d e4 07 0d 0c 08 0b 34 08 06 5c     ............4..\
     1e2:	08 09 70 08 06 98 08 0b ac 08 0b d4 08 06 fc 08     ..p.............
     1f2:	0c 10 09 09 38 09 09 60 09 09 88 09 09 b0 09 0b     ....8..`........
     202:	d8 09 0b 00 0a 09 28 0a 09 50 0a 09 78 0a 09 a0     ......(..P..x...
     212:	0a 09 c8 0a 0b f0 0a 09 18 0b 09 40 0b 09 68 0b     ...........@..h.
     222:	09 90 0b 08 b8 0b 0a cc 0b 0a f4 0b 09 1c 0c 0b     ................
     232:	44 0c 0b 6c 0c 0b 94 0c 0b bc 0c 09 e4 0c 09 0c     D..l............
     242:	0d 01 34 0d 09 48 0d 0b 70 0d                       ..4..H..p.

0000024c <IM16_Bitmaps>:
     24c:	00 e0 e0 e0 e0 e0 40 40 40 40 00 00 e0 e0 e0 e0     ......@@@@......
     25c:	00 00 00 00 00 00 e3 80 e3 80 e3 80 e3 80 e3 00     ................
     26c:	63 00 63 00 00 00 00 00 00 00 00 00 00 00 00 00     c.c.............
	...
     288:	00 00 19 80 11 80 11 80 11 80 ff e0 ff e0 31 80     ..............1.
     298:	31 80 31 00 31 00 ff e0 ff e0 31 00 31 00 33 00     1.1.1.....1.1.3.
	...
     2b0:	08 00 08 00 7e 00 ff 80 c9 00 88 00 c8 00 f8 00     ....~...........
     2c0:	3e 00 0f 80 09 80 08 80 c9 80 ff 80 3f 00 08 00     >...........?...
     2d0:	08 00 00 00 00 00 00 00 00 00 70 00 f8 00 88 20     ..........p.... 
     2e0:	88 60 88 c0 f9 80 73 00 06 00 1d c0 3b e0 62 20     .`....s.....;.b 
     2f0:	c2 20 82 20 03 e0 01 c0 00 00 00 00 00 00 00 00     . . ............
     300:	00 00 1e 00 3f 00 73 00 63 00 63 00 26 00 3c 00     ....?.s.c.c.&.<.
     310:	70 40 d8 e0 cc c0 87 80 83 00 c7 e0 fe f0 78 30     p@............x0
	...
     328:	00 e0 e0 e0 e0 e0 e0 60 00 00 00 00 00 00 00 00     .......`........
     338:	00 00 00 00 00 04 1c 38 70 60 c0 c0 c0 c0 c0 c0     .......8p`......
     348:	c0 c0 c0 60 70 38 1c 04 00 80 e0 70 38 18 0c 0c     ...`p8.....p8...
     358:	0c 0c 0c 0c 0c 0c 0c 18 38 70 e0 80 00 00 0e 00     ........8p......
     368:	8c 40 c4 e0 f5 e0 3f 80 0e 00 3f 80 f5 e0 c4 40     .@....?...?....@
     378:	8c 40 0e 00 00 00 00 00 00 00 00 00 00 00 00 00     .@..............
	...
     390:	00 00 04 00 04 00 04 00 04 00 04 00 ff e0 ff e0     ................
     3a0:	04 00 04 00 04 00 04 00 04 00 00 00 00 00 00 00     ................
	...
     3c0:	78 70 70 60 e0 e0 c0 c0 00 00 00 00 00 00 00 00     xpp`............
	...
     3d8:	ff e0 ff e0 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     3fc:	70 f8 f8 70 00 00 00 00 00 00 01 80 01 80 03 00     p..p............
     40c:	03 00 06 00 06 00 06 00 0c 00 0c 00 18 00 18 00     ................
     41c:	18 00 30 00 30 00 60 00 60 00 60 00 c0 00 c0 00     ..0.0.`.`.`.....
     42c:	00 00 1f 00 3f 80 71 c0 60 c0 c0 60 c0 60 ce 60     ....?.q.`..`.`.`
     43c:	ce 60 ce 60 c0 60 c0 60 60 c0 71 c0 3f 80 1f 00     .`.`.`.``.q.?...
	...
     454:	00 00 0c 00 1c 00 fc 00 ec 00 0c 00 0c 00 0c 00     ................
     464:	0c 00 0c 00 0c 00 0c 00 0c 00 0c 00 ff c0 ff c0     ................
	...
     47c:	00 00 1f 00 7f c0 60 c0 60 c0 40 40 00 c0 00 c0     ......`.`.@@....
     48c:	0f c0 3f 00 78 00 60 00 c0 00 c0 00 ff e0 ff e0     ..?.x.`.........
	...
     4a4:	00 00 1f 00 7f c0 60 c0 60 c0 00 c0 00 c0 0f 80     ......`.`.......
     4b4:	0f 00 00 c0 00 60 00 60 c0 60 e0 c0 7f c0 3f 80     .....`.`.`....?.
	...
     4cc:	00 00 03 80 07 80 07 80 0d 80 1d 80 19 80 31 80     ..............1.
     4dc:	61 80 61 80 ff f0 ff f0 01 80 01 80 01 80 01 80     a.a.............
	...
     4f4:	00 00 7f c0 7f c0 60 00 60 00 60 00 60 00 7f 80     ......`.`.`.`...
     504:	7f c0 00 c0 00 60 c0 60 c0 60 e0 c0 7f c0 3f 00     .....`.`.`....?.
	...
     51c:	00 00 1f 00 3f c0 60 c0 60 c0 c0 00 c0 00 cf 80     ....?.`.`.......
     52c:	ff c0 e0 c0 c0 60 c0 60 40 60 60 c0 3f c0 1f 00     .....`.`@``.?...
	...
     544:	00 00 ff e0 ff e0 00 c0 00 c0 01 80 01 80 03 00     ................
     554:	03 00 06 00 06 00 06 00 0c 00 0c 00 0c 00 0c 00     ................
	...
     56c:	00 00 3f 80 7f c0 60 c0 60 c0 60 c0 60 c0 1f 00     ..?...`.`.`.`...
     57c:	3f 80 60 c0 c0 60 c0 60 c0 60 60 c0 7f c0 3f 80     ?.`..`.`.``...?.
	...
     594:	00 00 1f 00 7f c0 60 c0 c0 40 c0 60 c0 60 60 e0     ......`..@.`.``.
     5a4:	7f e0 3e 60 00 60 00 60 60 c0 60 c0 7f 80 1f 00     ..>`.`.``.`.....
	...
     5c0:	00 70 f8 f8 70 00 00 00 70 f8 f8 70 00 00 00 00     .p..p...p..p....
     5d0:	00 00 00 00 00 70 f8 f8 70 00 00 00 78 70 70 60     .....p..p...xpp`
     5e0:	e0 c0 c0 80 00 00 00 00 00 00 00 80 01 80 07 00     ................
     5f0:	1e 00 38 00 e0 00 80 00 e0 00 38 00 1e 00 07 00     ..8.......8.....
     600:	01 80 00 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     618:	ff e0 ff e0 00 00 00 00 00 00 ff e0 ff e0 00 00     ................
	...
     638:	00 00 80 00 c0 00 70 00 3c 00 0e 00 03 80 00 80     ......p.<.......
     648:	03 80 0e 00 3c 00 70 00 c0 00 80 00 00 00 00 00     ....<.p.........
     658:	00 00 00 00 00 00 3f 80 7f c0 e0 e0 c0 60 c0 60     ......?......`.`
     668:	00 60 01 e0 0f 80 0e 00 00 00 00 00 1c 00 1c 00     .`..............
     678:	1c 00 1c 00 00 00 00 00 00 00 00 00 00 00 3e 00     ..............>.
     688:	7f 00 c1 80 c0 80 8e 80 9f 80 99 80 98 80 98 80     ................
     698:	98 80 98 80 9f 80 8f 00 c0 00 e0 00 7f 80 1f 80     ................
     6a8:	00 00 00 00 00 00 0e 00 0e 00 0a 00 1b 00 1b 00     ................
     6b8:	11 00 31 80 31 80 31 80 7f c0 7f c0 60 c0 c0 60     ..1.1.1.....`..`
     6c8:	c0 60 c0 60 00 00 00 00 00 00 00 00 00 00 fe 00     .`.`............
     6d8:	ff 80 c1 80 c1 80 c1 80 c1 80 ff 00 ff 00 c1 80     ................
     6e8:	c0 c0 c0 c0 c0 c0 c1 c0 ff 80 ff 00 00 00 00 00     ................
     6f8:	00 00 00 00 00 00 1f 80 3f c0 60 e0 60 60 c0 60     ........?.`.``.`
     708:	c0 00 c0 00 c0 00 c0 00 c0 00 c0 60 60 60 60 e0     ...........````.
     718:	3f c0 1f 80 00 00 00 00 00 00 00 00 00 00 fe 00     ?...............
     728:	ff 00 c3 80 c1 80 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     738:	c0 c0 c0 c0 c1 80 c3 80 ff 00 fe 00 00 00 00 00     ................
     748:	00 00 00 00 00 00 ff c0 ff c0 c0 00 c0 00 c0 00     ................
     758:	c0 00 ff 80 ff 80 c0 00 c0 00 c0 00 c0 00 c0 00     ................
     768:	ff c0 ff c0 00 00 00 00 00 00 00 00 00 00 ff c0     ................
     778:	ff c0 c0 00 c0 00 c0 00 c0 00 c0 00 ff 00 ff 00     ................
     788:	c0 00 c0 00 c0 00 c0 00 c0 00 c0 00 00 00 00 00     ................
     798:	00 00 00 00 00 00 1f 00 3f c0 60 c0 60 c0 c0 60     ........?.`.`..`
     7a8:	c0 00 c0 00 c0 00 c7 e0 c7 e0 c0 60 60 60 60 e0     ...........````.
     7b8:	3f c0 1f 00 00 00 00 00 00 00 00 00 00 00 c1 80     ?...............
     7c8:	c1 80 c1 80 c1 80 c1 80 c1 80 ff 80 ff 80 c1 80     ................
     7d8:	c1 80 c1 80 c1 80 c1 80 c1 80 c1 80 00 00 00 00     ................
     7e8:	00 00 00 00 00 00 ff 80 ff 80 08 00 08 00 08 00     ................
     7f8:	08 00 08 00 08 00 08 00 08 00 08 00 08 00 08 00     ................
     808:	ff 80 ff 80 00 00 00 00 00 00 00 00 00 00 07 c0     ................
     818:	07 c0 00 c0 00 c0 00 c0 00 c0 00 c0 00 c0 00 c0     ................
     828:	00 c0 c0 c0 c0 c0 e1 c0 7f 80 3f 00 00 00 00 00     ..........?.....
     838:	00 00 00 00 00 00 c0 c0 c1 80 c3 00 c6 00 cc 00     ................
     848:	d8 00 f0 00 f0 00 d8 00 cc 00 ce 00 c7 00 c3 00     ................
     858:	c1 80 c0 c0 00 00 00 00 00 00 00 00 00 c0 c0 c0     ................
     868:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 ff ff 00 00 00 00     ................
     878:	00 00 e0 e0 e0 e0 f0 e0 f1 e0 f1 e0 d1 60 db 60     .............`.`
     888:	db 60 ca 60 ce 60 ce 60 c0 60 c0 60 c0 60 c0 60     .`.`.`.`.`.`.`.`
	...
     8a0:	00 00 c1 80 e1 80 e1 80 b1 80 b1 80 99 80 99 80     ................
     8b0:	99 80 8d 80 8d 80 87 80 87 80 87 80 83 80 83 80     ................
	...
     8c8:	00 00 1f 00 3f 80 60 c0 60 c0 c0 60 c0 60 c0 60     ....?.`.`..`.`.`
     8d8:	c0 60 c0 60 c0 60 c0 60 60 c0 60 c0 3f 80 1f 00     .`.`.`.``.`.?...
	...
     8f0:	00 00 ff 00 ff 80 c1 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     900:	c1 c0 ff 80 ff 00 c0 00 c0 00 c0 00 c0 00 c0 00     ................
	...
     918:	00 00 1f 00 3f c0 60 c0 60 c0 c0 60 c0 60 c0 60     ....?.`.`..`.`.`
     928:	c0 60 c0 60 c0 60 c0 60 60 c0 60 c0 3f 80 1f 00     .`.`.`.``.`.?...
     938:	06 00 03 00 03 e0 00 e0 00 00 ff 00 ff 80 c0 c0     ................
     948:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 ff 80 ff 00 c6 00     ................
     958:	c3 00 c3 00 c1 80 c0 c0 00 00 00 00 00 00 00 00     ................
     968:	00 00 1f 00 7f c0 61 e0 c0 40 60 00 70 00 3f 00     ......a..@`.p.?.
     978:	0f c0 01 c0 00 60 00 60 40 60 e0 c0 7f c0 1f 00     .....`.`@`......
	...
     990:	00 00 ff e0 ff e0 04 00 04 00 04 00 04 00 04 00     ................
     9a0:	04 00 04 00 04 00 04 00 04 00 04 00 04 00 04 00     ................
	...
     9b8:	00 00 c1 80 c1 80 c1 80 c1 80 c1 80 c1 80 c1 80     ................
     9c8:	c1 80 c1 80 c1 80 c1 80 c1 80 e3 80 7f 00 3e 00     ..............>.
	...
     9e0:	00 00 c0 60 c0 60 c0 60 60 c0 60 c0 60 c0 31 80     ...`.`.``.`.`.1.
     9f0:	31 80 31 80 1b 00 1b 00 1b 00 0a 00 0e 00 0e 00     1.1.............
	...
     a08:	00 00 c0 18 c0 18 40 10 60 10 67 30 67 30 65 30     ......@.`.g0g0e0
     a18:	65 30 6d b0 2d a0 28 a0 28 a0 38 e0 38 e0 30 60     e0m.-.(.(.8.8.0`
	...
     a30:	00 00 60 38 30 30 38 60 18 c0 0c c0 0d 80 07 00     ..`8008`........
     a40:	07 00 07 00 0d 80 18 c0 18 c0 30 60 60 30 e0 38     ..........0``0.8
	...
     a58:	00 00 e0 18 60 30 30 60 30 60 18 c0 18 c0 0d 80     ....`00`0`......
     a68:	0f 80 07 00 02 00 02 00 02 00 02 00 02 00 02 00     ................
	...
     a80:	00 00 ff e0 ff e0 00 c0 01 80 03 80 03 00 06 00     ................
     a90:	0e 00 0c 00 18 00 30 00 70 00 60 00 ff e0 ff e0     ......0.p.`.....
	...
     aa8:	00 fc fc c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
     ab8:	c0 c0 fc fc 00 00 c0 00 c0 00 60 00 60 00 60 00     ..........`.`.`.
     ac8:	30 00 30 00 18 00 18 00 18 00 0c 00 0c 00 06 00     0.0.............
     ad8:	06 00 06 00 03 00 03 00 01 80 01 80 00 fc fc 0c     ................
     ae8:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c fc fc     ................
     af8:	00 00 0e 00 0e 00 1b 00 1b 00 11 00 31 80 30 80     ............1.0.
     b08:	60 c0 60 c0 c0 60 c0 60 00 00 00 00 00 00 00 00     `.`..`.`........
	...
     b44:	ff e0 ff e0 00 f0 70 38 38 18 1c 0c 00 00 00 00     ......p88.......
	...
     b64:	00 00 3f 00 7f 80 61 80 c1 80 01 80 3f 80 7f 80     ..?...a.....?...
     b74:	c1 80 c1 c0 7f f0 3c 70 00 00 00 00 00 00 00 00     ......<p........
     b84:	00 00 c0 00 c0 00 c0 00 c0 00 cf 00 df 80 e1 80     ................
     b94:	c1 80 c1 80 c1 80 c1 80 c1 80 c1 80 ff 00 7e 00     ..............~.
	...
     bb4:	00 00 3e 00 7f 80 c1 80 c0 80 c0 00 c0 00 c0 00     ..>.............
     bc4:	c0 00 c1 80 7f 80 3f 00 00 00 00 00 00 00 00 00     ......?.........
     bd4:	00 00 01 80 01 80 01 80 01 80 3f 80 7f 80 c1 80     ..........?.....
     be4:	c1 80 c1 80 c1 80 c1 80 c1 80 c3 80 ff 80 79 80     ..............y.
	...
     c04:	00 00 3e 00 7f 00 c1 80 c1 80 ff 80 ff 80 c0 00     ..>.............
     c14:	c0 00 c1 80 7f 80 3e 00 00 00 00 00 00 00 00 00     ......>.........
     c24:	00 00 07 c0 0f e0 0c 00 0c 00 ff c0 ff c0 0c 00     ................
     c34:	0c 00 0c 00 0c 00 0c 00 0c 00 0c 00 0c 00 0c 00     ................
	...
     c54:	00 00 3f e0 7f e0 61 80 60 80 61 80 3f 80 7f 00     ..?...a.`.a.?...
     c64:	c0 00 c0 00 7f c0 7f e0 c0 60 c0 60 ff e0 7f c0     .........`.`....
     c74:	00 00 c0 00 c0 00 c0 00 c0 00 cf 00 df 80 e1 80     ................
     c84:	c1 80 c1 80 c1 80 c1 80 c1 80 c1 80 c1 80 c1 80     ................
	...
     c9c:	1e 00 1e 00 00 00 00 00 00 00 f8 00 f8 00 08 00     ................
     cac:	08 00 08 00 08 00 08 00 08 00 08 00 ff 80 ff 80     ................
	...
     cc4:	07 80 07 80 00 00 00 00 00 00 fe 00 fe 00 06 00     ................
     cd4:	06 00 06 00 06 00 06 00 06 00 06 00 06 00 06 00     ................
     ce4:	06 00 06 00 fe 00 f8 00 00 00 c0 00 c0 00 c0 00     ................
     cf4:	c0 00 c3 80 c6 00 cc 00 d8 00 f0 00 f8 00 d8 00     ................
     d04:	cc 00 ce 00 c6 00 c3 80 00 00 00 00 00 00 00 00     ................
     d14:	00 00 f8 00 f8 00 08 00 08 00 08 00 08 00 08 00     ................
     d24:	08 00 08 00 08 00 08 00 08 00 08 00 ff 80 ff 80     ................
	...
     d44:	00 00 dc c0 fd e0 ee 60 c6 60 c4 60 c4 60 c4 60     .......`.`.`.`.`
     d54:	c4 60 c4 60 c4 60 c4 60 00 00 00 00 00 00 00 00     .`.`.`.`........
	...
     d6c:	00 00 df 00 ff 80 e1 80 c1 80 c1 80 c1 80 c1 80     ................
     d7c:	c1 80 c1 80 c1 80 c1 80 00 00 00 00 00 00 00 00     ................
	...
     d94:	00 00 3e 00 7f 00 c1 80 c1 80 c1 80 c1 80 c1 80     ..>.............
     da4:	c1 80 c1 80 7f 00 3e 00 00 00 00 00 00 00 00 00     ......>.........
	...
     dbc:	00 00 cf 00 ff 80 e1 80 c1 80 c1 80 c1 80 c1 80     ................
     dcc:	c1 80 c1 80 ff 00 fe 00 c0 00 c0 00 c0 00 c0 00     ................
	...
     de4:	00 00 3f 00 7f 80 e1 80 c1 80 c1 80 c1 80 c1 80     ..?.............
     df4:	c1 80 c3 80 fd 80 79 80 01 80 01 80 01 80 01 80     ......y.........
     e04:	00 00 00 00 00 de ff e3 c1 c1 c0 c0 c0 c0 c0 c0     ................
	...
     e20:	00 00 1f 00 7f c0 60 80 60 00 7f 00 1f c0 00 c0     ......`.`.......
     e30:	00 c0 40 c0 ff c0 1f 00 00 00 00 00 00 00 00 00     ..@.............
     e40:	00 00 18 00 18 00 18 00 18 00 ff c0 ff c0 18 00     ................
     e50:	18 00 18 00 18 00 18 00 18 00 1c 00 0f c0 07 c0     ................
	...
     e70:	00 00 c1 80 c1 80 c1 80 c1 80 c1 80 c1 80 c1 80     ................
     e80:	c1 80 c3 80 ff 80 79 80 00 00 00 00 00 00 00 00     ......y.........
	...
     e98:	00 00 c0 60 60 c0 60 c0 20 80 31 80 31 80 19 00     ...``.`. .1.1...
     ea8:	1b 00 1b 00 0e 00 0e 00 00 00 00 00 00 00 00 00     ................
	...
     ec0:	00 00 80 20 c0 60 ce 60 ce 60 ca 60 4a 40 5b 40     ... .`.`.`.`J@[@
     ed0:	7b c0 71 c0 71 c0 31 80 00 00 00 00 00 00 00 00     {.q.q.1.........
	...
     ee8:	00 00 60 e0 31 80 31 80 1b 00 0e 00 0e 00 0e 00     ..`.1.1.........
     ef8:	1b 00 31 80 31 80 e0 e0 00 00 00 00 00 00 00 00     ..1.1...........
	...
     f10:	00 00 c0 60 60 c0 60 c0 30 80 31 80 31 80 19 00     ...``.`.0.1.1...
     f20:	1b 00 1b 00 0e 00 0e 00 06 00 0c 00 78 00 f0 00     ............x...
	...
     f38:	00 00 ff 80 ff 80 03 00 06 00 0e 00 1c 00 38 00     ..............8.
     f48:	70 00 60 00 ff 80 ff 80 00 00 00 00 00 00 00 00     p.`.............
     f58:	00 00 0f 80 3f 80 30 00 30 00 30 00 18 00 0c 00     ....?.0.0.0.....
     f68:	0c 00 1c 00 e0 00 18 00 0c 00 0c 00 18 00 30 00     ..............0.
     f78:	30 00 30 00 3f 80 0f 80 00 80 80 80 80 80 80 80     0.0.?...........
     f88:	80 80 80 80 80 80 80 80 80 80 80 80 00 00 f8 00     ................
     f98:	fe 00 06 00 06 00 06 00 0c 00 18 00 18 00 1c 00     ................
     fa8:	03 80 0c 00 18 00 18 00 0c 00 06 00 06 00 06 00     ................
     fb8:	fe 00 f8 00 00 00 00 00 00 00 00 00 00 00 78 60     ..............x`
     fc8:	7c 60 cc 60 ce 60 c6 60 c7 e0 c3 c0 00 00 00 00     |`.`.`.`........
	...

00000fe4 <IM8_Descriptors>:
     fe4:	01 00 00 05 0b 00 07 16 00 05 21 00 07 2c 00 07     ..........!..,..
     ff4:	37 00 01 42 00 04 4d 00 04 58 00 05 63 00 05 6e     7..B..M..X..c..n
    1004:	00 03 79 00 05 84 00 03 8f 00 05 9a 00 05 a5 00     ..y.............
    1014:	06 b0 00 05 bb 00 05 c6 00 06 d1 00 05 dc 00 05     ................
    1024:	e7 00 05 f2 00 05 fd 00 05 08 01 03 13 01 03 1e     ................
    1034:	01 05 29 01 05 34 01 05 3f 01 06 4a 01 05 55 01     ..)..4..?..J..U.
    1044:	07 60 01 05 6b 01 05 76 01 05 81 01 05 8c 01 05     .`..k..v........
    1054:	97 01 05 a2 01 05 ad 01 05 b8 01 05 c3 01 06 ce     ................
    1064:	01 05 d9 01 05 e4 01 05 ef 01 05 fa 01 05 05 02     ................
    1074:	06 10 02 06 1b 02 05 26 02 07 31 02 05 3c 02 07     .......&..1..<..
    1084:	47 02 07 52 02 07 5d 02 07 68 02 05 73 02 04 7e     G..R..]..h..s..~
    1094:	02 05 89 02 04 94 02 07 9f 02 05 aa 02 03 b5 02     ................
    10a4:	06 c0 02 05 cb 02 05 d6 02 05 e1 02 05 ec 02 05     ................
    10b4:	f7 02 07 02 03 05 0d 03 05 18 03 04 23 03 05 2e     ............#...
    10c4:	03 05 39 03 05 44 03 05 4f 03 05 5a 03 05 65 03     ..9..D..O..Z..e.
    10d4:	05 70 03 05 7b 03 05 86 03 05 91 03 05 9c 03 05     .p..{...........
    10e4:	a7 03 07 b2 03 05 bd 03 05 c8 03 05 d3 03 06 de     ................
    10f4:	03 01 e9 03 06 f4 03 05 ff 03                       ..........

000010fe <IM8_Bitmaps>:
    10fe:	00 80 80 80 80 80 00 80 80 00 00 00 d8 d8 d8 d8     ................
    110e:	00 00 00 00 00 00 00 28 28 fe 28 28 fe 28 28 00     .......((.((.((.
    111e:	00 20 78 b0 a0 70 28 a8 f0 20 20 00 00 60 a4 a6     . x..p(..  ..`..
    112e:	68 3c 72 92 0c 00 00 00 30 48 48 30 64 98 c8 76     h<r.....0HH0d..v
    113e:	00 00 00 80 80 80 80 00 00 00 00 00 00 00 30 40     ..............0@
    114e:	c0 80 80 80 80 c0 40 30 00 c0 20 30 10 10 10 10     ......@0.. 0....
    115e:	30 20 c0 00 20 a8 70 70 a8 20 00 00 00 00 00 00     0 .. .pp. ......
    116e:	20 20 20 f8 20 20 20 00 00 00 00 00 00 00 00 00        .   .........
    117e:	60 40 c0 80 00 00 00 00 00 f8 00 00 00 00 00 00     `@..............
    118e:	00 00 00 00 00 00 e0 e0 00 00 00 08 10 10 10 20     ............... 
    119e:	20 40 40 40 80 00 70 88 88 a8 a8 88 88 70 00 00      @@@..p......p..
    11ae:	00 30 f0 30 30 30 30 30 fc 00 00 00 70 88 88 08     .0.00000....p...
    11be:	70 80 80 f8 00 00 00 70 88 08 70 08 08 88 f0 00     p......p..p.....
    11ce:	00 00 18 38 78 58 98 fc 18 18 00 00 00 f8 80 80     ...8xX..........
    11de:	f8 08 08 88 f0 00 00 00 70 88 80 f0 88 88 88 70     ........p......p
    11ee:	00 00 00 f8 08 10 10 20 20 20 60 00 00 00 f8 88     .......   `.....
    11fe:	88 70 88 88 88 f8 00 00 00 70 88 88 88 78 08 88     .p.......p...x..
    120e:	70 00 00 00 00 00 e0 e0 00 00 e0 e0 00 00 00 00     p...............
    121e:	00 e0 e0 00 00 60 40 c0 80 00 00 08 30 40 80 40     .....`@.....0@.@
    122e:	30 08 00 00 00 00 00 00 f8 00 00 f8 00 00 00 00     0...............
    123e:	00 80 60 10 08 10 60 80 00 00 00 7c 44 44 84 38     ..`...`....|DD.8
    124e:	00 30 30 00 00 00 70 88 b8 a8 a8 a8 b8 80 78 00     .00...p.......x.
    125e:	00 10 30 28 28 28 7c 44 c6 00 00 00 f0 88 88 f0     ..0(((|D........
    126e:	88 88 88 f8 00 00 00 70 88 88 80 80 88 88 78 00     .......p......x.
    127e:	00 00 f0 88 88 88 88 88 88 f0 00 00 00 f8 80 80     ................
    128e:	f8 80 80 80 f8 00 00 00 f8 80 80 f8 80 80 80 80     ................
    129e:	00 00 00 70 88 88 80 b8 88 88 70 00 00 00 88 88     ...p......p.....
    12ae:	88 f8 88 88 88 88 00 00 00 f8 20 20 20 20 20 20     ..........      
    12be:	f8 00 00 00 38 08 08 08 08 88 88 f0 00 00 00 8c     ....8...........
    12ce:	90 a0 c0 a0 b0 90 8c 00 00 00 c0 c0 c0 c0 c0 c0     ................
    12de:	c0 f8 00 00 00 88 c8 d8 d8 e8 a8 88 88 00 00 00     ................
    12ee:	c8 c8 c8 a8 a8 98 98 98 00 00 00 70 88 88 88 88     ...........p....
    12fe:	88 88 70 00 00 00 f8 88 88 88 f8 80 80 80 00 00     ..p.............
    130e:	00 70 88 88 88 88 88 88 70 30 1c 00 f8 88 8c 88     .p......p0......
    131e:	f8 90 98 8c 00 00 00 70 88 80 70 08 08 88 70 00     .......p..p...p.
    132e:	00 00 fe 10 10 10 10 10 10 10 00 00 00 88 88 88     ................
    133e:	88 88 88 88 70 00 00 00 c6 44 44 28 28 28 28 10     ....p....DD((((.
    134e:	00 00 00 82 82 54 74 6c 6c 6c 44 00 00 00 c6 64     .....TtlllD....d
    135e:	28 10 18 28 44 c6 00 00 00 c6 44 28 28 10 10 10     (..(D.....D((...
    136e:	10 00 00 00 f8 08 10 20 20 40 80 f8 00 00 00 f0     .......  @......
    137e:	80 80 80 80 80 80 80 80 f0 00 80 40 40 40 20 20     ...........@@@  
    138e:	10 10 10 08 00 f0 10 10 10 10 10 10 10 10 f0 00     ................
    139e:	10 28 28 44 44 c6 00 00 00 00 00 00 00 00 00 00     .((DD...........
    13ae:	00 00 00 00 f8 00 c0 40 40 20 00 00 00 00 00 00     .......@@ ......
    13be:	00 00 00 70 90 18 f8 98 ec 00 00 00 80 80 b0 c8     ...p............
    13ce:	88 88 88 f0 00 00 00 00 00 70 88 80 80 88 70 00     .........p....p.
    13de:	00 00 08 08 78 88 88 88 88 78 00 00 00 00 00 70     ....x....x.....p
    13ee:	88 f8 80 88 70 00 00 00 38 20 f8 60 60 60 60 60     ....p...8 .`````
    13fe:	00 00 00 00 00 3c 48 4c 78 40 7c 46 fc 00 80 80     .....<HLx@|F....
    140e:	b0 c8 88 88 88 88 00 00 00 30 00 e0 20 20 20 20     .........0..    
    141e:	f8 00 00 00 30 00 f0 10 10 10 10 10 10 e0 00 c0     ....0...........
    142e:	c0 d8 f0 e0 e0 d0 c8 00 00 00 e0 20 20 20 20 20     ...........     
    143e:	20 f8 00 00 00 00 00 f8 a8 a8 a8 a8 a8 00 00 00      ...............
    144e:	00 00 b0 c8 88 88 88 88 00 00 00 00 00 70 88 88     .............p..
    145e:	88 88 70 00 00 00 00 00 b0 c8 88 88 88 f0 80 80     ..p.............
    146e:	00 00 00 78 88 88 88 88 78 08 08 00 00 00 f8 c8     ...x....x.......
    147e:	c0 c0 c0 c0 00 00 00 00 00 f8 80 f0 08 88 70 00     ..............p.
    148e:	00 00 40 40 f8 40 40 40 60 38 00 00 00 00 00 88     ..@@.@@@`8......
    149e:	88 88 88 98 68 00 00 00 00 00 88 88 50 50 50 20     ....h.......PPP 
    14ae:	00 00 00 00 00 82 54 74 6c 6c 6c 00 00 00 00 00     ......Ttlll.....
    14be:	88 50 20 20 50 88 00 00 00 00 00 88 88 50 50 50     .P  P........PPP
    14ce:	20 20 c0 00 00 00 f8 10 30 60 40 f8 00 00 00 3c       ......0`@....<
    14de:	20 60 30 10 e0 10 20 20 7c 00 80 80 80 80 80 80      `0...  |.......
    14ee:	80 80 80 80 00 f0 10 18 30 20 1c 20 10 10 f8 00     ........0 . ....
    14fe:	00 00 c8 a8 a8 98 00 00 00 00                       ..........

00001508 <_ZL6Atomic>:
    1508:	00 00 00 07 c0 00 00 00 00 00 00 0f f0 00 00 00     ................
    1518:	00 00 00 3c 38 00 00 00 00 00 00 70 1c 00 00 00     ...<8......p....
    1528:	00 00 00 60 0e 00 00 00 00 00 00 e0 07 00 00 00     ...`............
    1538:	00 00 01 c0 03 00 00 00 00 00 01 80 03 80 00 00     ................
    1548:	00 00 03 80 01 80 00 00 00 00 03 00 01 c0 00 00     ................
    1558:	00 00 03 00 00 c0 00 00 00 00 06 00 00 c0 00 00     ................
    1568:	00 3f c6 00 00 67 fc 00 01 ff fe 00 00 ff ff 80     .?...g..........
    1578:	07 c0 3f c0 03 fc 03 c0 07 00 0f f8 1f f0 00 e0     ..?.............
    1588:	0c 00 0c 3e fc 30 00 70 0c 00 0c 0f e0 30 00 30     ...>.0.p.....0.0
    1598:	18 00 1c 0f f0 30 00 38 18 00 18 3e 78 30 00 38     .....0.8...>x0.8
    15a8:	18 00 18 78 1e 18 00 38 1c 00 19 e0 07 98 00 30     ...x...8.......0
    15b8:	0c 00 1f 80 01 f8 00 30 0c 00 1f 00 00 f8 00 70     .......0.......p
    15c8:	06 00 3c 00 00 38 00 60 06 00 78 00 00 1e 00 e0     ..<..8.`..x.....
    15d8:	03 00 f0 00 00 1f 00 c0 03 81 f0 00 00 1f 81 c0     ................
    15e8:	01 c7 b0 03 80 19 c3 80 00 ce 30 07 e0 1c f7 00     ..........0.....
    15f8:	00 fc 30 0f e0 1c 3e 00 00 78 30 0f f0 1c 1c 00     ..0...>..x0.....
    1608:	00 78 30 0f f0 1c 1c 00 00 fc 30 0f e0 1c 3e 00     .x0.......0...>.
    1618:	00 ce 30 07 e0 1c f7 00 01 c7 b0 03 c0 19 c3 80     ..0.............
    1628:	03 81 f0 00 00 1f 81 c0 03 00 f0 00 00 1f 00 c0     ................
    1638:	06 00 78 00 00 1e 00 e0 06 00 3c 00 00 38 00 60     ..x.......<..8.`
    1648:	0c 00 1f 00 00 f8 00 30 0c 00 1f 80 01 f8 00 30     .......0.......0
    1658:	1c 00 19 e0 07 98 00 30 18 00 18 f8 1e 18 00 38     .......0.......8
    1668:	18 00 18 3e 7c 30 00 18 18 00 1c 0f f0 30 00 38     ...>|0.......0.8
    1678:	1c 00 0c 07 e0 30 00 30 0c 00 0c 3f fc 30 00 30     .....0.0...?.0.0
    1688:	0e 00 0f f8 1f f0 00 60 07 c0 3f c0 07 f8 03 e0     .......`..?.....
    1698:	01 ff fe 00 00 ff ff 80 00 7f e6 00 00 67 fe 00     .............g..
    16a8:	00 00 06 00 00 c0 00 00 00 00 03 00 00 c0 00 00     ................
    16b8:	00 00 03 00 01 c0 00 00 00 00 03 80 01 80 00 00     ................
    16c8:	00 00 01 80 03 80 00 00 00 00 01 c0 03 00 00 00     ................
    16d8:	00 00 00 e0 07 00 00 00 00 00 00 60 0e 00 00 00     ...........`....
    16e8:	00 00 00 30 1c 00 00 00 00 00 00 3c 38 00 00 00     ...0.......<8...
    16f8:	00 00 00 0f f0 00 00 00 00 00 00 07 c0 00 00 00     ................

00001708 <__ctors_start>:
    1708:	73 17       	cp	r23, r19

0000170a <__ctors_end>:
    170a:	11 24       	eor	r1, r1
    170c:	1f be       	out	0x3f, r1	; 63
    170e:	cf ef       	ldi	r28, 0xFF	; 255
    1710:	d8 e0       	ldi	r29, 0x08	; 8
    1712:	de bf       	out	0x3e, r29	; 62
    1714:	cd bf       	out	0x3d, r28	; 61

00001716 <__do_copy_data>:
    1716:	12 e0       	ldi	r17, 0x02	; 2
    1718:	a0 e0       	ldi	r26, 0x00	; 0
    171a:	b1 e0       	ldi	r27, 0x01	; 1
    171c:	e2 e5       	ldi	r30, 0x52	; 82
    171e:	f2 e3       	ldi	r31, 0x32	; 50
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <__do_copy_data+0x10>
    1722:	05 90       	lpm	r0, Z+
    1724:	0d 92       	st	X+, r0
    1726:	a0 31       	cpi	r26, 0x10	; 16
    1728:	b1 07       	cpc	r27, r17
    172a:	d9 f7       	brne	.-10     	; 0x1722 <__do_copy_data+0xc>

0000172c <__do_clear_bss>:
    172c:	26 e0       	ldi	r18, 0x06	; 6
    172e:	a0 e1       	ldi	r26, 0x10	; 16
    1730:	b2 e0       	ldi	r27, 0x02	; 2
    1732:	01 c0       	rjmp	.+2      	; 0x1736 <.do_clear_bss_start>

00001734 <.do_clear_bss_loop>:
    1734:	1d 92       	st	X+, r1

00001736 <.do_clear_bss_start>:
    1736:	a7 31       	cpi	r26, 0x17	; 23
    1738:	b2 07       	cpc	r27, r18
    173a:	e1 f7       	brne	.-8      	; 0x1734 <.do_clear_bss_loop>

0000173c <__do_global_ctors>:
    173c:	1b e0       	ldi	r17, 0x0B	; 11
    173e:	c5 e8       	ldi	r28, 0x85	; 133
    1740:	db e0       	ldi	r29, 0x0B	; 11
    1742:	04 c0       	rjmp	.+8      	; 0x174c <__do_global_ctors+0x10>
    1744:	21 97       	sbiw	r28, 0x01	; 1
    1746:	fe 01       	movw	r30, r28
    1748:	0e 94 62 18 	call	0x30c4	; 0x30c4 <__tablejump2__>
    174c:	c4 38       	cpi	r28, 0x84	; 132
    174e:	d1 07       	cpc	r29, r17
    1750:	c9 f7       	brne	.-14     	; 0x1744 <__do_global_ctors+0x8>
    1752:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <main>
    1756:	0c 94 27 19 	jmp	0x324e	; 0x324e <_exit>

0000175a <__bad_interrupt>:
    175a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000175e <_ZN11Framebuffer9drawPixelEhhh>:
    }
}
#endif

void Framebuffer::drawPixel(uint8_t pos_x, uint8_t pos_y, uint8_t pixel_status) {
    if (pos_x >= SSD1306_WIDTH || pos_y >= SSD1306_HEIGHT) {
    175e:	66 23       	and	r22, r22
    1760:	ac f1       	brlt	.+106    	; 0x17cc <_ZN11Framebuffer9drawPixelEhhh+0x6e>
    1762:	40 34       	cpi	r20, 0x40	; 64
    1764:	98 f5       	brcc	.+102    	; 0x17cc <_ZN11Framebuffer9drawPixelEhhh+0x6e>
        return;
    }

    if (pixel_status) {
    1766:	22 23       	and	r18, r18
    1768:	c9 f0       	breq	.+50     	; 0x179c <_ZN11Framebuffer9drawPixelEhhh+0x3e>
        this->buffer[pos_x+(pos_y/8)*SSD1306_WIDTH] |= (1 << (pos_y&7));
    176a:	24 2f       	mov	r18, r20
    176c:	26 95       	lsr	r18
    176e:	26 95       	lsr	r18
    1770:	26 95       	lsr	r18
    1772:	50 e8       	ldi	r21, 0x80	; 128
    1774:	25 9f       	mul	r18, r21
    1776:	90 01       	movw	r18, r0
    1778:	11 24       	eor	r1, r1
    177a:	26 0f       	add	r18, r22
    177c:	31 1d       	adc	r19, r1
    177e:	fc 01       	movw	r30, r24
    1780:	e2 0f       	add	r30, r18
    1782:	f3 1f       	adc	r31, r19
    1784:	47 70       	andi	r20, 0x07	; 7
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <_ZN11Framebuffer9drawPixelEhhh+0x32>
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	4a 95       	dec	r20
    1792:	e2 f7       	brpl	.-8      	; 0x178c <_ZN11Framebuffer9drawPixelEhhh+0x2e>
    1794:	90 81       	ld	r25, Z
    1796:	89 2b       	or	r24, r25
    1798:	80 83       	st	Z, r24
    179a:	08 95       	ret
    } else {
        this->buffer[pos_x+(pos_y/8)*SSD1306_WIDTH] &= ~(1 << (pos_y&7));
    179c:	24 2f       	mov	r18, r20
    179e:	26 95       	lsr	r18
    17a0:	26 95       	lsr	r18
    17a2:	26 95       	lsr	r18
    17a4:	30 e8       	ldi	r19, 0x80	; 128
    17a6:	23 9f       	mul	r18, r19
    17a8:	f0 01       	movw	r30, r0
    17aa:	11 24       	eor	r1, r1
    17ac:	e6 0f       	add	r30, r22
    17ae:	f1 1d       	adc	r31, r1
    17b0:	e8 0f       	add	r30, r24
    17b2:	f9 1f       	adc	r31, r25
    17b4:	47 70       	andi	r20, 0x07	; 7
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <_ZN11Framebuffer9drawPixelEhhh+0x62>
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	4a 95       	dec	r20
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <_ZN11Framebuffer9drawPixelEhhh+0x5e>
    17c4:	80 95       	com	r24
    17c6:	90 81       	ld	r25, Z
    17c8:	89 23       	and	r24, r25
    17ca:	80 83       	st	Z, r24
    17cc:	08 95       	ret

000017ce <_ZN11Framebuffer10drawBitmapEPKhhhhh>:
Framebuffer::Framebuffer() {
    this->clear();
}

#ifndef SIMULATOR
void Framebuffer::drawBitmap(const uint8_t *progmem_bitmap, uint8_t height, uint8_t width, uint8_t pos_x, uint8_t pos_y) {
    17ce:	2f 92       	push	r2
    17d0:	3f 92       	push	r3
    17d2:	4f 92       	push	r4
    17d4:	5f 92       	push	r5
    17d6:	6f 92       	push	r6
    17d8:	7f 92       	push	r7
    17da:	8f 92       	push	r8
    17dc:	9f 92       	push	r9
    17de:	af 92       	push	r10
    17e0:	bf 92       	push	r11
    17e2:	cf 92       	push	r12
    17e4:	df 92       	push	r13
    17e6:	ef 92       	push	r14
    17e8:	ff 92       	push	r15
    17ea:	0f 93       	push	r16
    17ec:	1f 93       	push	r17
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
    17f2:	00 d0       	rcall	.+0      	; 0x17f4 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0x26>
    17f4:	1f 92       	push	r1
    17f6:	cd b7       	in	r28, 0x3d	; 61
    17f8:	de b7       	in	r29, 0x3e	; 62
    uint8_t current_byte;
    uint8_t byte_width = (width + 7)/8;
    17fa:	e2 2f       	mov	r30, r18
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	37 96       	adiw	r30, 0x07	; 7
    1800:	3f 01       	movw	r6, r30
    1802:	1a f4       	brpl	.+6      	; 0x180a <_ZN11Framebuffer10drawBitmapEPKhhhhh+0x3c>
    1804:	37 e0       	ldi	r19, 0x07	; 7
    1806:	63 0e       	add	r6, r19
    1808:	71 1c       	adc	r7, r1
    180a:	75 94       	asr	r7
    180c:	67 94       	ror	r6
    180e:	75 94       	asr	r7
    1810:	67 94       	ror	r6
    1812:	75 94       	asr	r7
    1814:	67 94       	ror	r6

    for (uint8_t current_y = 0; current_y < height; current_y++) {
    1816:	44 23       	and	r20, r20
    1818:	09 f4       	brne	.+2      	; 0x181c <_ZN11Framebuffer10drawBitmapEPKhhhhh+0x4e>
    181a:	4b c0       	rjmp	.+150    	; 0x18b2 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0xe4>
    181c:	42 2e       	mov	r4, r18
    181e:	5b 01       	movw	r10, r22
    1820:	6c 01       	movw	r12, r24
    1822:	24 2e       	mov	r2, r20
    1824:	2e 0c       	add	r2, r14
    1826:	81 2c       	mov	r8, r1
    1828:	91 2c       	mov	r9, r1
        for (uint8_t current_x = 0; current_x < width; current_x++) {
            current_byte = pgm_read_byte(progmem_bitmap + current_y*byte_width + current_x/8);
    182a:	77 24       	eor	r7, r7
    182c:	09 83       	std	Y+1, r16	; 0x01
    182e:	31 2c       	mov	r3, r1
            if (current_byte & (128 >> (current_x&7))) {
    1830:	00 e8       	ldi	r16, 0x80	; 128
    1832:	10 e0       	ldi	r17, 0x00	; 0
    1834:	30 c0       	rjmp	.+96     	; 0x1896 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0xc8>
    uint8_t current_byte;
    uint8_t byte_width = (width + 7)/8;

    for (uint8_t current_y = 0; current_y < height; current_y++) {
        for (uint8_t current_x = 0; current_x < width; current_x++) {
            current_byte = pgm_read_byte(progmem_bitmap + current_y*byte_width + current_x/8);
    1836:	8f 2d       	mov	r24, r15
    1838:	86 95       	lsr	r24
    183a:	86 95       	lsr	r24
    183c:	86 95       	lsr	r24
    183e:	ea 81       	ldd	r30, Y+2	; 0x02
    1840:	fb 81       	ldd	r31, Y+3	; 0x03
    1842:	e8 0f       	add	r30, r24
    1844:	f1 1d       	adc	r31, r1
    1846:	ea 0d       	add	r30, r10
    1848:	fb 1d       	adc	r31, r11
    184a:	84 91       	lpm	r24, Z
            if (current_byte & (128 >> (current_x&7))) {
    184c:	9f 2d       	mov	r25, r15
    184e:	97 70       	andi	r25, 0x07	; 7
    1850:	98 01       	movw	r18, r16
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0x8a>
    1854:	35 95       	asr	r19
    1856:	27 95       	ror	r18
    1858:	9a 95       	dec	r25
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0x86>
    185c:	e8 2f       	mov	r30, r24
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	e2 23       	and	r30, r18
    1862:	f3 23       	and	r31, r19
    1864:	ef 2b       	or	r30, r31
    1866:	39 f0       	breq	.+14     	; 0x1876 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0xa8>
                this->drawPixel(current_x+pos_x,current_y+pos_y,1);
    1868:	21 e0       	ldi	r18, 0x01	; 1
    186a:	4e 2d       	mov	r20, r14
    186c:	65 2d       	mov	r22, r5
    186e:	c6 01       	movw	r24, r12
    1870:	0e 94 af 0b 	call	0x175e	; 0x175e <_ZN11Framebuffer9drawPixelEhhh>
    1874:	06 c0       	rjmp	.+12     	; 0x1882 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0xb4>
            } else {
                this->drawPixel(current_x+pos_x,current_y+pos_y,0);
    1876:	23 2d       	mov	r18, r3
    1878:	4e 2d       	mov	r20, r14
    187a:	65 2d       	mov	r22, r5
    187c:	c6 01       	movw	r24, r12
    187e:	0e 94 af 0b 	call	0x175e	; 0x175e <_ZN11Framebuffer9drawPixelEhhh>
void Framebuffer::drawBitmap(const uint8_t *progmem_bitmap, uint8_t height, uint8_t width, uint8_t pos_x, uint8_t pos_y) {
    uint8_t current_byte;
    uint8_t byte_width = (width + 7)/8;

    for (uint8_t current_y = 0; current_y < height; current_y++) {
        for (uint8_t current_x = 0; current_x < width; current_x++) {
    1882:	f3 94       	inc	r15
    1884:	53 94       	inc	r5
    1886:	f4 10       	cpse	r15, r4
    1888:	d6 cf       	rjmp	.-84     	; 0x1836 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0x68>
    188a:	8f ef       	ldi	r24, 0xFF	; 255
    188c:	88 1a       	sub	r8, r24
    188e:	98 0a       	sbc	r9, r24
    1890:	e3 94       	inc	r14
#ifndef SIMULATOR
void Framebuffer::drawBitmap(const uint8_t *progmem_bitmap, uint8_t height, uint8_t width, uint8_t pos_x, uint8_t pos_y) {
    uint8_t current_byte;
    uint8_t byte_width = (width + 7)/8;

    for (uint8_t current_y = 0; current_y < height; current_y++) {
    1892:	e2 14       	cp	r14, r2
    1894:	71 f0       	breq	.+28     	; 0x18b2 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0xe4>
        for (uint8_t current_x = 0; current_x < width; current_x++) {
    1896:	44 20       	and	r4, r4
    1898:	c1 f3       	breq	.-16     	; 0x188a <_ZN11Framebuffer10drawBitmapEPKhhhhh+0xbc>
            current_byte = pgm_read_byte(progmem_bitmap + current_y*byte_width + current_x/8);
    189a:	86 9c       	mul	r8, r6
    189c:	f0 01       	movw	r30, r0
    189e:	87 9c       	mul	r8, r7
    18a0:	f0 0d       	add	r31, r0
    18a2:	96 9c       	mul	r9, r6
    18a4:	f0 0d       	add	r31, r0
    18a6:	11 24       	eor	r1, r1
    18a8:	fb 83       	std	Y+3, r31	; 0x03
    18aa:	ea 83       	std	Y+2, r30	; 0x02
    18ac:	59 80       	ldd	r5, Y+1	; 0x01
    18ae:	f3 2c       	mov	r15, r3
    18b0:	c2 cf       	rjmp	.-124    	; 0x1836 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0x68>
            } else {
                this->drawPixel(current_x+pos_x,current_y+pos_y,0);
            }
        }
    }
}
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	df 91       	pop	r29
    18ba:	cf 91       	pop	r28
    18bc:	1f 91       	pop	r17
    18be:	0f 91       	pop	r16
    18c0:	ff 90       	pop	r15
    18c2:	ef 90       	pop	r14
    18c4:	df 90       	pop	r13
    18c6:	cf 90       	pop	r12
    18c8:	bf 90       	pop	r11
    18ca:	af 90       	pop	r10
    18cc:	9f 90       	pop	r9
    18ce:	8f 90       	pop	r8
    18d0:	7f 90       	pop	r7
    18d2:	6f 90       	pop	r6
    18d4:	5f 90       	pop	r5
    18d6:	4f 90       	pop	r4
    18d8:	3f 90       	pop	r3
    18da:	2f 90       	pop	r2
    18dc:	08 95       	ret

000018de <_ZN11Framebuffer9drawPixelEhh>:
        this->buffer[pos_x+(pos_y/8)*SSD1306_WIDTH] &= ~(1 << (pos_y&7));
    }
}

void Framebuffer::drawPixel(uint8_t pos_x, uint8_t pos_y) {
    if (pos_x >= SSD1306_WIDTH || pos_y >= SSD1306_HEIGHT) {
    18de:	66 23       	and	r22, r22
    18e0:	cc f0       	brlt	.+50     	; 0x1914 <_ZN11Framebuffer9drawPixelEhh+0x36>
    18e2:	40 34       	cpi	r20, 0x40	; 64
    18e4:	b8 f4       	brcc	.+46     	; 0x1914 <_ZN11Framebuffer9drawPixelEhh+0x36>
        return;
    }

    this->buffer[pos_x+(pos_y/8)*SSD1306_WIDTH] |= (1 << (pos_y&7));
    18e6:	24 2f       	mov	r18, r20
    18e8:	26 95       	lsr	r18
    18ea:	26 95       	lsr	r18
    18ec:	26 95       	lsr	r18
    18ee:	30 e8       	ldi	r19, 0x80	; 128
    18f0:	23 9f       	mul	r18, r19
    18f2:	f0 01       	movw	r30, r0
    18f4:	11 24       	eor	r1, r1
    18f6:	e6 0f       	add	r30, r22
    18f8:	f1 1d       	adc	r31, r1
    18fa:	e8 0f       	add	r30, r24
    18fc:	f9 1f       	adc	r31, r25
    18fe:	47 70       	andi	r20, 0x07	; 7
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	02 c0       	rjmp	.+4      	; 0x190a <_ZN11Framebuffer9drawPixelEhh+0x2c>
    1906:	88 0f       	add	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	4a 95       	dec	r20
    190c:	e2 f7       	brpl	.-8      	; 0x1906 <_ZN11Framebuffer9drawPixelEhh+0x28>
    190e:	90 81       	ld	r25, Z
    1910:	89 2b       	or	r24, r25
    1912:	80 83       	st	Z, r24
    1914:	08 95       	ret

00001916 <_ZN11Framebuffer9drawVLineEhhh>:
}

void Framebuffer::drawVLine(uint8_t x, uint8_t y, uint8_t length) {
    1916:	ff 92       	push	r15
    1918:	0f 93       	push	r16
    191a:	1f 93       	push	r17
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
    for (uint8_t i = 0; i < length; ++i) {
    1920:	22 23       	and	r18, r18
    1922:	69 f0       	breq	.+26     	; 0x193e <_ZN11Framebuffer9drawVLineEhhh+0x28>
    1924:	c4 2f       	mov	r28, r20
    1926:	f6 2e       	mov	r15, r22
    1928:	8c 01       	movw	r16, r24
    192a:	d2 2f       	mov	r29, r18
    192c:	d4 0f       	add	r29, r20
        this->drawPixel(x,i+y);
    192e:	4c 2f       	mov	r20, r28
    1930:	6f 2d       	mov	r22, r15
    1932:	c8 01       	movw	r24, r16
    1934:	0e 94 6f 0c 	call	0x18de	; 0x18de <_ZN11Framebuffer9drawPixelEhh>
    1938:	cf 5f       	subi	r28, 0xFF	; 255

    this->buffer[pos_x+(pos_y/8)*SSD1306_WIDTH] |= (1 << (pos_y&7));
}

void Framebuffer::drawVLine(uint8_t x, uint8_t y, uint8_t length) {
    for (uint8_t i = 0; i < length; ++i) {
    193a:	cd 13       	cpse	r28, r29
    193c:	f8 cf       	rjmp	.-16     	; 0x192e <_ZN11Framebuffer9drawVLineEhhh+0x18>
        this->drawPixel(x,i+y);
    }
}
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	1f 91       	pop	r17
    1944:	0f 91       	pop	r16
    1946:	ff 90       	pop	r15
    1948:	08 95       	ret

0000194a <_ZN11Framebuffer9drawHLineEhhh>:

void Framebuffer::drawHLine(uint8_t x, uint8_t y, uint8_t length) {
    194a:	ff 92       	push	r15
    194c:	0f 93       	push	r16
    194e:	1f 93       	push	r17
    1950:	cf 93       	push	r28
    1952:	df 93       	push	r29
    for (uint8_t i = 0; i < length; ++i) {
    1954:	22 23       	and	r18, r18
    1956:	69 f0       	breq	.+26     	; 0x1972 <_ZN11Framebuffer9drawHLineEhhh+0x28>
    1958:	f4 2e       	mov	r15, r20
    195a:	c6 2f       	mov	r28, r22
    195c:	8c 01       	movw	r16, r24
    195e:	d2 2f       	mov	r29, r18
    1960:	d6 0f       	add	r29, r22
        this->drawPixel(i+x,y);
    1962:	4f 2d       	mov	r20, r15
    1964:	6c 2f       	mov	r22, r28
    1966:	c8 01       	movw	r24, r16
    1968:	0e 94 6f 0c 	call	0x18de	; 0x18de <_ZN11Framebuffer9drawPixelEhh>
    196c:	cf 5f       	subi	r28, 0xFF	; 255
        this->drawPixel(x,i+y);
    }
}

void Framebuffer::drawHLine(uint8_t x, uint8_t y, uint8_t length) {
    for (uint8_t i = 0; i < length; ++i) {
    196e:	cd 13       	cpse	r28, r29
    1970:	f8 cf       	rjmp	.-16     	; 0x1962 <_ZN11Framebuffer9drawHLineEhhh+0x18>
        this->drawPixel(i+x,y);
    }
}
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	1f 91       	pop	r17
    1978:	0f 91       	pop	r16
    197a:	ff 90       	pop	r15
    197c:	08 95       	ret

0000197e <_ZN11Framebuffer13drawRectangleEhhhh>:

void Framebuffer::drawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
    197e:	cf 92       	push	r12
    1980:	df 92       	push	r13
    1982:	ef 92       	push	r14
    1984:	ff 92       	push	r15
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	ec 01       	movw	r28, r24
    1990:	f6 2e       	mov	r15, r22
    1992:	14 2f       	mov	r17, r20
    1994:	d2 2e       	mov	r13, r18
    uint8_t length = x2 - x1 + 1;
    1996:	e2 2e       	mov	r14, r18
    1998:	e6 1a       	sub	r14, r22
    199a:	e3 94       	inc	r14
    uint8_t height = y2 - y1;
    199c:	c0 2e       	mov	r12, r16
    199e:	c4 1a       	sub	r12, r20

    this->drawHLine(x1,y1,length);
    19a0:	2e 2d       	mov	r18, r14
    19a2:	0e 94 a5 0c 	call	0x194a	; 0x194a <_ZN11Framebuffer9drawHLineEhhh>
    this->drawHLine(x1,y2,length);
    19a6:	2e 2d       	mov	r18, r14
    19a8:	40 2f       	mov	r20, r16
    19aa:	6f 2d       	mov	r22, r15
    19ac:	ce 01       	movw	r24, r28
    19ae:	0e 94 a5 0c 	call	0x194a	; 0x194a <_ZN11Framebuffer9drawHLineEhhh>
    this->drawVLine(x1,y1,height);
    19b2:	2c 2d       	mov	r18, r12
    19b4:	41 2f       	mov	r20, r17
    19b6:	6f 2d       	mov	r22, r15
    19b8:	ce 01       	movw	r24, r28
    19ba:	0e 94 8b 0c 	call	0x1916	; 0x1916 <_ZN11Framebuffer9drawVLineEhhh>
    this->drawVLine(x2,y1,height);
    19be:	2c 2d       	mov	r18, r12
    19c0:	41 2f       	mov	r20, r17
    19c2:	6d 2d       	mov	r22, r13
    19c4:	ce 01       	movw	r24, r28
    19c6:	0e 94 8b 0c 	call	0x1916	; 0x1916 <_ZN11Framebuffer9drawVLineEhhh>
}
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	ff 90       	pop	r15
    19d4:	ef 90       	pop	r14
    19d6:	df 90       	pop	r13
    19d8:	cf 90       	pop	r12
    19da:	08 95       	ret

000019dc <_ZN11Framebuffer5clearEv>:
            }
        }
    }
}

void Framebuffer::clear() {
    19dc:	fc 01       	movw	r30, r24
    19de:	9c 5f       	subi	r25, 0xFC	; 252
    for (uint16_t buffer_location = 0; buffer_location < SSD1306_BUFFERSIZE; buffer_location++) {
        this->buffer[buffer_location] = 0x00;
    19e0:	11 92       	st	Z+, r1
        }
    }
}

void Framebuffer::clear() {
    for (uint16_t buffer_location = 0; buffer_location < SSD1306_BUFFERSIZE; buffer_location++) {
    19e2:	e8 17       	cp	r30, r24
    19e4:	f9 07       	cpc	r31, r25
    19e6:	e1 f7       	brne	.-8      	; 0x19e0 <_ZN11Framebuffer5clearEv+0x4>
        this->buffer[buffer_location] = 0x00;
    }
}
    19e8:	08 95       	ret

000019ea <_ZN11FramebufferC1Ev>:
For more information, please refer to <http://unlicense.org/>
*/

#include "Framebuffer.h"

Framebuffer::Framebuffer() {
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	ec 01       	movw	r28, r24
    19f0:	9c 5f       	subi	r25, 0xFC	; 252
    19f2:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <_ZN7SSD1306C1Ev>
    this->clear();
    19f6:	ce 01       	movw	r24, r28
    19f8:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <_ZN11Framebuffer5clearEv>
}
    19fc:	df 91       	pop	r29
    19fe:	cf 91       	pop	r28
    1a00:	08 95       	ret

00001a02 <_ZN11Framebuffer4showEv>:
void Framebuffer::invert(uint8_t status) {
    this->oled.invert(status);
}

void Framebuffer::show() {
    this->oled.sendFramebuffer(this->buffer);
    1a02:	bc 01       	movw	r22, r24
    1a04:	9c 5f       	subi	r25, 0xFC	; 252
    1a06:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <_ZN7SSD130615sendFramebufferEPh>
    1a0a:	08 95       	ret

00001a0c <_ZN3I2CC1Ev>:
*/

#include "I2C.h"
#define F_CPU 8000000UL

I2C::I2C() {}
    1a0c:	08 95       	ret

00001a0e <_ZN3I2C4initEh>:

void I2C::init(uint8_t address) {
    this->address = address;
    1a0e:	fc 01       	movw	r30, r24
    1a10:	60 83       	st	Z, r22
    TWSR = 0;
    1a12:	10 92 b9 00 	sts	0x00B9, r1
    TWBR = ((F_CPU/SCL_CLOCK)-16)/2;
    1a16:	80 e2       	ldi	r24, 0x20	; 32
    1a18:	80 93 b8 00 	sts	0x00B8, r24
    1a1c:	08 95       	ret

00001a1e <_ZN3I2C5startEv>:
}

uint8_t I2C::start() {
    1a1e:	dc 01       	movw	r26, r24
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    1a20:	84 ea       	ldi	r24, 0xA4	; 164
    1a22:	80 93 bc 00 	sts	0x00BC, r24
    while(!(TWCR & (1<<TWINT)));
    1a26:	ec eb       	ldi	r30, 0xBC	; 188
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	90 81       	ld	r25, Z
    1a2c:	99 23       	and	r25, r25
    1a2e:	ec f7       	brge	.-6      	; 0x1a2a <_ZN3I2C5startEv+0xc>

    twi_status_register = TW_STATUS & 0xF8;
    1a30:	90 91 b9 00 	lds	r25, 0x00B9
    1a34:	98 7f       	andi	r25, 0xF8	; 248
    1a36:	11 96       	adiw	r26, 0x01	; 1
    1a38:	9c 93       	st	X, r25
    1a3a:	11 97       	sbiw	r26, 0x01	; 1
    if ((this->twi_status_register != TW_START) && (this->twi_status_register != TW_REP_START)) {
    1a3c:	98 30       	cpi	r25, 0x08	; 8
    1a3e:	11 f0       	breq	.+4      	; 0x1a44 <_ZN3I2C5startEv+0x26>
    1a40:	90 31       	cpi	r25, 0x10	; 16
    1a42:	b9 f4       	brne	.+46     	; 0x1a72 <_ZN3I2C5startEv+0x54>
        return 1;
    }

    TWDR = address;
    1a44:	8c 91       	ld	r24, X
    1a46:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = (1<<TWINT) | (1<<TWEN);
    1a4a:	84 e8       	ldi	r24, 0x84	; 132
    1a4c:	80 93 bc 00 	sts	0x00BC, r24

    while(!(TWCR & (1<<TWINT)));
    1a50:	ec eb       	ldi	r30, 0xBC	; 188
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	90 81       	ld	r25, Z
    1a56:	99 23       	and	r25, r25
    1a58:	ec f7       	brge	.-6      	; 0x1a54 <_ZN3I2C5startEv+0x36>

    this->twi_status_register = TW_STATUS & 0xF8;
    1a5a:	90 91 b9 00 	lds	r25, 0x00B9
    1a5e:	98 7f       	andi	r25, 0xF8	; 248
    1a60:	11 96       	adiw	r26, 0x01	; 1
    1a62:	9c 93       	st	X, r25
    if ((this->twi_status_register != TW_MT_SLA_ACK) && (this->twi_status_register != TW_MR_SLA_ACK)) {
    1a64:	98 31       	cpi	r25, 0x18	; 24
    1a66:	39 f0       	breq	.+14     	; 0x1a76 <_ZN3I2C5startEv+0x58>
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 34       	cpi	r25, 0x40	; 64
    1a6c:	29 f4       	brne	.+10     	; 0x1a78 <_ZN3I2C5startEv+0x5a>
    1a6e:	80 e0       	ldi	r24, 0x00	; 0
    1a70:	08 95       	ret
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    while(!(TWCR & (1<<TWINT)));

    twi_status_register = TW_STATUS & 0xF8;
    if ((this->twi_status_register != TW_START) && (this->twi_status_register != TW_REP_START)) {
        return 1;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	08 95       	ret
    this->twi_status_register = TW_STATUS & 0xF8;
    if ((this->twi_status_register != TW_MT_SLA_ACK) && (this->twi_status_register != TW_MR_SLA_ACK)) {
        return 1;
    }

    return 0;
    1a76:	80 e0       	ldi	r24, 0x00	; 0
}
    1a78:	08 95       	ret

00001a7a <_ZN3I2C5writeEh>:

uint8_t I2C::write(uint8_t data) {
    1a7a:	dc 01       	movw	r26, r24
    TWDR = data;
    1a7c:	60 93 bb 00 	sts	0x00BB, r22
    TWCR = (1<<TWINT) | (1<<TWEN);
    1a80:	84 e8       	ldi	r24, 0x84	; 132
    1a82:	80 93 bc 00 	sts	0x00BC, r24

    while(!(TWCR & (1<<TWINT)));
    1a86:	ec eb       	ldi	r30, 0xBC	; 188
    1a88:	f0 e0       	ldi	r31, 0x00	; 0
    1a8a:	90 81       	ld	r25, Z
    1a8c:	99 23       	and	r25, r25
    1a8e:	ec f7       	brge	.-6      	; 0x1a8a <_ZN3I2C5writeEh+0x10>

    this->twi_status_register = TW_STATUS & 0xF8;
    1a90:	90 91 b9 00 	lds	r25, 0x00B9
    1a94:	98 7f       	andi	r25, 0xF8	; 248
    1a96:	11 96       	adiw	r26, 0x01	; 1
    1a98:	9c 93       	st	X, r25
    if (this->twi_status_register != TW_MT_DATA_ACK) {
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	98 32       	cpi	r25, 0x28	; 40
    1a9e:	09 f4       	brne	.+2      	; 0x1aa2 <_ZN3I2C5writeEh+0x28>
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
        return 1;
    } else {
        return 0;
    }
}
    1aa2:	08 95       	ret

00001aa4 <_ZN3I2C4stopEv>:

void I2C::stop(void) {
    TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    1aa4:	84 e9       	ldi	r24, 0x94	; 148
    1aa6:	80 93 bc 00 	sts	0x00BC, r24
    while(TWCR & (1<<TWSTO));
    1aaa:	ec eb       	ldi	r30, 0xBC	; 188
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	84 fd       	sbrc	r24, 4
    1ab2:	fd cf       	rjmp	.-6      	; 0x1aae <_ZN3I2C4stopEv+0xa>
    1ab4:	08 95       	ret

00001ab6 <_Z9Punctuatec>:
	0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x00, 0x00
};

uint8_t Punctuate(char mark)
{
	switch (mark)
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	fc 01       	movw	r30, r24
    1aba:	b1 97       	sbiw	r30, 0x21	; 33
    1abc:	ee 35       	cpi	r30, 0x5E	; 94
    1abe:	f1 05       	cpc	r31, r1
    1ac0:	08 f0       	brcs	.+2      	; 0x1ac4 <_Z9Punctuatec+0xe>
    1ac2:	48 c0       	rjmp	.+144    	; 0x1b54 <_Z9Punctuatec+0x9e>
    1ac4:	ec 5c       	subi	r30, 0xCC	; 204
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	0c 94 62 18 	jmp	0x30c4	; 0x30c4 <__tablejump2__>
	{
		case '!': return EXCLAMATION; break;
		case '"' : return DQUOTE; break;
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	08 95       	ret
		case '#' : return HASH; break;
    1ad0:	82 e0       	ldi	r24, 0x02	; 2
    1ad2:	08 95       	ret
		case '$' : return DOLLAR; break;
    1ad4:	83 e0       	ldi	r24, 0x03	; 3
    1ad6:	08 95       	ret
		case '%' : return PERCENT; break;
    1ad8:	84 e0       	ldi	r24, 0x04	; 4
    1ada:	08 95       	ret
		case '&' : return AMPERSAND; break;
    1adc:	85 e0       	ldi	r24, 0x05	; 5
    1ade:	08 95       	ret
		case '\'' : return SQUOTE; break;
    1ae0:	86 e0       	ldi	r24, 0x06	; 6
    1ae2:	08 95       	ret
		case '(' : return OBRACKET; break;
    1ae4:	87 e0       	ldi	r24, 0x07	; 7
    1ae6:	08 95       	ret
		case ')' : return CBRACKET; break;
    1ae8:	88 e0       	ldi	r24, 0x08	; 8
    1aea:	08 95       	ret
		case '*' : return ASTERISK; break;
    1aec:	89 e0       	ldi	r24, 0x09	; 9
    1aee:	08 95       	ret
		case '+' : return PLUS; break;
    1af0:	8a e0       	ldi	r24, 0x0A	; 10
    1af2:	08 95       	ret
		case ',' : return COMMA; break;
    1af4:	8b e0       	ldi	r24, 0x0B	; 11
    1af6:	08 95       	ret
		case '-' : return DASH; break;
    1af8:	8c e0       	ldi	r24, 0x0C	; 12
    1afa:	08 95       	ret
		case '.' : return DOT; break;
    1afc:	8d e0       	ldi	r24, 0x0D	; 13
    1afe:	08 95       	ret
		case '/' : return FSLASH; break;
    1b00:	8e e0       	ldi	r24, 0x0E	; 14
    1b02:	08 95       	ret
		case '0' : return ZERO; break;
    1b04:	8f e0       	ldi	r24, 0x0F	; 15
    1b06:	08 95       	ret
		case ':' : return COLON; break;
    1b08:	89 e1       	ldi	r24, 0x19	; 25
    1b0a:	08 95       	ret
		case ';' : return SCOLON; break;
    1b0c:	8a e1       	ldi	r24, 0x1A	; 26
    1b0e:	08 95       	ret
		case '<' : return LTHAN; break;
    1b10:	8b e1       	ldi	r24, 0x1B	; 27
    1b12:	08 95       	ret
		case '=' : return EQUALS; break;
    1b14:	8c e1       	ldi	r24, 0x1C	; 28
    1b16:	08 95       	ret
		case '>' : return GTHAN; break;
    1b18:	8d e1       	ldi	r24, 0x1D	; 29
    1b1a:	08 95       	ret
		case '?' : return QUESTION; break;
    1b1c:	8e e1       	ldi	r24, 0x1E	; 30
    1b1e:	08 95       	ret
		case '@' : return AT; break;
    1b20:	8f e1       	ldi	r24, 0x1F	; 31
    1b22:	08 95       	ret
		case 'A' : return CAPA; break;
    1b24:	80 e2       	ldi	r24, 0x20	; 32
    1b26:	08 95       	ret
		case '[' : return OSQUARE; break;
    1b28:	8a e3       	ldi	r24, 0x3A	; 58
    1b2a:	08 95       	ret
		case '\\' : return BSLASH; break;
    1b2c:	8b e3       	ldi	r24, 0x3B	; 59
    1b2e:	08 95       	ret
		case ']' : return CSQUARE; break;
    1b30:	8c e3       	ldi	r24, 0x3C	; 60
    1b32:	08 95       	ret
		case '^' : return CARET; break;
    1b34:	8d e3       	ldi	r24, 0x3D	; 61
    1b36:	08 95       	ret
		case '_' : return USCORE; break;
    1b38:	8e e3       	ldi	r24, 0x3E	; 62
    1b3a:	08 95       	ret
		case '`' : return OQUOTE; break;
    1b3c:	8f e3       	ldi	r24, 0x3F	; 63
    1b3e:	08 95       	ret
		case 'a' : return LOWERA; break;
    1b40:	80 e4       	ldi	r24, 0x40	; 64
    1b42:	08 95       	ret
		case '{' : return OCURL; break;
    1b44:	8a e5       	ldi	r24, 0x5A	; 90
    1b46:	08 95       	ret
		case '|' : return PIPE; break;
    1b48:	8b e5       	ldi	r24, 0x5B	; 91
    1b4a:	08 95       	ret
		case '}' : return CCURL; break;
    1b4c:	8c e5       	ldi	r24, 0x5C	; 92
    1b4e:	08 95       	ret
		case '~' : return TILDE; break;
    1b50:	8d e5       	ldi	r24, 0x5D	; 93
    1b52:	08 95       	ret
		
	}
	return QUESTION;
    1b54:	8e e1       	ldi	r24, 0x1E	; 30
    1b56:	08 95       	ret

uint8_t Punctuate(char mark)
{
	switch (mark)
	{
		case '!': return EXCLAMATION; break;
    1b58:	80 e0       	ldi	r24, 0x00	; 0
		case '}' : return CCURL; break;
		case '~' : return TILDE; break;
		
	}
	return QUESTION;
}
    1b5a:	08 95       	ret

00001b5c <_Z9WriteTextPK9FONT_INFOPKchhh>:

void WriteText(const FONT_INFO *fontp, const char text[], uint8_t x, uint8_t y, uint8_t orient )
{
    1b5c:	2f 92       	push	r2
    1b5e:	3f 92       	push	r3
    1b60:	4f 92       	push	r4
    1b62:	5f 92       	push	r5
    1b64:	6f 92       	push	r6
    1b66:	7f 92       	push	r7
    1b68:	8f 92       	push	r8
    1b6a:	9f 92       	push	r9
    1b6c:	af 92       	push	r10
    1b6e:	bf 92       	push	r11
    1b70:	cf 92       	push	r12
    1b72:	df 92       	push	r13
    1b74:	ef 92       	push	r14
    1b76:	ff 92       	push	r15
    1b78:	0f 93       	push	r16
    1b7a:	1f 93       	push	r17
    1b7c:	cf 93       	push	r28
    1b7e:	df 93       	push	r29
    1b80:	00 d0       	rcall	.+0      	; 0x1b82 <_Z9WriteTextPK9FONT_INFOPKchhh+0x26>
    1b82:	00 d0       	rcall	.+0      	; 0x1b84 <_Z9WriteTextPK9FONT_INFOPKchhh+0x28>
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
    1b88:	5c 01       	movw	r10, r24
    1b8a:	7a 83       	std	Y+2, r23	; 0x02
    1b8c:	69 83       	std	Y+1, r22	; 0x01
    1b8e:	14 2f       	mov	r17, r20
    1b90:	22 2e       	mov	r2, r18
    1b92:	e0 2e       	mov	r14, r16
			fb.drawBitmap(fontp->data +pgm_read_word(&(fontp->charInfo[chars[i]].offset)),fontp->heightPixels,pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits)),x,y);
			x=x+pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits))+2;
		}
	}
	
}
    1b94:	2d b7       	in	r18, 0x3d	; 61
    1b96:	3e b7       	in	r19, 0x3e	; 62
    1b98:	3c 83       	std	Y+4, r19	; 0x04
    1b9a:	2b 83       	std	Y+3, r18	; 0x03

void WriteText(const FONT_INFO *fontp, const char text[], uint8_t x, uint8_t y, uint8_t orient )
{
	
	//uint8_t chars[sizeof(text)];
	uint8_t nChars = (strlen(text));
    1b9c:	fb 01       	movw	r30, r22
    1b9e:	01 90       	ld	r0, Z+
    1ba0:	00 20       	and	r0, r0
    1ba2:	e9 f7       	brne	.-6      	; 0x1b9e <_Z9WriteTextPK9FONT_INFOPKchhh+0x42>
    1ba4:	31 97       	sbiw	r30, 0x01	; 1
    1ba6:	cf 01       	movw	r24, r30
    1ba8:	86 1b       	sub	r24, r22
    1baa:	97 0b       	sbc	r25, r23
    1bac:	f8 2e       	mov	r15, r24
    1bae:	99 27       	eor	r25, r25
	uint8_t chars[nChars]={0};
    1bb0:	ed b7       	in	r30, 0x3d	; 61
    1bb2:	fe b7       	in	r31, 0x3e	; 62
    1bb4:	e8 1b       	sub	r30, r24
    1bb6:	f9 0b       	sbc	r31, r25
    1bb8:	0f b6       	in	r0, 0x3f	; 63
    1bba:	f8 94       	cli
    1bbc:	fe bf       	out	0x3e, r31	; 62
    1bbe:	0f be       	out	0x3f, r0	; 63
    1bc0:	ed bf       	out	0x3d, r30	; 61
    1bc2:	2d b7       	in	r18, 0x3d	; 61
    1bc4:	3e b7       	in	r19, 0x3e	; 62
    1bc6:	2f 5f       	subi	r18, 0xFF	; 255
    1bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bca:	29 01       	movw	r4, r18
    1bcc:	11 82       	std	Z+1, r1	; 0x01
    1bce:	32 96       	adiw	r30, 0x02	; 2
    1bd0:	81 30       	cpi	r24, 0x01	; 1
    1bd2:	91 05       	cpc	r25, r1
    1bd4:	31 f0       	breq	.+12     	; 0x1be2 <_Z9WriteTextPK9FONT_INFOPKchhh+0x86>
    1bd6:	82 0f       	add	r24, r18
    1bd8:	93 1f       	adc	r25, r19
    1bda:	11 92       	st	Z+, r1
    1bdc:	e8 17       	cp	r30, r24
    1bde:	f9 07       	cpc	r31, r25
    1be0:	e1 f7       	brne	.-8      	; 0x1bda <_Z9WriteTextPK9FONT_INFOPKchhh+0x7e>
	
	uint8_t width=0;

	
	//for (uint8_t i=0; i<sizeof(text);i++)
	for (uint8_t i=0; i<nChars;i++)
    1be2:	ff 20       	and	r15, r15
    1be4:	09 f4       	brne	.+2      	; 0x1be8 <_Z9WriteTextPK9FONT_INFOPKchhh+0x8c>
    1be6:	a1 c0       	rjmp	.+322    	; 0x1d2a <_Z9WriteTextPK9FONT_INFOPKchhh+0x1ce>
    1be8:	89 80       	ldd	r8, Y+1	; 0x01
    1bea:	9a 80       	ldd	r9, Y+2	; 0x02
    1bec:	04 2d       	mov	r16, r4
    1bee:	c4 2c       	mov	r12, r4
    1bf0:	d5 2c       	mov	r13, r5
    1bf2:	31 2c       	mov	r3, r1
	{
		if ((uint8_t)text[i]==0x20) width=width+fontp->spacePixels;
    1bf4:	d4 01       	movw	r26, r8
    1bf6:	8d 91       	ld	r24, X+
    1bf8:	4d 01       	movw	r8, r26
    1bfa:	80 32       	cpi	r24, 0x20	; 32
    1bfc:	21 f4       	brne	.+8      	; 0x1c06 <_Z9WriteTextPK9FONT_INFOPKchhh+0xaa>
    1bfe:	f5 01       	movw	r30, r10
    1c00:	83 81       	ldd	r24, Z+3	; 0x03
    1c02:	38 0e       	add	r3, r24
    1c04:	34 c0       	rjmp	.+104    	; 0x1c6e <_Z9WriteTextPK9FONT_INFOPKchhh+0x112>
		else
		{
			if ((uint8_t)text[i]>=0x41 && (uint8_t)text[i]<=0x5A) chars[i]=(uint8_t)text[i]-0x41+CAPA;
    1c06:	9f eb       	ldi	r25, 0xBF	; 191
    1c08:	98 0f       	add	r25, r24
    1c0a:	9a 31       	cpi	r25, 0x1A	; 26
    1c0c:	20 f4       	brcc	.+8      	; 0x1c16 <_Z9WriteTextPK9FONT_INFOPKchhh+0xba>
    1c0e:	9f ed       	ldi	r25, 0xDF	; 223
    1c10:	98 0f       	add	r25, r24
    1c12:	d6 01       	movw	r26, r12
    1c14:	9c 93       	st	X, r25
			if ((uint8_t)text[i]>=0x61 && (uint8_t)text[i]<=0x7A) chars[i]=(uint8_t)text[i]-0x61+LOWERA;
    1c16:	9f e9       	ldi	r25, 0x9F	; 159
    1c18:	98 0f       	add	r25, r24
    1c1a:	9a 31       	cpi	r25, 0x1A	; 26
    1c1c:	20 f4       	brcc	.+8      	; 0x1c26 <_Z9WriteTextPK9FONT_INFOPKchhh+0xca>
    1c1e:	9f ed       	ldi	r25, 0xDF	; 223
    1c20:	98 0f       	add	r25, r24
    1c22:	f6 01       	movw	r30, r12
    1c24:	90 83       	st	Z, r25
			if ((uint8_t)text[i]>=0x30 && (uint8_t)text[i]<=0x39) chars[i]=(uint8_t)text[i]-0x30+ZERO;
    1c26:	90 ed       	ldi	r25, 0xD0	; 208
    1c28:	98 0f       	add	r25, r24
    1c2a:	9a 30       	cpi	r25, 0x0A	; 10
    1c2c:	20 f4       	brcc	.+8      	; 0x1c36 <_Z9WriteTextPK9FONT_INFOPKchhh+0xda>
    1c2e:	9f ed       	ldi	r25, 0xDF	; 223
    1c30:	98 0f       	add	r25, r24
    1c32:	d6 01       	movw	r26, r12
    1c34:	9c 93       	st	X, r25
    1c36:	36 01       	movw	r6, r12
			if (chars[i]==0) chars[i]=Punctuate(text[i]);
    1c38:	f6 01       	movw	r30, r12
    1c3a:	90 81       	ld	r25, Z
    1c3c:	91 11       	cpse	r25, r1
    1c3e:	04 c0       	rjmp	.+8      	; 0x1c48 <_Z9WriteTextPK9FONT_INFOPKchhh+0xec>
    1c40:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <_Z9Punctuatec>
    1c44:	d6 01       	movw	r26, r12
    1c46:	8c 93       	st	X, r24
			width=width+pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits))+2;
    1c48:	d3 01       	movw	r26, r6
    1c4a:	ec 91       	ld	r30, X
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	cf 01       	movw	r24, r30
    1c50:	88 0f       	add	r24, r24
    1c52:	99 1f       	adc	r25, r25
    1c54:	e8 0f       	add	r30, r24
    1c56:	f9 1f       	adc	r31, r25
    1c58:	d5 01       	movw	r26, r10
    1c5a:	14 96       	adiw	r26, 0x04	; 4
    1c5c:	8d 91       	ld	r24, X+
    1c5e:	9c 91       	ld	r25, X
    1c60:	15 97       	sbiw	r26, 0x05	; 5
    1c62:	e8 0f       	add	r30, r24
    1c64:	f9 1f       	adc	r31, r25
    1c66:	e4 91       	lpm	r30, Z
    1c68:	33 94       	inc	r3
    1c6a:	33 94       	inc	r3
    1c6c:	3e 0e       	add	r3, r30
    1c6e:	bf ef       	ldi	r27, 0xFF	; 255
    1c70:	cb 1a       	sub	r12, r27
    1c72:	db 0a       	sbc	r13, r27
    1c74:	8c 2d       	mov	r24, r12
    1c76:	80 1b       	sub	r24, r16
	
	uint8_t width=0;

	
	//for (uint8_t i=0; i<sizeof(text);i++)
	for (uint8_t i=0; i<nChars;i++)
    1c78:	8f 15       	cp	r24, r15
    1c7a:	08 f4       	brcc	.+2      	; 0x1c7e <_Z9WriteTextPK9FONT_INFOPKchhh+0x122>
    1c7c:	bb cf       	rjmp	.-138    	; 0x1bf4 <_Z9WriteTextPK9FONT_INFOPKchhh+0x98>
			if ((uint8_t)text[i]>=0x30 && (uint8_t)text[i]<=0x39) chars[i]=(uint8_t)text[i]-0x30+ZERO;
			if (chars[i]==0) chars[i]=Punctuate(text[i]);
			width=width+pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits))+2;
		}
	}
	switch(orient)
    1c7e:	e1 e0       	ldi	r30, 0x01	; 1
    1c80:	ee 16       	cp	r14, r30
    1c82:	49 f0       	breq	.+18     	; 0x1c96 <_Z9WriteTextPK9FONT_INFOPKchhh+0x13a>
    1c84:	ee 16       	cp	r14, r30
    1c86:	20 f0       	brcs	.+8      	; 0x1c90 <_Z9WriteTextPK9FONT_INFOPKchhh+0x134>
    1c88:	f2 e0       	ldi	r31, 0x02	; 2
    1c8a:	ef 16       	cp	r14, r31
    1c8c:	49 f0       	breq	.+18     	; 0x1ca0 <_Z9WriteTextPK9FONT_INFOPKchhh+0x144>
    1c8e:	0a c0       	rjmp	.+20     	; 0x1ca4 <_Z9WriteTextPK9FONT_INFOPKchhh+0x148>
	{
		case LEFT: x=0; break;
    1c90:	10 e0       	ldi	r17, 0x00	; 0
    1c92:	08 c0       	rjmp	.+16     	; 0x1ca4 <_Z9WriteTextPK9FONT_INFOPKchhh+0x148>
			if ((uint8_t)text[i]>=0x30 && (uint8_t)text[i]<=0x39) chars[i]=(uint8_t)text[i]-0x30+ZERO;
			if (chars[i]==0) chars[i]=Punctuate(text[i]);
			width=width+pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits))+2;
		}
	}
	switch(orient)
    1c94:	31 2c       	mov	r3, r1
	{
		case LEFT: x=0; break;
		case CENTRE: x=64-(width/2); break;
    1c96:	36 94       	lsr	r3
    1c98:	10 e4       	ldi	r17, 0x40	; 64
    1c9a:	13 19       	sub	r17, r3
    1c9c:	03 c0       	rjmp	.+6      	; 0x1ca4 <_Z9WriteTextPK9FONT_INFOPKchhh+0x148>
			if ((uint8_t)text[i]>=0x30 && (uint8_t)text[i]<=0x39) chars[i]=(uint8_t)text[i]-0x30+ZERO;
			if (chars[i]==0) chars[i]=Punctuate(text[i]);
			width=width+pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits))+2;
		}
	}
	switch(orient)
    1c9e:	31 2c       	mov	r3, r1
	{
		case LEFT: x=0; break;
		case CENTRE: x=64-(width/2); break;
		case RIGHT: x=128-width; break;
    1ca0:	10 e8       	ldi	r17, 0x80	; 128
    1ca2:	13 19       	sub	r17, r3
	}
	//for (uint8_t i=0; i<sizeof(text);i++)
	for (uint8_t i=0; i<nChars;i++)
    1ca4:	ff 20       	and	r15, r15
    1ca6:	09 f4       	brne	.+2      	; 0x1caa <_Z9WriteTextPK9FONT_INFOPKchhh+0x14e>
    1ca8:	4b c0       	rjmp	.+150    	; 0x1d40 <_Z9WriteTextPK9FONT_INFOPKchhh+0x1e4>
    1caa:	39 80       	ldd	r3, Y+1	; 0x01
    1cac:	32 01       	movw	r6, r4
    1cae:	83 2c       	mov	r8, r3
    1cb0:	9a 80       	ldd	r9, Y+2	; 0x02
	{
		if ((uint8_t)text[i]==0x20) x=x+fontp->spacePixels;
    1cb2:	d4 01       	movw	r26, r8
    1cb4:	8d 91       	ld	r24, X+
    1cb6:	4d 01       	movw	r8, r26
    1cb8:	80 32       	cpi	r24, 0x20	; 32
    1cba:	21 f4       	brne	.+8      	; 0x1cc4 <_Z9WriteTextPK9FONT_INFOPKchhh+0x168>
    1cbc:	f5 01       	movw	r30, r10
    1cbe:	83 81       	ldd	r24, Z+3	; 0x03
    1cc0:	18 0f       	add	r17, r24
    1cc2:	2a c0       	rjmp	.+84     	; 0x1d18 <_Z9WriteTextPK9FONT_INFOPKchhh+0x1bc>
		else
		{
			fb.drawBitmap(fontp->data +pgm_read_word(&(fontp->charInfo[chars[i]].offset)),fontp->heightPixels,pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits)),x,y);
    1cc4:	d3 01       	movw	r26, r6
    1cc6:	cc 90       	ld	r12, X
    1cc8:	8c 2d       	mov	r24, r12
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	6c 01       	movw	r12, r24
    1cce:	cc 0c       	add	r12, r12
    1cd0:	dd 1c       	adc	r13, r13
    1cd2:	c8 0e       	add	r12, r24
    1cd4:	d9 1e       	adc	r13, r25
    1cd6:	d5 01       	movw	r26, r10
    1cd8:	14 96       	adiw	r26, 0x04	; 4
    1cda:	ed 91       	ld	r30, X+
    1cdc:	fc 91       	ld	r31, X
    1cde:	15 97       	sbiw	r26, 0x05	; 5
    1ce0:	ec 0d       	add	r30, r12
    1ce2:	fd 1d       	adc	r31, r13
    1ce4:	24 91       	lpm	r18, Z
    1ce6:	31 96       	adiw	r30, 0x01	; 1
    1ce8:	85 91       	lpm	r24, Z+
    1cea:	94 91       	lpm	r25, Z
    1cec:	f5 01       	movw	r30, r10
    1cee:	66 81       	ldd	r22, Z+6	; 0x06
    1cf0:	77 81       	ldd	r23, Z+7	; 0x07
    1cf2:	68 0f       	add	r22, r24
    1cf4:	79 1f       	adc	r23, r25
    1cf6:	e2 2c       	mov	r14, r2
    1cf8:	01 2f       	mov	r16, r17
    1cfa:	40 81       	ld	r20, Z
    1cfc:	85 e1       	ldi	r24, 0x15	; 21
    1cfe:	92 e0       	ldi	r25, 0x02	; 2
    1d00:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN11Framebuffer10drawBitmapEPKhhhhh>
			x=x+pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits))+2;
    1d04:	d5 01       	movw	r26, r10
    1d06:	14 96       	adiw	r26, 0x04	; 4
    1d08:	ed 91       	ld	r30, X+
    1d0a:	fc 91       	ld	r31, X
    1d0c:	15 97       	sbiw	r26, 0x05	; 5
    1d0e:	ec 0d       	add	r30, r12
    1d10:	fd 1d       	adc	r31, r13
    1d12:	e4 91       	lpm	r30, Z
    1d14:	1e 5f       	subi	r17, 0xFE	; 254
    1d16:	1e 0f       	add	r17, r30
    1d18:	bf ef       	ldi	r27, 0xFF	; 255
    1d1a:	6b 1a       	sub	r6, r27
    1d1c:	7b 0a       	sbc	r7, r27
    1d1e:	88 2d       	mov	r24, r8
    1d20:	83 19       	sub	r24, r3
		case LEFT: x=0; break;
		case CENTRE: x=64-(width/2); break;
		case RIGHT: x=128-width; break;
	}
	//for (uint8_t i=0; i<sizeof(text);i++)
	for (uint8_t i=0; i<nChars;i++)
    1d22:	8f 15       	cp	r24, r15
    1d24:	08 f4       	brcc	.+2      	; 0x1d28 <_Z9WriteTextPK9FONT_INFOPKchhh+0x1cc>
    1d26:	c5 cf       	rjmp	.-118    	; 0x1cb2 <_Z9WriteTextPK9FONT_INFOPKchhh+0x156>
    1d28:	0b c0       	rjmp	.+22     	; 0x1d40 <_Z9WriteTextPK9FONT_INFOPKchhh+0x1e4>
			if ((uint8_t)text[i]>=0x30 && (uint8_t)text[i]<=0x39) chars[i]=(uint8_t)text[i]-0x30+ZERO;
			if (chars[i]==0) chars[i]=Punctuate(text[i]);
			width=width+pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits))+2;
		}
	}
	switch(orient)
    1d2a:	e1 e0       	ldi	r30, 0x01	; 1
    1d2c:	ee 16       	cp	r14, r30
    1d2e:	09 f4       	brne	.+2      	; 0x1d32 <_Z9WriteTextPK9FONT_INFOPKchhh+0x1d6>
    1d30:	b1 cf       	rjmp	.-158    	; 0x1c94 <_Z9WriteTextPK9FONT_INFOPKchhh+0x138>
    1d32:	ee 16       	cp	r14, r30
    1d34:	08 f4       	brcc	.+2      	; 0x1d38 <_Z9WriteTextPK9FONT_INFOPKchhh+0x1dc>
    1d36:	ac cf       	rjmp	.-168    	; 0x1c90 <_Z9WriteTextPK9FONT_INFOPKchhh+0x134>
    1d38:	f2 e0       	ldi	r31, 0x02	; 2
    1d3a:	ef 16       	cp	r14, r31
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <_Z9WriteTextPK9FONT_INFOPKchhh+0x1e4>
    1d3e:	af cf       	rjmp	.-162    	; 0x1c9e <_Z9WriteTextPK9FONT_INFOPKchhh+0x142>
			fb.drawBitmap(fontp->data +pgm_read_word(&(fontp->charInfo[chars[i]].offset)),fontp->heightPixels,pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits)),x,y);
			x=x+pgm_read_byte(&(fontp->charInfo[chars[i]].widthBits))+2;
		}
	}
	
}
    1d40:	2b 81       	ldd	r18, Y+3	; 0x03
    1d42:	3c 81       	ldd	r19, Y+4	; 0x04
    1d44:	0f b6       	in	r0, 0x3f	; 63
    1d46:	f8 94       	cli
    1d48:	3e bf       	out	0x3e, r19	; 62
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	2d bf       	out	0x3d, r18	; 61
    1d4e:	0f 90       	pop	r0
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	df 91       	pop	r29
    1d58:	cf 91       	pop	r28
    1d5a:	1f 91       	pop	r17
    1d5c:	0f 91       	pop	r16
    1d5e:	ff 90       	pop	r15
    1d60:	ef 90       	pop	r14
    1d62:	df 90       	pop	r13
    1d64:	cf 90       	pop	r12
    1d66:	bf 90       	pop	r11
    1d68:	af 90       	pop	r10
    1d6a:	9f 90       	pop	r9
    1d6c:	8f 90       	pop	r8
    1d6e:	7f 90       	pop	r7
    1d70:	6f 90       	pop	r6
    1d72:	5f 90       	pop	r5
    1d74:	4f 90       	pop	r4
    1d76:	3f 90       	pop	r3
    1d78:	2f 90       	pop	r2
    1d7a:	08 95       	ret

00001d7c <_Z11Byte2StringPch>:

void Byte2String (char* outstr ,uint8_t u8t)
{
    1d7c:	fc 01       	movw	r30, r24
	
	if((uint8_t)u8t/100==0){
    1d7e:	64 36       	cpi	r22, 0x64	; 100
    1d80:	80 f4       	brcc	.+32     	; 0x1da2 <_Z11Byte2StringPch+0x26>
		outstr[0]=0x20;
    1d82:	80 e2       	ldi	r24, 0x20	; 32
    1d84:	80 83       	st	Z, r24
	} else {
		outstr[0]=0x30 + (uint8_t)u8t/100;
	}	
	
	if((uint8_t)u8t/100==0 && (uint8_t)(u8t%100)/10==0){
    1d86:	89 e2       	ldi	r24, 0x29	; 41
    1d88:	68 9f       	mul	r22, r24
    1d8a:	81 2d       	mov	r24, r1
    1d8c:	11 24       	eor	r1, r1
    1d8e:	82 95       	swap	r24
    1d90:	8f 70       	andi	r24, 0x0F	; 15
    1d92:	96 2f       	mov	r25, r22
    1d94:	24 e6       	ldi	r18, 0x64	; 100
    1d96:	82 9f       	mul	r24, r18
    1d98:	90 19       	sub	r25, r0
    1d9a:	11 24       	eor	r1, r1
    1d9c:	9a 30       	cpi	r25, 0x0A	; 10
    1d9e:	68 f4       	brcc	.+26     	; 0x1dba <_Z11Byte2StringPch+0x3e>
    1da0:	09 c0       	rjmp	.+18     	; 0x1db4 <_Z11Byte2StringPch+0x38>
{
	
	if((uint8_t)u8t/100==0){
		outstr[0]=0x20;
	} else {
		outstr[0]=0x30 + (uint8_t)u8t/100;
    1da2:	89 e2       	ldi	r24, 0x29	; 41
    1da4:	68 9f       	mul	r22, r24
    1da6:	81 2d       	mov	r24, r1
    1da8:	11 24       	eor	r1, r1
    1daa:	82 95       	swap	r24
    1dac:	8f 70       	andi	r24, 0x0F	; 15
    1dae:	80 5d       	subi	r24, 0xD0	; 208
    1db0:	80 83       	st	Z, r24
    1db2:	03 c0       	rjmp	.+6      	; 0x1dba <_Z11Byte2StringPch+0x3e>
	}	
	
	if((uint8_t)u8t/100==0 && (uint8_t)(u8t%100)/10==0){
		outstr[1]=0x20;
    1db4:	80 e2       	ldi	r24, 0x20	; 32
    1db6:	81 83       	std	Z+1, r24	; 0x01
    1db8:	15 c0       	rjmp	.+42     	; 0x1de4 <_Z11Byte2StringPch+0x68>
	} else {
		outstr[1]= 0x30 + (uint8_t)(u8t%100)/10;
    1dba:	99 e2       	ldi	r25, 0x29	; 41
    1dbc:	69 9f       	mul	r22, r25
    1dbe:	91 2d       	mov	r25, r1
    1dc0:	11 24       	eor	r1, r1
    1dc2:	92 95       	swap	r25
    1dc4:	9f 70       	andi	r25, 0x0F	; 15
    1dc6:	86 2f       	mov	r24, r22
    1dc8:	24 e6       	ldi	r18, 0x64	; 100
    1dca:	92 9f       	mul	r25, r18
    1dcc:	80 19       	sub	r24, r0
    1dce:	11 24       	eor	r1, r1
    1dd0:	98 2f       	mov	r25, r24
    1dd2:	8d ec       	ldi	r24, 0xCD	; 205
    1dd4:	98 9f       	mul	r25, r24
    1dd6:	91 2d       	mov	r25, r1
    1dd8:	11 24       	eor	r1, r1
    1dda:	96 95       	lsr	r25
    1ddc:	96 95       	lsr	r25
    1dde:	96 95       	lsr	r25
    1de0:	90 5d       	subi	r25, 0xD0	; 208
    1de2:	91 83       	std	Z+1, r25	; 0x01
	}
	
	outstr[2]=0x30 + (uint8_t)(u8t%10);
    1de4:	9d ec       	ldi	r25, 0xCD	; 205
    1de6:	69 9f       	mul	r22, r25
    1de8:	91 2d       	mov	r25, r1
    1dea:	11 24       	eor	r1, r1
    1dec:	96 95       	lsr	r25
    1dee:	96 95       	lsr	r25
    1df0:	96 95       	lsr	r25
    1df2:	99 0f       	add	r25, r25
    1df4:	89 2f       	mov	r24, r25
    1df6:	88 0f       	add	r24, r24
    1df8:	88 0f       	add	r24, r24
    1dfa:	98 0f       	add	r25, r24
    1dfc:	69 1b       	sub	r22, r25
    1dfe:	60 5d       	subi	r22, 0xD0	; 208
    1e00:	62 83       	std	Z+2, r22	; 0x02
    1e02:	08 95       	ret

00001e04 <__vector_11>:
}

ISR(TIMER1_COMPA_vect) { 
    1e04:	1f 92       	push	r1
    1e06:	0f 92       	push	r0
    1e08:	0f b6       	in	r0, 0x3f	; 63
    1e0a:	0f 92       	push	r0
    1e0c:	11 24       	eor	r1, r1
    1e0e:	2f 93       	push	r18
    1e10:	3f 93       	push	r19
    1e12:	4f 93       	push	r20
    1e14:	5f 93       	push	r21
    1e16:	8f 93       	push	r24
    1e18:	9f 93       	push	r25
    1e1a:	ef 93       	push	r30
    1e1c:	ff 93       	push	r31

	TC++;
    1e1e:	80 91 12 02 	lds	r24, 0x0212
    1e22:	90 91 13 02 	lds	r25, 0x0213
    1e26:	01 96       	adiw	r24, 0x01	; 1
    1e28:	90 93 13 02 	sts	0x0213, r25
    1e2c:	80 93 12 02 	sts	0x0212, r24
	if (TC>=1000) 	TC=0;
    1e30:	80 91 12 02 	lds	r24, 0x0212
    1e34:	90 91 13 02 	lds	r25, 0x0213
    1e38:	88 3e       	cpi	r24, 0xE8	; 232
    1e3a:	93 40       	sbci	r25, 0x03	; 3
    1e3c:	20 f0       	brcs	.+8      	; 0x1e46 <__vector_11+0x42>
    1e3e:	10 92 13 02 	sts	0x0213, r1
    1e42:	10 92 12 02 	sts	0x0212, r1
	
	if ((PIND & (1<<DDD3))) {
    1e46:	4b 9b       	sbis	0x09, 3	; 9
    1e48:	1d c0       	rjmp	.+58     	; 0x1e84 <__vector_11+0x80>
		buffer[(uint16_t)TC/8] |= (1<<(TC%8));
    1e4a:	20 91 12 02 	lds	r18, 0x0212
    1e4e:	30 91 13 02 	lds	r19, 0x0213
    1e52:	e0 91 12 02 	lds	r30, 0x0212
    1e56:	f0 91 13 02 	lds	r31, 0x0213
    1e5a:	f6 95       	lsr	r31
    1e5c:	e7 95       	ror	r30
    1e5e:	f6 95       	lsr	r31
    1e60:	e7 95       	ror	r30
    1e62:	f6 95       	lsr	r31
    1e64:	e7 95       	ror	r30
    1e66:	eb 5f       	subi	r30, 0xFB	; 251
    1e68:	fe 4f       	sbci	r31, 0xFE	; 254
    1e6a:	40 81       	ld	r20, Z
    1e6c:	27 70       	andi	r18, 0x07	; 7
    1e6e:	33 27       	eor	r19, r19
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <__vector_11+0x76>
    1e76:	88 0f       	add	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	2a 95       	dec	r18
    1e7c:	e2 f7       	brpl	.-8      	; 0x1e76 <__vector_11+0x72>
    1e7e:	84 2b       	or	r24, r20
    1e80:	80 83       	st	Z, r24
    1e82:	20 c0       	rjmp	.+64     	; 0x1ec4 <__vector_11+0xc0>
	} else {
		buffer[(uint16_t)TC/8] &= ~(1<<(TC%8));
    1e84:	40 91 12 02 	lds	r20, 0x0212
    1e88:	50 91 13 02 	lds	r21, 0x0213
    1e8c:	e0 91 12 02 	lds	r30, 0x0212
    1e90:	f0 91 13 02 	lds	r31, 0x0213
    1e94:	f6 95       	lsr	r31
    1e96:	e7 95       	ror	r30
    1e98:	f6 95       	lsr	r31
    1e9a:	e7 95       	ror	r30
    1e9c:	f6 95       	lsr	r31
    1e9e:	e7 95       	ror	r30
    1ea0:	eb 5f       	subi	r30, 0xFB	; 251
    1ea2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ea4:	20 81       	ld	r18, Z
    1ea6:	47 70       	andi	r20, 0x07	; 7
    1ea8:	55 27       	eor	r21, r21
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	02 c0       	rjmp	.+4      	; 0x1eb4 <__vector_11+0xb0>
    1eb0:	88 0f       	add	r24, r24
    1eb2:	99 1f       	adc	r25, r25
    1eb4:	4a 95       	dec	r20
    1eb6:	e2 f7       	brpl	.-8      	; 0x1eb0 <__vector_11+0xac>
    1eb8:	80 95       	com	r24
    1eba:	90 95       	com	r25
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	82 23       	and	r24, r18
    1ec0:	93 23       	and	r25, r19
    1ec2:	80 83       	st	Z, r24
	}

	if (TC==LEdge) { 
    1ec4:	20 91 12 02 	lds	r18, 0x0212
    1ec8:	30 91 13 02 	lds	r19, 0x0213
    1ecc:	80 91 10 02 	lds	r24, 0x0210
    1ed0:	90 91 11 02 	lds	r25, 0x0211
    1ed4:	28 17       	cp	r18, r24
    1ed6:	39 07       	cpc	r19, r25
    1ed8:	59 f4       	brne	.+22     	; 0x1ef0 <__vector_11+0xec>
		TICK=true;	
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	80 93 14 02 	sts	0x0214, r24
		TC=0;
    1ee0:	10 92 13 02 	sts	0x0213, r1
    1ee4:	10 92 12 02 	sts	0x0212, r1
		LEdge=0;
    1ee8:	10 92 11 02 	sts	0x0211, r1
    1eec:	10 92 10 02 	sts	0x0210, r1
	}

}
    1ef0:	ff 91       	pop	r31
    1ef2:	ef 91       	pop	r30
    1ef4:	9f 91       	pop	r25
    1ef6:	8f 91       	pop	r24
    1ef8:	5f 91       	pop	r21
    1efa:	4f 91       	pop	r20
    1efc:	3f 91       	pop	r19
    1efe:	2f 91       	pop	r18
    1f00:	0f 90       	pop	r0
    1f02:	0f be       	out	0x3f, r0	; 63
    1f04:	0f 90       	pop	r0
    1f06:	1f 90       	pop	r1
    1f08:	18 95       	reti

00001f0a <main>:

int main(void)
{
    1f0a:	cf 93       	push	r28
    1f0c:	df 93       	push	r29
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
    1f12:	c0 5b       	subi	r28, 0xB0	; 176
    1f14:	d1 09       	sbc	r29, r1
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	f8 94       	cli
    1f1a:	de bf       	out	0x3e, r29	; 62
    1f1c:	0f be       	out	0x3f, r0	; 63
    1f1e:	cd bf       	out	0x3d, r28	; 61
	uint16_t y=0;
	
	// Leading Edge detection variables
	uint16_t LEdgeSMin=0; // bottom of leading edge search range
	uint8_t LEdgeSRange=100; // leading edge search bin size - effectively acts as Ledge Search mode too
	uint8_t LEdgeCount[10]={0}; // count of hits in each bin for current second
    1f20:	fe 01       	movw	r30, r28
    1f22:	ed 57       	subi	r30, 0x7D	; 125
    1f24:	ff 4f       	sbci	r31, 0xFF	; 255
    1f26:	8a e0       	ldi	r24, 0x0A	; 10
    1f28:	df 01       	movw	r26, r30
    1f2a:	28 2f       	mov	r18, r24
    1f2c:	1d 92       	st	X+, r1
    1f2e:	2a 95       	dec	r18
    1f30:	e9 f7       	brne	.-6      	; 0x1f2c <main+0x22>
	uint8_t LEdgeSum[10]={0};	// count of consecutive seconds that a bin has had a hit
    1f32:	3a 97       	sbiw	r30, 0x0a	; 10
    1f34:	df 01       	movw	r26, r30
    1f36:	1d 92       	st	X+, r1
    1f38:	8a 95       	dec	r24
    1f3a:	e9 f7       	brne	.-6      	; 0x1f36 <main+0x2c>
	bool MMarkFound=false; // has the Minute Marker been found
	uint8_t SigSecond=0; // what second are we at during the minute?
	uint8_t BitASample=0; // for counting the strikes in the BitA window 
	uint8_t BitBSample=0; // for counting the strikes in the BitB window
	uint8_t BitCSample=0; // for counting the strikes in the remainder of the first half of the second
	bool BitA[60]={false}; // BitA array (one minute's worth)
    1f3c:	8c e3       	ldi	r24, 0x3C	; 60
    1f3e:	fc 97       	sbiw	r30, 0x3c	; 60
    1f40:	df 01       	movw	r26, r30
    1f42:	28 2f       	mov	r18, r24
    1f44:	1d 92       	st	X+, r1
    1f46:	2a 95       	dec	r18
    1f48:	e9 f7       	brne	.-6      	; 0x1f44 <main+0x3a>
	bool BitB[60]={false}; // BitB array (one minute's worth)
    1f4a:	fc 97       	sbiw	r30, 0x3c	; 60
    1f4c:	df 01       	movw	r26, r30
    1f4e:	1d 92       	st	X+, r1
    1f50:	8a 95       	dec	r24
    1f52:	e9 f7       	brne	.-6      	; 0x1f4e <main+0x44>
		
	bool PinState=false;
	bool PrevPinState=false;
	
	// Character arrays for converting numbers
	char BString[4]="   ";
    1f54:	80 e2       	ldi	r24, 0x20	; 32
    1f56:	90 e2       	ldi	r25, 0x20	; 32
    1f58:	a0 e2       	ldi	r26, 0x20	; 32
    1f5a:	b0 e0       	ldi	r27, 0x00	; 0
    1f5c:	c4 56       	subi	r28, 0x64	; 100
    1f5e:	df 4f       	sbci	r29, 0xFF	; 255
    1f60:	88 83       	st	Y, r24
    1f62:	99 83       	std	Y+1, r25	; 0x01
    1f64:	aa 83       	std	Y+2, r26	; 0x02
    1f66:	bb 83       	std	Y+3, r27	; 0x03
    1f68:	cc 59       	subi	r28, 0x9C	; 156
    1f6a:	d0 40       	sbci	r29, 0x00	; 0
	char DString[9]="--/--/--";
    1f6c:	89 e0       	ldi	r24, 0x09	; 9
    1f6e:	e0 e0       	ldi	r30, 0x00	; 0
    1f70:	f2 e0       	ldi	r31, 0x02	; 2
    1f72:	de 01       	movw	r26, r28
    1f74:	a3 57       	subi	r26, 0x73	; 115
    1f76:	bf 4f       	sbci	r27, 0xFF	; 255
    1f78:	01 90       	ld	r0, Z+
    1f7a:	0d 92       	st	X+, r0
    1f7c:	8a 95       	dec	r24
    1f7e:	e1 f7       	brne	.-8      	; 0x1f78 <main+0x6e>
	char TString[6]="--:--";
    1f80:	86 e0       	ldi	r24, 0x06	; 6
    1f82:	e9 e0       	ldi	r30, 0x09	; 9
    1f84:	f2 e0       	ldi	r31, 0x02	; 2
    1f86:	de 01       	movw	r26, r28
    1f88:	aa 56       	subi	r26, 0x6A	; 106
    1f8a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f8c:	01 90       	ld	r0, Z+
    1f8e:	0d 92       	st	X+, r0
    1f90:	8a 95       	dec	r24
    1f92:	e1 f7       	brne	.-8      	; 0x1f8c <main+0x82>
	
	// Show splash-screen
	fb.clear();
    1f94:	85 e1       	ldi	r24, 0x15	; 21
    1f96:	92 e0       	ldi	r25, 0x02	; 2
    1f98:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <_ZN11Framebuffer5clearEv>
	fb.drawBitmap(Atomic,64,64,32,0);
    1f9c:	e1 2c       	mov	r14, r1
    1f9e:	00 e2       	ldi	r16, 0x20	; 32
    1fa0:	20 e4       	ldi	r18, 0x40	; 64
    1fa2:	40 e4       	ldi	r20, 0x40	; 64
    1fa4:	68 e0       	ldi	r22, 0x08	; 8
    1fa6:	75 e1       	ldi	r23, 0x15	; 21
    1fa8:	85 e1       	ldi	r24, 0x15	; 21
    1faa:	92 e0       	ldi	r25, 0x02	; 2
    1fac:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <_ZN11Framebuffer10drawBitmapEPKhhhhh>
	fb.show();
    1fb0:	85 e1       	ldi	r24, 0x15	; 21
    1fb2:	92 e0       	ldi	r25, 0x02	; 2
    1fb4:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <_ZN11Framebuffer4showEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1fb8:	bf ef       	ldi	r27, 0xFF	; 255
    1fba:	ed e3       	ldi	r30, 0x3D	; 61
    1fbc:	f9 e4       	ldi	r31, 0x49	; 73
    1fbe:	b1 50       	subi	r27, 0x01	; 1
    1fc0:	e0 40       	sbci	r30, 0x00	; 0
    1fc2:	f0 40       	sbci	r31, 0x00	; 0
    1fc4:	e1 f7       	brne	.-8      	; 0x1fbe <main+0xb4>
    1fc6:	00 c0       	rjmp	.+0      	; 0x1fc8 <main+0xbe>
    1fc8:	00 00       	nop
	_delay_ms(1500);
	fb.clear();
    1fca:	85 e1       	ldi	r24, 0x15	; 21
    1fcc:	92 e0       	ldi	r25, 0x02	; 2
    1fce:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <_ZN11Framebuffer5clearEv>
	fb.show();
    1fd2:	85 e1       	ldi	r24, 0x15	; 21
    1fd4:	92 e0       	ldi	r25, 0x02	; 2
    1fd6:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <_ZN11Framebuffer4showEv>

	// Enable atomic clock pulse pin for input
	DDRD &= ~(1<<DDD3);// // pin PC3
    1fda:	53 98       	cbi	0x0a, 3	; 10
	PORTD |= (1<<DDD3); //  pin PC3 set to pulled-up
    1fdc:	5b 9a       	sbi	0x0b, 3	; 11
	
	// Initialise ticker
	TCCR1B |= (1 << WGM12); // Configure timer 1 for CTC mode
    1fde:	e1 e8       	ldi	r30, 0x81	; 129
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	88 60       	ori	r24, 0x08	; 8
    1fe6:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS11); // Start timer at Fcpu/8
    1fe8:	80 81       	ld	r24, Z
    1fea:	82 60       	ori	r24, 0x02	; 2
    1fec:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A); // Enable CTC interrupt
    1fee:	ef e6       	ldi	r30, 0x6F	; 111
    1ff0:	f0 e0       	ldi	r31, 0x00	; 0
    1ff2:	80 81       	ld	r24, Z
    1ff4:	82 60       	ori	r24, 0x02	; 2
    1ff6:	80 83       	st	Z, r24
	sei(); // Enable global interrupts
    1ff8:	78 94       	sei
	OCR1A = 1999; // Set CTC compare value to 1000Hz at 16MHz AVR clock, with a prescaler of 8
    1ffa:	8f ec       	ldi	r24, 0xCF	; 207
    1ffc:	97 e0       	ldi	r25, 0x07	; 7
    1ffe:	90 93 89 00 	sts	0x0089, r25
    2002:	80 93 88 00 	sts	0x0088, r24
	uint8_t SigDoW=0;
	uint8_t SigDay=0;
	uint8_t SigMonth=0;
	uint8_t SigYear=0;
		
	bool PinState=false;
    2006:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t SigMinute=0;
	uint8_t SigHour=0;
	uint8_t SigDoW=0;
	uint8_t SigDay=0;
	uint8_t SigMonth=0;
	uint8_t SigYear=0;
    2008:	c1 55       	subi	r28, 0x51	; 81
    200a:	df 4f       	sbci	r29, 0xFF	; 255
    200c:	18 82       	st	Y, r1
    200e:	cf 5a       	subi	r28, 0xAF	; 175
    2010:	d0 40       	sbci	r29, 0x00	; 0
	// Time, date etc according to signal
	uint8_t SigMinute=0;
	uint8_t SigHour=0;
	uint8_t SigDoW=0;
	uint8_t SigDay=0;
	uint8_t SigMonth=0;
    2012:	c2 55       	subi	r28, 0x52	; 82
    2014:	df 4f       	sbci	r29, 0xFF	; 255
    2016:	18 82       	st	Y, r1
    2018:	ce 5a       	subi	r28, 0xAE	; 174
    201a:	d0 40       	sbci	r29, 0x00	; 0
	
	// Time, date etc according to signal
	uint8_t SigMinute=0;
	uint8_t SigHour=0;
	uint8_t SigDoW=0;
	uint8_t SigDay=0;
    201c:	c3 55       	subi	r28, 0x53	; 83
    201e:	df 4f       	sbci	r29, 0xFF	; 255
    2020:	18 82       	st	Y, r1
    2022:	cd 5a       	subi	r28, 0xAD	; 173
    2024:	d0 40       	sbci	r29, 0x00	; 0
	bool BitC=false; // BitC - just for the current second as it has no use other than for the minute marker
	
	// Time, date etc according to signal
	uint8_t SigMinute=0;
	uint8_t SigHour=0;
	uint8_t SigDoW=0;
    2026:	c0 55       	subi	r28, 0x50	; 80
    2028:	df 4f       	sbci	r29, 0xFF	; 255
    202a:	18 82       	st	Y, r1
    202c:	c0 5b       	subi	r28, 0xB0	; 176
    202e:	d0 40       	sbci	r29, 0x00	; 0
	bool BitB[60]={false}; // BitB array (one minute's worth)
	bool BitC=false; // BitC - just for the current second as it has no use other than for the minute marker
	
	// Time, date etc according to signal
	uint8_t SigMinute=0;
	uint8_t SigHour=0;
    2030:	c4 55       	subi	r28, 0x54	; 84
    2032:	df 4f       	sbci	r29, 0xFF	; 255
    2034:	18 82       	st	Y, r1
    2036:	cc 5a       	subi	r28, 0xAC	; 172
    2038:	d0 40       	sbci	r29, 0x00	; 0
	bool BitA[60]={false}; // BitA array (one minute's worth)
	bool BitB[60]={false}; // BitB array (one minute's worth)
	bool BitC=false; // BitC - just for the current second as it has no use other than for the minute marker
	
	// Time, date etc according to signal
	uint8_t SigMinute=0;
    203a:	c5 55       	subi	r28, 0x55	; 85
    203c:	df 4f       	sbci	r29, 0xFF	; 255
    203e:	18 82       	st	Y, r1
    2040:	cb 5a       	subi	r28, 0xAB	; 171
    2042:	d0 40       	sbci	r29, 0x00	; 0
	// Leading Edge adjustment variables
	bool LEdgeDetect= false;
	
	// Time decoding variables
	bool MMarkFound=false; // has the Minute Marker been found
	uint8_t SigSecond=0; // what second are we at during the minute?
    2044:	cd 55       	subi	r28, 0x5D	; 93
    2046:	df 4f       	sbci	r29, 0xFF	; 255
    2048:	18 82       	st	Y, r1
    204a:	c3 5a       	subi	r28, 0xA3	; 163
    204c:	d0 40       	sbci	r29, 0x00	; 0
	
	// Leading Edge adjustment variables
	bool LEdgeDetect= false;
	
	// Time decoding variables
	bool MMarkFound=false; // has the Minute Marker been found
    204e:	cb 55       	subi	r28, 0x5B	; 91
    2050:	df 4f       	sbci	r29, 0xFF	; 255
    2052:	18 82       	st	Y, r1
    2054:	c5 5a       	subi	r28, 0xA5	; 165
    2056:	d0 40       	sbci	r29, 0x00	; 0
	uint8_t LEdgeCount[10]={0}; // count of hits in each bin for current second
	uint8_t LEdgeSum[10]={0};	// count of consecutive seconds that a bin has had a hit
	uint8_t LEMax=0; // bin with highest number of consecutive hits
	uint8_t LE2Max=0; // bin with second highest number of consecutive hits
	uint8_t LESecsInMode=0; // number of seconds that we have been in this LEdge Search mode
	uint8_t LEdgeAdjust=0; // number of milliseconds to adjust tick counter by to allow for drift
    2058:	cc 55       	subi	r28, 0x5C	; 92
    205a:	df 4f       	sbci	r29, 0xFF	; 255
    205c:	18 82       	st	Y, r1
    205e:	c4 5a       	subi	r28, 0xA4	; 164
    2060:	d0 40       	sbci	r29, 0x00	; 0
	uint8_t LEdgeSRange=100; // leading edge search bin size - effectively acts as Ledge Search mode too
	uint8_t LEdgeCount[10]={0}; // count of hits in each bin for current second
	uint8_t LEdgeSum[10]={0};	// count of consecutive seconds that a bin has had a hit
	uint8_t LEMax=0; // bin with highest number of consecutive hits
	uint8_t LE2Max=0; // bin with second highest number of consecutive hits
	uint8_t LESecsInMode=0; // number of seconds that we have been in this LEdge Search mode
    2062:	c6 55       	subi	r28, 0x56	; 86
    2064:	df 4f       	sbci	r29, 0xFF	; 255
    2066:	18 82       	st	Y, r1
    2068:	ca 5a       	subi	r28, 0xAA	; 170
    206a:	d0 40       	sbci	r29, 0x00	; 0
	uint16_t LEdgeSMin=0; // bottom of leading edge search range
	uint8_t LEdgeSRange=100; // leading edge search bin size - effectively acts as Ledge Search mode too
	uint8_t LEdgeCount[10]={0}; // count of hits in each bin for current second
	uint8_t LEdgeSum[10]={0};	// count of consecutive seconds that a bin has had a hit
	uint8_t LEMax=0; // bin with highest number of consecutive hits
	uint8_t LE2Max=0; // bin with second highest number of consecutive hits
    206c:	c9 55       	subi	r28, 0x59	; 89
    206e:	df 4f       	sbci	r29, 0xFF	; 255
    2070:	18 82       	st	Y, r1
    2072:	c7 5a       	subi	r28, 0xA7	; 167
    2074:	d0 40       	sbci	r29, 0x00	; 0
	// Leading Edge detection variables
	uint16_t LEdgeSMin=0; // bottom of leading edge search range
	uint8_t LEdgeSRange=100; // leading edge search bin size - effectively acts as Ledge Search mode too
	uint8_t LEdgeCount[10]={0}; // count of hits in each bin for current second
	uint8_t LEdgeSum[10]={0};	// count of consecutive seconds that a bin has had a hit
	uint8_t LEMax=0; // bin with highest number of consecutive hits
    2076:	ca 55       	subi	r28, 0x5A	; 90
    2078:	df 4f       	sbci	r29, 0xFF	; 255
    207a:	18 82       	st	Y, r1
    207c:	c6 5a       	subi	r28, 0xA6	; 166
    207e:	d0 40       	sbci	r29, 0x00	; 0
	uint16_t x=0;
	uint16_t y=0;
	
	// Leading Edge detection variables
	uint16_t LEdgeSMin=0; // bottom of leading edge search range
	uint8_t LEdgeSRange=100; // leading edge search bin size - effectively acts as Ledge Search mode too
    2080:	24 e6       	ldi	r18, 0x64	; 100
    2082:	ce 55       	subi	r28, 0x5E	; 94
    2084:	df 4f       	sbci	r29, 0xFF	; 255
    2086:	28 83       	st	Y, r18
    2088:	c2 5a       	subi	r28, 0xA2	; 162
    208a:	d0 40       	sbci	r29, 0x00	; 0
	uint16_t i=0;
	uint16_t x=0;
	uint16_t y=0;
	
	// Leading Edge detection variables
	uint16_t LEdgeSMin=0; // bottom of leading edge search range
    208c:	21 2c       	mov	r2, r1
    208e:	31 2c       	mov	r3, r1
    2090:	ce 01       	movw	r24, r28
    2092:	87 58       	subi	r24, 0x87	; 135
    2094:	9f 4f       	sbci	r25, 0xFF	; 255
    2096:	c0 56       	subi	r28, 0x60	; 96
    2098:	df 4f       	sbci	r29, 0xFF	; 255
    209a:	99 83       	std	Y+1, r25	; 0x01
    209c:	88 83       	st	Y, r24
    209e:	c0 5a       	subi	r28, 0xA0	; 160
    20a0:	d0 40       	sbci	r29, 0x00	; 0
    20a2:	dc 01       	movw	r26, r24
    20a4:	1a 96       	adiw	r26, 0x0a	; 10
    20a6:	c8 55       	subi	r28, 0x58	; 88
    20a8:	df 4f       	sbci	r29, 0xFF	; 255
    20aa:	b9 83       	std	Y+1, r27	; 0x01
    20ac:	a8 83       	st	Y, r26
    20ae:	c8 5a       	subi	r28, 0xA8	; 168
    20b0:	d0 40       	sbci	r29, 0x00	; 0
					}
					
					if (MMarkFound) { // if minute marker found...
						// ... interpret data collected
						if (SigSecond==24) SigYear=BitA[17]*80 + BitA[18]*40 + BitA[19]*20 + BitA[20]*10 + BitA[21]*8 + BitA[22]*4 + BitA[23]*2 + BitA[24];
						if (SigSecond==29) SigMonth=BitA[25]*10 + BitA[26]*8 + BitA[27]*4 + BitA[28]*2 + BitA[29];
    20b2:	71 2e       	mov	r7, r17
	OCR1A = 1999; // Set CTC compare value to 1000Hz at 16MHz AVR clock, with a prescaler of 8
	
	/* Replace with your application code */
	while (1)
	{
		while (!TICK); // wait for a tick
    20b4:	80 91 14 02 	lds	r24, 0x0214
    20b8:	88 23       	and	r24, r24
    20ba:	e1 f3       	breq	.-8      	; 0x20b4 <main+0x1aa>
		TICK=false;
    20bc:	10 92 14 02 	sts	0x0214, r1
		
		fb.clear();
    20c0:	85 e1       	ldi	r24, 0x15	; 21
    20c2:	92 e0       	ldi	r25, 0x02	; 2
    20c4:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <_ZN11Framebuffer5clearEv>

		// Leading Edge Search Region below
		#pragma region LeadingEdgeSearch
		if (LEdgeSearch) {		
    20c8:	80 91 04 01 	lds	r24, 0x0104
    20cc:	88 23       	and	r24, r24
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <main+0x1c8>
    20d0:	e4 c1       	rjmp	.+968    	; 0x249a <main+0x590>
			
			fb.drawRectangle(10,12,113,25); // main signal window - shows whole second
    20d2:	09 e1       	ldi	r16, 0x19	; 25
    20d4:	21 e7       	ldi	r18, 0x71	; 113
    20d6:	4c e0       	ldi	r20, 0x0C	; 12
    20d8:	6a e0       	ldi	r22, 0x0A	; 10
    20da:	85 e1       	ldi	r24, 0x15	; 21
    20dc:	92 e0       	ldi	r25, 0x02	; 2
    20de:	0e 94 bf 0c 	call	0x197e	; 0x197e <_ZN11Framebuffer13drawRectangleEhhhh>
    20e2:	1c e0       	ldi	r17, 0x0C	; 12
			for (uint8_t j=0; j<=49; j++) {
				fb.drawPixel(12+j*2,43);
    20e4:	4b e2       	ldi	r20, 0x2B	; 43
    20e6:	61 2f       	mov	r22, r17
    20e8:	85 e1       	ldi	r24, 0x15	; 21
    20ea:	92 e0       	ldi	r25, 0x02	; 2
    20ec:	0e 94 6f 0c 	call	0x18de	; 0x18de <_ZN11Framebuffer9drawPixelEhh>
    20f0:	1e 5f       	subi	r17, 0xFE	; 254
		// Leading Edge Search Region below
		#pragma region LeadingEdgeSearch
		if (LEdgeSearch) {		
			
			fb.drawRectangle(10,12,113,25); // main signal window - shows whole second
			for (uint8_t j=0; j<=49; j++) {
    20f2:	10 37       	cpi	r17, 0x70	; 112
    20f4:	b9 f7       	brne	.-18     	; 0x20e4 <main+0x1da>
				fb.drawPixel(12+j*2,43);
			}
			
			if (LEdgeSRange==100) WriteText(&IM8_FontInfo,"Search : 100ms",63,0,CENTRE);
    20f6:	ce 55       	subi	r28, 0x5E	; 94
    20f8:	df 4f       	sbci	r29, 0xFF	; 255
    20fa:	b8 81       	ld	r27, Y
    20fc:	c2 5a       	subi	r28, 0xA2	; 162
    20fe:	d0 40       	sbci	r29, 0x00	; 0
    2100:	b4 36       	cpi	r27, 0x64	; 100
    2102:	51 f4       	brne	.+20     	; 0x2118 <main+0x20e>
    2104:	01 e0       	ldi	r16, 0x01	; 1
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	4f e3       	ldi	r20, 0x3F	; 63
    210a:	69 e9       	ldi	r22, 0x99	; 153
    210c:	71 e0       	ldi	r23, 0x01	; 1
    210e:	8d e8       	ldi	r24, 0x8D	; 141
    2110:	91 e0       	ldi	r25, 0x01	; 1
    2112:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_Z9WriteTextPK9FONT_INFOPKchhh>
    2116:	8d c6       	rjmp	.+3354   	; 0x2e32 <main+0xf28>
			if (LEdgeSRange==10) {
    2118:	ce 55       	subi	r28, 0x5E	; 94
    211a:	df 4f       	sbci	r29, 0xFF	; 255
    211c:	e8 81       	ld	r30, Y
    211e:	c2 5a       	subi	r28, 0xA2	; 162
    2120:	d0 40       	sbci	r29, 0x00	; 0
    2122:	ea 30       	cpi	r30, 0x0A	; 10
    2124:	09 f0       	breq	.+2      	; 0x2128 <main+0x21e>
    2126:	85 c6       	rjmp	.+3338   	; 0x2e32 <main+0xf28>
				WriteText(&IM8_FontInfo,"Search : 10ms",63,0,CENTRE);
    2128:	01 e0       	ldi	r16, 0x01	; 1
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	4f e3       	ldi	r20, 0x3F	; 63
    212e:	68 ea       	ldi	r22, 0xA8	; 168
    2130:	71 e0       	ldi	r23, 0x01	; 1
    2132:	8d e8       	ldi	r24, 0x8D	; 141
    2134:	91 e0       	ldi	r25, 0x01	; 1
    2136:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_Z9WriteTextPK9FONT_INFOPKchhh>
				fb.drawRectangle(10,31,113,40);
    213a:	08 e2       	ldi	r16, 0x28	; 40
    213c:	21 e7       	ldi	r18, 0x71	; 113
    213e:	4f e1       	ldi	r20, 0x1F	; 31
    2140:	6a e0       	ldi	r22, 0x0A	; 10
    2142:	85 e1       	ldi	r24, 0x15	; 21
    2144:	92 e0       	ldi	r25, 0x02	; 2
    2146:	0e 94 bf 0c 	call	0x197e	; 0x197e <_ZN11Framebuffer13drawRectangleEhhhh>
				Byte2String(BString,20-LESecsInMode);
    214a:	64 e1       	ldi	r22, 0x14	; 20
    214c:	c6 55       	subi	r28, 0x56	; 86
    214e:	df 4f       	sbci	r29, 0xFF	; 255
    2150:	f8 81       	ld	r31, Y
    2152:	ca 5a       	subi	r28, 0xAA	; 170
    2154:	d0 40       	sbci	r29, 0x00	; 0
    2156:	6f 1b       	sub	r22, r31
    2158:	ce 01       	movw	r24, r28
    215a:	84 56       	subi	r24, 0x64	; 100
    215c:	9f 4f       	sbci	r25, 0xFF	; 255
    215e:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <_Z11Byte2StringPch>
				WriteText(&IM8_FontInfo,BString,127,0,RIGHT);
    2162:	02 e0       	ldi	r16, 0x02	; 2
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	4f e7       	ldi	r20, 0x7F	; 127
    2168:	be 01       	movw	r22, r28
    216a:	64 56       	subi	r22, 0x64	; 100
    216c:	7f 4f       	sbci	r23, 0xFF	; 255
    216e:	8d e8       	ldi	r24, 0x8D	; 141
    2170:	91 e0       	ldi	r25, 0x01	; 1
    2172:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_Z9WriteTextPK9FONT_INFOPKchhh>
    2176:	5d c6       	rjmp	.+3258   	; 0x2e32 <main+0xf28>
			}
			
			x=0;  // Buffer byte counter
			y=0;  // Buffer bit counter
			for (i=0; i<=999; i++) {   // millisecond counter
				y++;
    2178:	2f ef       	ldi	r18, 0xFF	; 255
    217a:	e2 1a       	sub	r14, r18
    217c:	f2 0a       	sbc	r15, r18
				if (y==8) {  
    217e:	38 e0       	ldi	r19, 0x08	; 8
    2180:	e3 16       	cp	r14, r19
    2182:	f1 04       	cpc	r15, r1
    2184:	29 f4       	brne	.+10     	; 0x2190 <main+0x286>
					y=0;
					x++;
    2186:	8f ef       	ldi	r24, 0xFF	; 255
    2188:	c8 1a       	sub	r12, r24
    218a:	d8 0a       	sbc	r13, r24
			x=0;  // Buffer byte counter
			y=0;  // Buffer bit counter
			for (i=0; i<=999; i++) {   // millisecond counter
				y++;
				if (y==8) {  
					y=0;
    218c:	e4 2c       	mov	r14, r4
    218e:	f5 2c       	mov	r15, r5
    2190:	63 94       	inc	r6
					x++;
				}
				PrevPinState=PinState;
				PinState=CHECK_BIT(buffer[x],y);  // read pin state
    2192:	27 2d       	mov	r18, r7
    2194:	f6 01       	movw	r30, r12
    2196:	eb 5f       	subi	r30, 0xFB	; 251
    2198:	fe 4f       	sbci	r31, 0xFE	; 254
    219a:	80 81       	ld	r24, Z
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	0e 2c       	mov	r0, r14
    21a0:	02 c0       	rjmp	.+4      	; 0x21a6 <main+0x29c>
    21a2:	95 95       	asr	r25
    21a4:	87 95       	ror	r24
    21a6:	0a 94       	dec	r0
    21a8:	e2 f7       	brpl	.-8      	; 0x21a2 <main+0x298>
    21aa:	a8 2f       	mov	r26, r24
    21ac:	a1 70       	andi	r26, 0x01	; 1
    21ae:	7a 2e       	mov	r7, r26
			
				if (i>=LEdgeSMin && i<=LEdgeSMin+(10*LEdgeSRange)-1) // id ms counter within Leading Edge search range
    21b0:	02 15       	cp	r16, r2
    21b2:	13 05       	cpc	r17, r3
    21b4:	48 f1       	brcs	.+82     	; 0x2208 <main+0x2fe>
    21b6:	a0 16       	cp	r10, r16
    21b8:	b1 06       	cpc	r11, r17
    21ba:	30 f1       	brcs	.+76     	; 0x2208 <main+0x2fe>
				{
					if (!PrevPinState && PinState) 	LEdgeCount[(i-LEdgeSMin)/LEdgeSRange]++; // leading Edge found, increment counter for current bin
    21bc:	21 11       	cpse	r18, r1
    21be:	13 c0       	rjmp	.+38     	; 0x21e6 <main+0x2dc>
    21c0:	aa 23       	and	r26, r26
    21c2:	09 f4       	brne	.+2      	; 0x21c6 <main+0x2bc>
    21c4:	44 c0       	rjmp	.+136    	; 0x224e <main+0x344>
    21c6:	c8 01       	movw	r24, r16
    21c8:	82 19       	sub	r24, r2
    21ca:	93 09       	sbc	r25, r3
    21cc:	b4 01       	movw	r22, r8
    21ce:	0e 94 4e 18 	call	0x309c	; 0x309c <__udivmodhi4>
    21d2:	e3 e8       	ldi	r30, 0x83	; 131
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	ec 0f       	add	r30, r28
    21d8:	fd 1f       	adc	r31, r29
    21da:	e6 0f       	add	r30, r22
    21dc:	f7 1f       	adc	r31, r23
    21de:	80 81       	ld	r24, Z
    21e0:	8f 5f       	subi	r24, 0xFF	; 255
    21e2:	80 83       	st	Z, r24
    21e4:	02 c0       	rjmp	.+4      	; 0x21ea <main+0x2e0>
					if (PinState && LEdgeSRange==10) fb.drawVLine(12+(i-LEdgeSMin),33,6);
    21e6:	aa 23       	and	r26, r26
    21e8:	91 f1       	breq	.+100    	; 0x224e <main+0x344>
    21ea:	ce 55       	subi	r28, 0x5E	; 94
    21ec:	df 4f       	sbci	r29, 0xFF	; 255
    21ee:	b8 81       	ld	r27, Y
    21f0:	c2 5a       	subi	r28, 0xA2	; 162
    21f2:	d0 40       	sbci	r29, 0x00	; 0
    21f4:	ba 30       	cpi	r27, 0x0A	; 10
    21f6:	51 f4       	brne	.+20     	; 0x220c <main+0x302>
    21f8:	26 e0       	ldi	r18, 0x06	; 6
    21fa:	41 e2       	ldi	r20, 0x21	; 33
    21fc:	66 2d       	mov	r22, r6
    21fe:	85 e1       	ldi	r24, 0x15	; 21
    2200:	92 e0       	ldi	r25, 0x02	; 2
    2202:	0e 94 8b 0c 	call	0x1916	; 0x1916 <_ZN11Framebuffer9drawVLineEhhh>
    2206:	02 c0       	rjmp	.+4      	; 0x220c <main+0x302>
				}
				if (PinState) fb.drawPixel((i/10)+12,(i%10)+14); // draw pixel to show raw signal
    2208:	77 20       	and	r7, r7
    220a:	09 f1       	breq	.+66     	; 0x224e <main+0x344>
    220c:	98 01       	movw	r18, r16
    220e:	ad ec       	ldi	r26, 0xCD	; 205
    2210:	bc ec       	ldi	r27, 0xCC	; 204
    2212:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__umulhisi3>
    2216:	96 95       	lsr	r25
    2218:	87 95       	ror	r24
    221a:	96 95       	lsr	r25
    221c:	87 95       	ror	r24
    221e:	96 95       	lsr	r25
    2220:	87 95       	ror	r24
    2222:	ac 01       	movw	r20, r24
    2224:	44 0f       	add	r20, r20
    2226:	55 1f       	adc	r21, r21
    2228:	9c 01       	movw	r18, r24
    222a:	22 0f       	add	r18, r18
    222c:	33 1f       	adc	r19, r19
    222e:	22 0f       	add	r18, r18
    2230:	33 1f       	adc	r19, r19
    2232:	22 0f       	add	r18, r18
    2234:	33 1f       	adc	r19, r19
    2236:	24 0f       	add	r18, r20
    2238:	35 1f       	adc	r19, r21
    223a:	a8 01       	movw	r20, r16
    223c:	42 1b       	sub	r20, r18
    223e:	53 0b       	sbc	r21, r19
    2240:	42 5f       	subi	r20, 0xF2	; 242
    2242:	6c e0       	ldi	r22, 0x0C	; 12
    2244:	68 0f       	add	r22, r24
    2246:	85 e1       	ldi	r24, 0x15	; 21
    2248:	92 e0       	ldi	r25, 0x02	; 2
    224a:	0e 94 6f 0c 	call	0x18de	; 0x18de <_ZN11Framebuffer9drawPixelEhh>
				WriteText(&IM8_FontInfo,BString,127,0,RIGHT);
			}
			
			x=0;  // Buffer byte counter
			y=0;  // Buffer bit counter
			for (i=0; i<=999; i++) {   // millisecond counter
    224e:	0f 5f       	subi	r16, 0xFF	; 255
    2250:	1f 4f       	sbci	r17, 0xFF	; 255
    2252:	08 3e       	cpi	r16, 0xE8	; 232
    2254:	e3 e0       	ldi	r30, 0x03	; 3
    2256:	1e 07       	cpc	r17, r30
    2258:	09 f0       	breq	.+2      	; 0x225c <main+0x352>
    225a:	8e cf       	rjmp	.-228    	; 0x2178 <main+0x26e>
    225c:	12 c6       	rjmp	.+3108   	; 0x2e82 <main+0xf78>
    225e:	57 01       	movw	r10, r14
				
			}

			for(uint8_t j=0; j<=9; j++){
				
				if (LEdgeCount[j]>=1) {  // increment counter if there has been a hit in this bin this second
    2260:	d7 01       	movw	r26, r14
    2262:	8c 91       	ld	r24, X
    2264:	88 23       	and	r24, r24
    2266:	29 f0       	breq	.+10     	; 0x2272 <main+0x368>
					LEdgeSum[j]++;
    2268:	f6 01       	movw	r30, r12
    226a:	80 81       	ld	r24, Z
    226c:	8f 5f       	subi	r24, 0xFF	; 255
    226e:	80 83       	st	Z, r24
    2270:	02 c0       	rjmp	.+4      	; 0x2276 <main+0x36c>
				}
				else
				{
					LEdgeSum[j]=0;  // else set count of number of consecutive seconds to zero
    2272:	d6 01       	movw	r26, r12
    2274:	1c 92       	st	X, r1
				}
				fb.drawRectangle(12+(j*10),63-LEdgeSum[j]*2,12+((j+1)*10),63);  // display bar for bin on OLED screen
    2276:	1a e0       	ldi	r17, 0x0A	; 10
    2278:	16 0f       	add	r17, r22
    227a:	f6 01       	movw	r30, r12
    227c:	41 91       	ld	r20, Z+
    227e:	6f 01       	movw	r12, r30
    2280:	41 95       	neg	r20
    2282:	44 0f       	add	r20, r20
    2284:	41 5c       	subi	r20, 0xC1	; 193
    2286:	0f e3       	ldi	r16, 0x3F	; 63
    2288:	21 2f       	mov	r18, r17
    228a:	85 e1       	ldi	r24, 0x15	; 21
    228c:	92 e0       	ldi	r25, 0x02	; 2
    228e:	0e 94 bf 0c 	call	0x197e	; 0x197e <_ZN11Framebuffer13drawRectangleEhhhh>
				LEdgeCount[j]=0;  // reset count of hits this second ready for next second
    2292:	d5 01       	movw	r26, r10
    2294:	1c 92       	st	X, r1
    2296:	bf ef       	ldi	r27, 0xFF	; 255
    2298:	eb 1a       	sub	r14, r27
    229a:	fb 0a       	sbc	r15, r27
    229c:	61 2f       	mov	r22, r17
				}
				if (PinState) fb.drawPixel((i/10)+12,(i%10)+14); // draw pixel to show raw signal
				
			}

			for(uint8_t j=0; j<=9; j++){
    229e:	10 37       	cpi	r17, 0x70	; 112
    22a0:	f1 f6       	brne	.-68     	; 0x225e <main+0x354>
    22a2:	fe 01       	movw	r30, r28
    22a4:	e7 58       	subi	r30, 0x87	; 135
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	ca 55       	subi	r28, 0x5A	; 90
    22aa:	df 4f       	sbci	r29, 0xFF	; 255
    22ac:	98 81       	ld	r25, Y
    22ae:	c6 5a       	subi	r28, 0xA6	; 166
    22b0:	d0 40       	sbci	r29, 0x00	; 0
    22b2:	c9 55       	subi	r28, 0x59	; 89
    22b4:	df 4f       	sbci	r29, 0xFF	; 255
    22b6:	38 81       	ld	r19, Y
    22b8:	c7 5a       	subi	r28, 0xA7	; 167
    22ba:	d0 40       	sbci	r29, 0x00	; 0
    22bc:	c8 55       	subi	r28, 0x58	; 88
    22be:	df 4f       	sbci	r29, 0xFF	; 255
    22c0:	68 81       	ld	r22, Y
    22c2:	79 81       	ldd	r23, Y+1	; 0x01
    22c4:	c8 5a       	subi	r28, 0xA8	; 168
    22c6:	d0 40       	sbci	r29, 0x00	; 0
    22c8:	4e 2f       	mov	r20, r30
    22ca:	c0 56       	subi	r28, 0x60	; 96
    22cc:	df 4f       	sbci	r29, 0xFF	; 255
    22ce:	28 81       	ld	r18, Y
    22d0:	c0 5a       	subi	r28, 0xA0	; 160
    22d2:	d0 40       	sbci	r29, 0x00	; 0
    22d4:	42 1b       	sub	r20, r18
				fb.drawRectangle(12+(j*10),63-LEdgeSum[j]*2,12+((j+1)*10),63);  // display bar for bin on OLED screen
				LEdgeCount[j]=0;  // reset count of hits this second ready for next second
			}

			for(uint8_t j=0; j<=9; j++){  // identify bins with first and second highest counts of leading edges
				if(LEdgeSum[j]>LEdgeSum[LEMax]) {LE2Max=LEMax; LEMax=j;}
    22d6:	81 91       	ld	r24, Z+
    22d8:	a9 e7       	ldi	r26, 0x79	; 121
    22da:	b0 e0       	ldi	r27, 0x00	; 0
    22dc:	ac 0f       	add	r26, r28
    22de:	bd 1f       	adc	r27, r29
    22e0:	a9 0f       	add	r26, r25
    22e2:	b1 1d       	adc	r27, r1
    22e4:	2c 91       	ld	r18, X
    22e6:	28 17       	cp	r18, r24
    22e8:	10 f4       	brcc	.+4      	; 0x22ee <main+0x3e4>
    22ea:	39 2f       	mov	r19, r25
    22ec:	94 2f       	mov	r25, r20
				if(LEdgeSum[j]>LE2Max && LEdgeSum[j]<LEMax) LE2Max=j;
    22ee:	38 17       	cp	r19, r24
    22f0:	18 f4       	brcc	.+6      	; 0x22f8 <main+0x3ee>
    22f2:	89 17       	cp	r24, r25
    22f4:	08 f4       	brcc	.+2      	; 0x22f8 <main+0x3ee>
    22f6:	34 2f       	mov	r19, r20
				}
				fb.drawRectangle(12+(j*10),63-LEdgeSum[j]*2,12+((j+1)*10),63);  // display bar for bin on OLED screen
				LEdgeCount[j]=0;  // reset count of hits this second ready for next second
			}

			for(uint8_t j=0; j<=9; j++){  // identify bins with first and second highest counts of leading edges
    22f8:	e6 17       	cp	r30, r22
    22fa:	f7 07       	cpc	r31, r23
    22fc:	29 f7       	brne	.-54     	; 0x22c8 <main+0x3be>
    22fe:	ca 55       	subi	r28, 0x5A	; 90
    2300:	df 4f       	sbci	r29, 0xFF	; 255
    2302:	98 83       	st	Y, r25
    2304:	c6 5a       	subi	r28, 0xA6	; 166
    2306:	d0 40       	sbci	r29, 0x00	; 0
    2308:	c9 55       	subi	r28, 0x59	; 89
    230a:	df 4f       	sbci	r29, 0xFF	; 255
    230c:	38 83       	st	Y, r19
    230e:	c7 5a       	subi	r28, 0xA7	; 167
    2310:	d0 40       	sbci	r29, 0x00	; 0
    2312:	19 2f       	mov	r17, r25
				if(LEdgeSum[j]>LEdgeSum[LEMax]) {LE2Max=LEMax; LEMax=j;}
				if(LEdgeSum[j]>LE2Max && LEdgeSum[j]<LEMax) LE2Max=j;
			}


			if (LEdgeSRange==100 && LEdgeSum[LEMax]>=10) { // one of the 100ms-wide bins has more than 10 consecutive hits
    2314:	ce 55       	subi	r28, 0x5E	; 94
    2316:	df 4f       	sbci	r29, 0xFF	; 255
    2318:	38 81       	ld	r19, Y
    231a:	c2 5a       	subi	r28, 0xA2	; 162
    231c:	d0 40       	sbci	r29, 0x00	; 0
    231e:	34 36       	cpi	r19, 0x64	; 100
    2320:	01 f5       	brne	.+64     	; 0x2362 <main+0x458>
    2322:	89 2f       	mov	r24, r25
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	e9 e7       	ldi	r30, 0x79	; 121
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	ec 0f       	add	r30, r28
    232c:	fd 1f       	adc	r31, r29
    232e:	e8 0f       	add	r30, r24
    2330:	f9 1f       	adc	r31, r25
    2332:	20 81       	ld	r18, Z
    2334:	2a 30       	cpi	r18, 0x0A	; 10
    2336:	08 f4       	brcc	.+2      	; 0x233a <main+0x430>
    2338:	b0 c0       	rjmp	.+352    	; 0x249a <main+0x590>
				LEdgeSRange=10; // so we're going to narrow the search with 10ms wide bins ...
				LEdgeSMin=100*LEMax; // ... in the bin that had the most consecutive hits
    233a:	24 e6       	ldi	r18, 0x64	; 100
    233c:	28 9f       	mul	r18, r24
    233e:	10 01       	movw	r2, r0
    2340:	29 9f       	mul	r18, r25
    2342:	30 0c       	add	r3, r0
    2344:	11 24       	eor	r1, r1
    2346:	fe 01       	movw	r30, r28
    2348:	e7 58       	subi	r30, 0x87	; 135
    234a:	ff 4f       	sbci	r31, 0xFF	; 255
    234c:	c8 55       	subi	r28, 0x58	; 88
    234e:	df 4f       	sbci	r29, 0xFF	; 255
    2350:	88 81       	ld	r24, Y
    2352:	99 81       	ldd	r25, Y+1	; 0x01
    2354:	c8 5a       	subi	r28, 0xA8	; 168
    2356:	d0 40       	sbci	r29, 0x00	; 0
				for(uint8_t j=0; j<=9; j++) { // reset the bin counts
					LEdgeSum[j]=0; 
    2358:	11 92       	st	Z+, r1


			if (LEdgeSRange==100 && LEdgeSum[LEMax]>=10) { // one of the 100ms-wide bins has more than 10 consecutive hits
				LEdgeSRange=10; // so we're going to narrow the search with 10ms wide bins ...
				LEdgeSMin=100*LEMax; // ... in the bin that had the most consecutive hits
				for(uint8_t j=0; j<=9; j++) { // reset the bin counts
    235a:	8e 17       	cp	r24, r30
    235c:	9f 07       	cpc	r25, r31
    235e:	e1 f7       	brne	.-8      	; 0x2358 <main+0x44e>
    2360:	08 c0       	rjmp	.+16     	; 0x2372 <main+0x468>
					LEdgeSum[j]=0; 
				}
			}

			if (LEdgeSRange==10) {
    2362:	ce 55       	subi	r28, 0x5E	; 94
    2364:	df 4f       	sbci	r29, 0xFF	; 255
    2366:	88 81       	ld	r24, Y
    2368:	c2 5a       	subi	r28, 0xA2	; 162
    236a:	d0 40       	sbci	r29, 0x00	; 0
    236c:	8a 30       	cpi	r24, 0x0A	; 10
    236e:	09 f0       	breq	.+2      	; 0x2372 <main+0x468>
    2370:	94 c0       	rjmp	.+296    	; 0x249a <main+0x590>
				fb.drawVLine(12+(LEdgeSMin/100)*10,25,5); // Mark range that we're searching in with two small v lines
    2372:	91 01       	movw	r18, r2
    2374:	36 95       	lsr	r19
    2376:	27 95       	ror	r18
    2378:	36 95       	lsr	r19
    237a:	27 95       	ror	r18
    237c:	ab e7       	ldi	r26, 0x7B	; 123
    237e:	b4 e1       	ldi	r27, 0x14	; 20
    2380:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__umulhisi3>
    2384:	7c 01       	movw	r14, r24
    2386:	f6 94       	lsr	r15
    2388:	e7 94       	ror	r14
    238a:	6e 2d       	mov	r22, r14
    238c:	66 0f       	add	r22, r22
    238e:	86 2f       	mov	r24, r22
    2390:	88 0f       	add	r24, r24
    2392:	88 0f       	add	r24, r24
    2394:	68 0f       	add	r22, r24
    2396:	64 5f       	subi	r22, 0xF4	; 244
    2398:	25 e0       	ldi	r18, 0x05	; 5
    239a:	49 e1       	ldi	r20, 0x19	; 25
    239c:	85 e1       	ldi	r24, 0x15	; 21
    239e:	92 e0       	ldi	r25, 0x02	; 2
    23a0:	0e 94 8b 0c 	call	0x1916	; 0x1916 <_ZN11Framebuffer9drawVLineEhhh>
				fb.drawVLine(12+((LEdgeSMin/100)+1)*10,25,5);
    23a4:	9f ef       	ldi	r25, 0xFF	; 255
    23a6:	e9 1a       	sub	r14, r25
    23a8:	f9 0a       	sbc	r15, r25
    23aa:	ee 0c       	add	r14, r14
    23ac:	6e 2d       	mov	r22, r14
    23ae:	66 0f       	add	r22, r22
    23b0:	66 0f       	add	r22, r22
    23b2:	6e 0d       	add	r22, r14
    23b4:	64 5f       	subi	r22, 0xF4	; 244
    23b6:	25 e0       	ldi	r18, 0x05	; 5
    23b8:	49 e1       	ldi	r20, 0x19	; 25
    23ba:	85 e1       	ldi	r24, 0x15	; 21
    23bc:	92 e0       	ldi	r25, 0x02	; 2
    23be:	0e 94 8b 0c 	call	0x1916	; 0x1916 <_ZN11Framebuffer9drawVLineEhhh>
				LESecsInMode++;
    23c2:	c6 55       	subi	r28, 0x56	; 86
    23c4:	df 4f       	sbci	r29, 0xFF	; 255
    23c6:	a8 81       	ld	r26, Y
    23c8:	ca 5a       	subi	r28, 0xAA	; 170
    23ca:	d0 40       	sbci	r29, 0x00	; 0
    23cc:	af 5f       	subi	r26, 0xFF	; 255
    23ce:	c6 55       	subi	r28, 0x56	; 86
    23d0:	df 4f       	sbci	r29, 0xFF	; 255
    23d2:	a8 83       	st	Y, r26
    23d4:	ca 5a       	subi	r28, 0xAA	; 170
    23d6:	d0 40       	sbci	r29, 0x00	; 0
				if (LESecsInMode>=20) { // we've been searching in 10ms bins for 30 seconds now, so revert to 100ms bins
    23d8:	a4 31       	cpi	r26, 0x14	; 20
    23da:	38 f1       	brcs	.+78     	; 0x242a <main+0x520>
    23dc:	fe 01       	movw	r30, r28
    23de:	e7 58       	subi	r30, 0x87	; 135
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	c8 55       	subi	r28, 0x58	; 88
    23e4:	df 4f       	sbci	r29, 0xFF	; 255
    23e6:	88 81       	ld	r24, Y
    23e8:	99 81       	ldd	r25, Y+1	; 0x01
    23ea:	c8 5a       	subi	r28, 0xA8	; 168
    23ec:	d0 40       	sbci	r29, 0x00	; 0
					LEdgeSRange=100;
					LEdgeSMin=0;
					for(uint8_t j=0; j<=9; j++) { // reset the bin counts
						LEdgeSum[j]=0;
    23ee:	11 92       	st	Z+, r1
				fb.drawVLine(12+((LEdgeSMin/100)+1)*10,25,5);
				LESecsInMode++;
				if (LESecsInMode>=20) { // we've been searching in 10ms bins for 30 seconds now, so revert to 100ms bins
					LEdgeSRange=100;
					LEdgeSMin=0;
					for(uint8_t j=0; j<=9; j++) { // reset the bin counts
    23f0:	8e 17       	cp	r24, r30
    23f2:	9f 07       	cpc	r25, r31
    23f4:	e1 f7       	brne	.-8      	; 0x23ee <main+0x4e4>
						LEdgeSum[j]=0;
					}	
					TC=TC+(rand() & 0xFF);
    23f6:	0e 94 c3 18 	call	0x3186	; 0x3186 <rand>
    23fa:	20 91 12 02 	lds	r18, 0x0212
    23fe:	30 91 13 02 	lds	r19, 0x0213
    2402:	28 0f       	add	r18, r24
    2404:	31 1d       	adc	r19, r1
    2406:	30 93 13 02 	sts	0x0213, r19
    240a:	20 93 12 02 	sts	0x0212, r18
					LESecsInMode=0;			
    240e:	c6 55       	subi	r28, 0x56	; 86
    2410:	df 4f       	sbci	r29, 0xFF	; 255
    2412:	18 82       	st	Y, r1
    2414:	ca 5a       	subi	r28, 0xAA	; 170
    2416:	d0 40       	sbci	r29, 0x00	; 0
			if (LEdgeSRange==10) {
				fb.drawVLine(12+(LEdgeSMin/100)*10,25,5); // Mark range that we're searching in with two small v lines
				fb.drawVLine(12+((LEdgeSMin/100)+1)*10,25,5);
				LESecsInMode++;
				if (LESecsInMode>=20) { // we've been searching in 10ms bins for 30 seconds now, so revert to 100ms bins
					LEdgeSRange=100;
    2418:	b4 e6       	ldi	r27, 0x64	; 100
    241a:	ce 55       	subi	r28, 0x5E	; 94
    241c:	df 4f       	sbci	r29, 0xFF	; 255
    241e:	b8 83       	st	Y, r27
    2420:	c2 5a       	subi	r28, 0xA2	; 162
    2422:	d0 40       	sbci	r29, 0x00	; 0
					LEdgeSMin=0;
    2424:	21 2c       	mov	r2, r1
    2426:	31 2c       	mov	r3, r1
    2428:	06 c0       	rjmp	.+12     	; 0x2436 <main+0x52c>
    242a:	ea e0       	ldi	r30, 0x0A	; 10
    242c:	ce 55       	subi	r28, 0x5E	; 94
    242e:	df 4f       	sbci	r29, 0xFF	; 255
    2430:	e8 83       	st	Y, r30
    2432:	c2 5a       	subi	r28, 0xA2	; 162
    2434:	d0 40       	sbci	r29, 0x00	; 0
					}	
					TC=TC+(rand() & 0xFF);
					LESecsInMode=0;			
				}
				
				if (LEdgeSum[LEMax]>=10){  // *** START OF SECOND FOUND ***
    2436:	81 2f       	mov	r24, r17
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	e9 e7       	ldi	r30, 0x79	; 121
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	ec 0f       	add	r30, r28
    2440:	fd 1f       	adc	r31, r29
    2442:	e8 0f       	add	r30, r24
    2444:	f9 1f       	adc	r31, r25
    2446:	20 81       	ld	r18, Z
    2448:	2a 30       	cpi	r18, 0x0A	; 10
    244a:	38 f1       	brcs	.+78     	; 0x249a <main+0x590>
					LEdge=LEdgeSMin+(LEMax*10)+5; // << This is what we'll treat as the start of the second
    244c:	9c 01       	movw	r18, r24
    244e:	22 0f       	add	r18, r18
    2450:	33 1f       	adc	r19, r19
    2452:	88 0f       	add	r24, r24
    2454:	99 1f       	adc	r25, r25
    2456:	88 0f       	add	r24, r24
    2458:	99 1f       	adc	r25, r25
    245a:	88 0f       	add	r24, r24
    245c:	99 1f       	adc	r25, r25
    245e:	82 0f       	add	r24, r18
    2460:	93 1f       	adc	r25, r19
    2462:	05 96       	adiw	r24, 0x05	; 5
    2464:	28 0e       	add	r2, r24
    2466:	39 1e       	adc	r3, r25
    2468:	30 92 11 02 	sts	0x0211, r3
    246c:	20 92 10 02 	sts	0x0210, r2
    2470:	f4 01       	movw	r30, r8
    2472:	c8 55       	subi	r28, 0x58	; 88
    2474:	df 4f       	sbci	r29, 0xFF	; 255
    2476:	88 81       	ld	r24, Y
    2478:	99 81       	ldd	r25, Y+1	; 0x01
    247a:	c8 5a       	subi	r28, 0xA8	; 168
    247c:	d0 40       	sbci	r29, 0x00	; 0
					LEdgeSMin=0; // reset these variables ready for next time
					LEdgeSRange=100;
					for(uint8_t j=0; j<=9; j++) { // reset the bin counts
						LEdgeSum[j]=0;
    247e:	11 92       	st	Z+, r1
				
				if (LEdgeSum[LEMax]>=10){  // *** START OF SECOND FOUND ***
					LEdge=LEdgeSMin+(LEMax*10)+5; // << This is what we'll treat as the start of the second
					LEdgeSMin=0; // reset these variables ready for next time
					LEdgeSRange=100;
					for(uint8_t j=0; j<=9; j++) { // reset the bin counts
    2480:	8e 17       	cp	r24, r30
    2482:	9f 07       	cpc	r25, r31
    2484:	e1 f7       	brne	.-8      	; 0x247e <main+0x574>
						LEdgeSum[j]=0;
					}		
					LEdgeSearch=false;		
    2486:	10 92 04 01 	sts	0x0104, r1
				}
				
				if (LEdgeSum[LEMax]>=10){  // *** START OF SECOND FOUND ***
					LEdge=LEdgeSMin+(LEMax*10)+5; // << This is what we'll treat as the start of the second
					LEdgeSMin=0; // reset these variables ready for next time
					LEdgeSRange=100;
    248a:	f4 e6       	ldi	r31, 0x64	; 100
    248c:	ce 55       	subi	r28, 0x5E	; 94
    248e:	df 4f       	sbci	r29, 0xFF	; 255
    2490:	f8 83       	st	Y, r31
    2492:	c2 5a       	subi	r28, 0xA2	; 162
    2494:	d0 40       	sbci	r29, 0x00	; 0
					LESecsInMode=0;			
				}
				
				if (LEdgeSum[LEMax]>=10){  // *** START OF SECOND FOUND ***
					LEdge=LEdgeSMin+(LEMax*10)+5; // << This is what we'll treat as the start of the second
					LEdgeSMin=0; // reset these variables ready for next time
    2496:	21 2c       	mov	r2, r1
    2498:	31 2c       	mov	r3, r1
		}
		#pragma endregion
		
		// --------------------------------------------------------------------------------------

		if (!LEdgeSearch) {	
    249a:	80 91 04 01 	lds	r24, 0x0104
    249e:	81 11       	cpse	r24, r1
    24a0:	b4 c4       	rjmp	.+2408   	; 0x2e0a <main+0xf00>
			
			// Display mode at top of OLED, draw box around signal with segment marks
			if (!MMarkFound) {
    24a2:	cb 55       	subi	r28, 0x5B	; 91
    24a4:	df 4f       	sbci	r29, 0xFF	; 255
    24a6:	28 81       	ld	r18, Y
    24a8:	c5 5a       	subi	r28, 0xA5	; 165
    24aa:	d0 40       	sbci	r29, 0x00	; 0
    24ac:	21 11       	cpse	r18, r1
    24ae:	2d c0       	rjmp	.+90     	; 0x250a <main+0x600>
				WriteText(&IM8_FontInfo,"Min mark search",63,0,CENTRE);
    24b0:	01 e0       	ldi	r16, 0x01	; 1
    24b2:	4f e3       	ldi	r20, 0x3F	; 63
    24b4:	66 eb       	ldi	r22, 0xB6	; 182
    24b6:	71 e0       	ldi	r23, 0x01	; 1
    24b8:	8d e8       	ldi	r24, 0x8D	; 141
    24ba:	91 e0       	ldi	r25, 0x01	; 1
    24bc:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_Z9WriteTextPK9FONT_INFOPKchhh>
			} else {
				WriteText(&IM8_FontInfo,"Min mark found",63,0,CENTRE);
			}
			fb.drawRectangle(10,12,113,25); // signal window (shows whole second)
    24c0:	09 e1       	ldi	r16, 0x19	; 25
    24c2:	21 e7       	ldi	r18, 0x71	; 113
    24c4:	4c e0       	ldi	r20, 0x0C	; 12
    24c6:	6a e0       	ldi	r22, 0x0A	; 10
    24c8:	85 e1       	ldi	r24, 0x15	; 21
    24ca:	92 e0       	ldi	r25, 0x02	; 2
    24cc:	0e 94 bf 0c 	call	0x197e	; 0x197e <_ZN11Framebuffer13drawRectangleEhhhh>
			fb.drawVLine(22,25,3);
    24d0:	23 e0       	ldi	r18, 0x03	; 3
    24d2:	49 e1       	ldi	r20, 0x19	; 25
    24d4:	66 e1       	ldi	r22, 0x16	; 22
    24d6:	85 e1       	ldi	r24, 0x15	; 21
    24d8:	92 e0       	ldi	r25, 0x02	; 2
    24da:	0e 94 8b 0c 	call	0x1916	; 0x1916 <_ZN11Framebuffer9drawVLineEhhh>
			fb.drawVLine(32,25,3);
    24de:	23 e0       	ldi	r18, 0x03	; 3
    24e0:	49 e1       	ldi	r20, 0x19	; 25
    24e2:	60 e2       	ldi	r22, 0x20	; 32
    24e4:	85 e1       	ldi	r24, 0x15	; 21
    24e6:	92 e0       	ldi	r25, 0x02	; 2
    24e8:	0e 94 8b 0c 	call	0x1916	; 0x1916 <_ZN11Framebuffer9drawVLineEhhh>
			fb.drawVLine(42,25,3);
    24ec:	23 e0       	ldi	r18, 0x03	; 3
    24ee:	49 e1       	ldi	r20, 0x19	; 25
    24f0:	6a e2       	ldi	r22, 0x2A	; 42
    24f2:	85 e1       	ldi	r24, 0x15	; 21
    24f4:	92 e0       	ldi	r25, 0x02	; 2
    24f6:	0e 94 8b 0c 	call	0x1916	; 0x1916 <_ZN11Framebuffer9drawVLineEhhh>
			fb.drawVLine(62,25,3);
    24fa:	23 e0       	ldi	r18, 0x03	; 3
    24fc:	49 e1       	ldi	r20, 0x19	; 25
    24fe:	6e e3       	ldi	r22, 0x3E	; 62
    2500:	85 e1       	ldi	r24, 0x15	; 21
    2502:	92 e0       	ldi	r25, 0x02	; 2
    2504:	0e 94 8b 0c 	call	0x1916	; 0x1916 <_ZN11Framebuffer9drawVLineEhhh>
    2508:	72 c0       	rjmp	.+228    	; 0x25ee <main+0x6e4>
			
			// Display mode at top of OLED, draw box around signal with segment marks
			if (!MMarkFound) {
				WriteText(&IM8_FontInfo,"Min mark search",63,0,CENTRE);
			} else {
				WriteText(&IM8_FontInfo,"Min mark found",63,0,CENTRE);
    250a:	01 e0       	ldi	r16, 0x01	; 1
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	4f e3       	ldi	r20, 0x3F	; 63
    2510:	66 ec       	ldi	r22, 0xC6	; 198
    2512:	71 e0       	ldi	r23, 0x01	; 1
    2514:	8d e8       	ldi	r24, 0x8D	; 141
    2516:	91 e0       	ldi	r25, 0x01	; 1
    2518:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_Z9WriteTextPK9FONT_INFOPKchhh>
			}
			fb.drawRectangle(10,12,113,25); // signal window (shows whole second)
    251c:	09 e1       	ldi	r16, 0x19	; 25
    251e:	21 e7       	ldi	r18, 0x71	; 113
    2520:	4c e0       	ldi	r20, 0x0C	; 12
    2522:	6a e0       	ldi	r22, 0x0A	; 10
    2524:	85 e1       	ldi	r24, 0x15	; 21
    2526:	92 e0       	ldi	r25, 0x02	; 2
    2528:	0e 94 bf 0c 	call	0x197e	; 0x197e <_ZN11Framebuffer13drawRectangleEhhhh>
			fb.drawVLine(22,25,3);
    252c:	23 e0       	ldi	r18, 0x03	; 3
    252e:	49 e1       	ldi	r20, 0x19	; 25
    2530:	66 e1       	ldi	r22, 0x16	; 22
    2532:	85 e1       	ldi	r24, 0x15	; 21
    2534:	92 e0       	ldi	r25, 0x02	; 2
    2536:	0e 94 8b 0c 	call	0x1916	; 0x1916 <_ZN11Framebuffer9drawVLineEhhh>
			fb.drawVLine(32,25,3);
    253a:	23 e0       	ldi	r18, 0x03	; 3
    253c:	49 e1       	ldi	r20, 0x19	; 25
    253e:	60 e2       	ldi	r22, 0x20	; 32
    2540:	85 e1       	ldi	r24, 0x15	; 21
    2542:	92 e0       	ldi	r25, 0x02	; 2
    2544:	0e 94 8b 0c 	call	0x1916	; 0x1916 <_ZN11Framebuffer9drawVLineEhhh>
			fb.drawVLine(42,25,3);
    2548:	23 e0       	ldi	r18, 0x03	; 3
    254a:	49 e1       	ldi	r20, 0x19	; 25
    254c:	6a e2       	ldi	r22, 0x2A	; 42
    254e:	85 e1       	ldi	r24, 0x15	; 21
    2550:	92 e0       	ldi	r25, 0x02	; 2
    2552:	0e 94 8b 0c 	call	0x1916	; 0x1916 <_ZN11Framebuffer9drawVLineEhhh>
			fb.drawVLine(62,25,3);
    2556:	23 e0       	ldi	r18, 0x03	; 3
    2558:	49 e1       	ldi	r20, 0x19	; 25
    255a:	6e e3       	ldi	r22, 0x3E	; 62
    255c:	85 e1       	ldi	r24, 0x15	; 21
    255e:	92 e0       	ldi	r25, 0x02	; 2
    2560:	0e 94 8b 0c 	call	0x1916	; 0x1916 <_ZN11Framebuffer9drawVLineEhhh>
			
			// increment signal second counter if MMark found
			if (MMarkFound) {
				SigSecond++;
    2564:	cd 55       	subi	r28, 0x5D	; 93
    2566:	df 4f       	sbci	r29, 0xFF	; 255
    2568:	38 81       	ld	r19, Y
    256a:	c3 5a       	subi	r28, 0xA3	; 163
    256c:	d0 40       	sbci	r29, 0x00	; 0
    256e:	3f 5f       	subi	r19, 0xFF	; 255
    2570:	cd 55       	subi	r28, 0x5D	; 93
    2572:	df 4f       	sbci	r29, 0xFF	; 255
    2574:	38 83       	st	Y, r19
    2576:	c3 5a       	subi	r28, 0xA3	; 163
    2578:	d0 40       	sbci	r29, 0x00	; 0
				if (SigSecond>=60) {
    257a:	3c 33       	cpi	r19, 0x3C	; 60
    257c:	c0 f1       	brcs	.+112    	; 0x25ee <main+0x6e4>
					SigSecond=0;
					DString[0]=DASH; DString[1]=DASH; DString[3]=DASH; DString[4]=DASH; DString[6]=DASH; DString[7]=DASH;
    257e:	8c e0       	ldi	r24, 0x0C	; 12
    2580:	c3 57       	subi	r28, 0x73	; 115
    2582:	df 4f       	sbci	r29, 0xFF	; 255
    2584:	88 83       	st	Y, r24
    2586:	cd 58       	subi	r28, 0x8D	; 141
    2588:	d0 40       	sbci	r29, 0x00	; 0
    258a:	c2 57       	subi	r28, 0x72	; 114
    258c:	df 4f       	sbci	r29, 0xFF	; 255
    258e:	88 83       	st	Y, r24
    2590:	ce 58       	subi	r28, 0x8E	; 142
    2592:	d0 40       	sbci	r29, 0x00	; 0
    2594:	c0 57       	subi	r28, 0x70	; 112
    2596:	df 4f       	sbci	r29, 0xFF	; 255
    2598:	88 83       	st	Y, r24
    259a:	c0 59       	subi	r28, 0x90	; 144
    259c:	d0 40       	sbci	r29, 0x00	; 0
    259e:	cf 56       	subi	r28, 0x6F	; 111
    25a0:	df 4f       	sbci	r29, 0xFF	; 255
    25a2:	88 83       	st	Y, r24
    25a4:	c1 59       	subi	r28, 0x91	; 145
    25a6:	d0 40       	sbci	r29, 0x00	; 0
    25a8:	cd 56       	subi	r28, 0x6D	; 109
    25aa:	df 4f       	sbci	r29, 0xFF	; 255
    25ac:	88 83       	st	Y, r24
    25ae:	c3 59       	subi	r28, 0x93	; 147
    25b0:	d0 40       	sbci	r29, 0x00	; 0
    25b2:	cc 56       	subi	r28, 0x6C	; 108
    25b4:	df 4f       	sbci	r29, 0xFF	; 255
    25b6:	88 83       	st	Y, r24
    25b8:	c4 59       	subi	r28, 0x94	; 148
    25ba:	d0 40       	sbci	r29, 0x00	; 0
					TString[0]=DASH; TString[1]=DASH; TString[3]=DASH; TString[4]=DASH;
    25bc:	ca 56       	subi	r28, 0x6A	; 106
    25be:	df 4f       	sbci	r29, 0xFF	; 255
    25c0:	88 83       	st	Y, r24
    25c2:	c6 59       	subi	r28, 0x96	; 150
    25c4:	d0 40       	sbci	r29, 0x00	; 0
    25c6:	c9 56       	subi	r28, 0x69	; 105
    25c8:	df 4f       	sbci	r29, 0xFF	; 255
    25ca:	88 83       	st	Y, r24
    25cc:	c7 59       	subi	r28, 0x97	; 151
    25ce:	d0 40       	sbci	r29, 0x00	; 0
    25d0:	c7 56       	subi	r28, 0x67	; 103
    25d2:	df 4f       	sbci	r29, 0xFF	; 255
    25d4:	88 83       	st	Y, r24
    25d6:	c9 59       	subi	r28, 0x99	; 153
    25d8:	d0 40       	sbci	r29, 0x00	; 0
    25da:	c6 56       	subi	r28, 0x66	; 102
    25dc:	df 4f       	sbci	r29, 0xFF	; 255
    25de:	88 83       	st	Y, r24
    25e0:	ca 59       	subi	r28, 0x9A	; 154
    25e2:	d0 40       	sbci	r29, 0x00	; 0
			
			// increment signal second counter if MMark found
			if (MMarkFound) {
				SigSecond++;
				if (SigSecond>=60) {
					SigSecond=0;
    25e4:	cd 55       	subi	r28, 0x5D	; 93
    25e6:	df 4f       	sbci	r29, 0xFF	; 255
    25e8:	18 82       	st	Y, r1
    25ea:	c3 5a       	subi	r28, 0xA3	; 163
    25ec:	d0 40       	sbci	r29, 0x00	; 0
			
			BitASample=0;
			BitBSample=0;
			BitCSample=0;

			BitA[SigSecond]=false;
    25ee:	cd 55       	subi	r28, 0x5D	; 93
    25f0:	df 4f       	sbci	r29, 0xFF	; 255
    25f2:	a8 81       	ld	r26, Y
    25f4:	c3 5a       	subi	r28, 0xA3	; 163
    25f6:	d0 40       	sbci	r29, 0x00	; 0
    25f8:	8a 2f       	mov	r24, r26
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	fe 01       	movw	r30, r28
    25fe:	e8 0f       	add	r30, r24
    2600:	f9 1f       	adc	r31, r25
    2602:	15 ae       	std	Z+61, r1	; 0x3d
			BitB[SigSecond]=false;
    2604:	fe 01       	movw	r30, r28
    2606:	e8 0f       	add	r30, r24
    2608:	f9 1f       	adc	r31, r25
    260a:	11 82       	std	Z+1, r1	; 0x01
    260c:	e1 2c       	mov	r14, r1
    260e:	f1 2c       	mov	r15, r1
			BitC=false;
    2610:	91 2c       	mov	r9, r1
			y=0;  // Buffer bit counter	
			LEdgeDetect=false; // no edge detected yet
			
			BitASample=0;
			BitBSample=0;
			BitCSample=0;
    2612:	61 2c       	mov	r6, r1
			x=0;  // Buffer byte counter
			y=0;  // Buffer bit counter	
			LEdgeDetect=false; // no edge detected yet
			
			BitASample=0;
			BitBSample=0;
    2614:	51 2c       	mov	r5, r1
			// DISPLAY SIGNAL AND BIT BOUNDARIES
			x=0;  // Buffer byte counter
			y=0;  // Buffer bit counter	
			LEdgeDetect=false; // no edge detected yet
			
			BitASample=0;
    2616:	41 2c       	mov	r4, r1
			}
			
			// DISPLAY SIGNAL AND BIT BOUNDARIES
			x=0;  // Buffer byte counter
			y=0;  // Buffer bit counter	
			LEdgeDetect=false; // no edge detected yet
    2618:	10 e0       	ldi	r17, 0x00	; 0
				}
			}
			
			// DISPLAY SIGNAL AND BIT BOUNDARIES
			x=0;  // Buffer byte counter
			y=0;  // Buffer bit counter	
    261a:	c1 2c       	mov	r12, r1
    261c:	d1 2c       	mov	r13, r1
					TString[0]=DASH; TString[1]=DASH; TString[3]=DASH; TString[4]=DASH;
				}
			}
			
			// DISPLAY SIGNAL AND BIT BOUNDARIES
			x=0;  // Buffer byte counter
    261e:	a1 2c       	mov	r10, r1
    2620:	b1 2c       	mov	r11, r1
    2622:	79 2c       	mov	r7, r9
    2624:	03 c0       	rjmp	.+6      	; 0x262c <main+0x722>
    2626:	bf ef       	ldi	r27, 0xFF	; 255
    2628:	eb 1a       	sub	r14, r27
    262a:	fb 0a       	sbc	r15, r27
			BitA[SigSecond]=false;
			BitB[SigSecond]=false;
			BitC=false;
			
			for (i=0; i<=999; i++) {
				y++;
    262c:	ef ef       	ldi	r30, 0xFF	; 255
    262e:	ce 1a       	sub	r12, r30
    2630:	de 0a       	sbc	r13, r30
				if (y==8) {
    2632:	f8 e0       	ldi	r31, 0x08	; 8
    2634:	cf 16       	cp	r12, r31
    2636:	d1 04       	cpc	r13, r1
    2638:	29 f4       	brne	.+10     	; 0x2644 <main+0x73a>
					y=0;
					x++;
    263a:	2f ef       	ldi	r18, 0xFF	; 255
    263c:	a2 1a       	sub	r10, r18
    263e:	b2 0a       	sbc	r11, r18
			BitC=false;
			
			for (i=0; i<=999; i++) {
				y++;
				if (y==8) {
					y=0;
    2640:	c1 2c       	mov	r12, r1
    2642:	d1 2c       	mov	r13, r1
					x++;
				}

				PinState=CHECK_BIT(buffer[x],y);  // read pin state
    2644:	f5 01       	movw	r30, r10
    2646:	eb 5f       	subi	r30, 0xFB	; 251
    2648:	fe 4f       	sbci	r31, 0xFE	; 254
    264a:	80 81       	ld	r24, Z
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	0c 2c       	mov	r0, r12
    2650:	02 c0       	rjmp	.+4      	; 0x2656 <main+0x74c>
    2652:	95 95       	asr	r25
    2654:	87 95       	ror	r24
    2656:	0a 94       	dec	r0
    2658:	e2 f7       	brpl	.-8      	; 0x2652 <main+0x748>
    265a:	08 2f       	mov	r16, r24
    265c:	01 70       	andi	r16, 0x01	; 1
				
				if (!LEdgeDetect && PinState && i<25) { // adjust tick counter for drift
    265e:	11 11       	cpse	r17, r1
    2660:	0d c0       	rjmp	.+26     	; 0x267c <main+0x772>
    2662:	09 f4       	brne	.+2      	; 0x2666 <main+0x75c>
    2664:	51 c0       	rjmp	.+162    	; 0x2708 <main+0x7fe>
    2666:	39 e1       	ldi	r19, 0x19	; 25
    2668:	e3 16       	cp	r14, r19
    266a:	f1 04       	cpc	r15, r1
    266c:	50 f4       	brcc	.+20     	; 0x2682 <main+0x778>
					LEdgeDetect=true;
					LEdgeAdjust=i;
    266e:	cc 55       	subi	r28, 0x5C	; 92
    2670:	df 4f       	sbci	r29, 0xFF	; 255
    2672:	e8 82       	st	Y, r14
    2674:	c4 5a       	subi	r28, 0xA4	; 164
    2676:	d0 40       	sbci	r29, 0x00	; 0
				}

				PinState=CHECK_BIT(buffer[x],y);  // read pin state
				
				if (!LEdgeDetect && PinState && i<25) { // adjust tick counter for drift
					LEdgeDetect=true;
    2678:	11 e0       	ldi	r17, 0x01	; 1
    267a:	03 c0       	rjmp	.+6      	; 0x2682 <main+0x778>
					LEdgeAdjust=i;
				}
	
				if (PinState) fb.drawPixel((i/10)+12,(i%10)+14); // draw pixel to show raw signal
    267c:	00 23       	and	r16, r16
    267e:	09 f4       	brne	.+2      	; 0x2682 <main+0x778>
    2680:	43 c0       	rjmp	.+134    	; 0x2708 <main+0x7fe>
    2682:	97 01       	movw	r18, r14
    2684:	ad ec       	ldi	r26, 0xCD	; 205
    2686:	bc ec       	ldi	r27, 0xCC	; 204
    2688:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__umulhisi3>
    268c:	96 95       	lsr	r25
    268e:	87 95       	ror	r24
    2690:	96 95       	lsr	r25
    2692:	87 95       	ror	r24
    2694:	96 95       	lsr	r25
    2696:	87 95       	ror	r24
    2698:	ac 01       	movw	r20, r24
    269a:	44 0f       	add	r20, r20
    269c:	55 1f       	adc	r21, r21
    269e:	9c 01       	movw	r18, r24
    26a0:	22 0f       	add	r18, r18
    26a2:	33 1f       	adc	r19, r19
    26a4:	22 0f       	add	r18, r18
    26a6:	33 1f       	adc	r19, r19
    26a8:	22 0f       	add	r18, r18
    26aa:	33 1f       	adc	r19, r19
    26ac:	24 0f       	add	r18, r20
    26ae:	35 1f       	adc	r19, r21
    26b0:	a7 01       	movw	r20, r14
    26b2:	42 1b       	sub	r20, r18
    26b4:	53 0b       	sbc	r21, r19
    26b6:	42 5f       	subi	r20, 0xF2	; 242
    26b8:	6c e0       	ldi	r22, 0x0C	; 12
    26ba:	68 0f       	add	r22, r24
    26bc:	85 e1       	ldi	r24, 0x15	; 21
    26be:	92 e0       	ldi	r25, 0x02	; 2
    26c0:	0e 94 6f 0c 	call	0x18de	; 0x18de <_ZN11Framebuffer9drawPixelEhh>
					
				if (PinState && i>=100 && i<=199) BitASample++;
    26c4:	84 e6       	ldi	r24, 0x64	; 100
    26c6:	e8 16       	cp	r14, r24
    26c8:	f1 04       	cpc	r15, r1
    26ca:	40 f0       	brcs	.+16     	; 0x26dc <main+0x7d2>
    26cc:	98 ec       	ldi	r25, 0xC8	; 200
    26ce:	e9 16       	cp	r14, r25
    26d0:	f1 04       	cpc	r15, r1
    26d2:	40 f4       	brcc	.+16     	; 0x26e4 <main+0x7da>
    26d4:	43 94       	inc	r4
				if (PinState && i>=200 && i<=299) BitBSample++;
				if (PinState && i>=300 && i<=499) BitCSample++;
    26d6:	01 11       	cpse	r16, r1
    26d8:	0c c0       	rjmp	.+24     	; 0x26f2 <main+0x7e8>
    26da:	16 c0       	rjmp	.+44     	; 0x2708 <main+0x7fe>
				}
	
				if (PinState) fb.drawPixel((i/10)+12,(i%10)+14); // draw pixel to show raw signal
					
				if (PinState && i>=100 && i<=199) BitASample++;
				if (PinState && i>=200 && i<=299) BitBSample++;
    26dc:	a8 ec       	ldi	r26, 0xC8	; 200
    26de:	ea 16       	cp	r14, r26
    26e0:	f1 04       	cpc	r15, r1
    26e2:	38 f0       	brcs	.+14     	; 0x26f2 <main+0x7e8>
    26e4:	bc e2       	ldi	r27, 0x2C	; 44
    26e6:	eb 16       	cp	r14, r27
    26e8:	b1 e0       	ldi	r27, 0x01	; 1
    26ea:	fb 06       	cpc	r15, r27
    26ec:	38 f4       	brcc	.+14     	; 0x26fc <main+0x7f2>
    26ee:	53 94       	inc	r5
    26f0:	0b c0       	rjmp	.+22     	; 0x2708 <main+0x7fe>
				if (PinState && i>=300 && i<=499) BitCSample++;
    26f2:	ec e2       	ldi	r30, 0x2C	; 44
    26f4:	ee 16       	cp	r14, r30
    26f6:	e1 e0       	ldi	r30, 0x01	; 1
    26f8:	fe 06       	cpc	r15, r30
    26fa:	30 f0       	brcs	.+12     	; 0x2708 <main+0x7fe>
    26fc:	f4 ef       	ldi	r31, 0xF4	; 244
    26fe:	ef 16       	cp	r14, r31
    2700:	f1 e0       	ldi	r31, 0x01	; 1
    2702:	ff 06       	cpc	r15, r31
    2704:	08 f4       	brcc	.+2      	; 0x2708 <main+0x7fe>
    2706:	63 94       	inc	r6
				
				if (i==500) {  // resolve samples into bits
    2708:	24 ef       	ldi	r18, 0xF4	; 244
    270a:	e2 16       	cp	r14, r18
    270c:	21 e0       	ldi	r18, 0x01	; 1
    270e:	f2 06       	cpc	r15, r18
    2710:	09 f0       	breq	.+2      	; 0x2714 <main+0x80a>
    2712:	59 c3       	rjmp	.+1714   	; 0x2dc6 <main+0xebc>
					if (BitASample>=85) BitA[SigSecond]=true;
    2714:	34 e5       	ldi	r19, 0x54	; 84
    2716:	34 15       	cp	r19, r4
    2718:	50 f4       	brcc	.+20     	; 0x272e <main+0x824>
    271a:	81 e0       	ldi	r24, 0x01	; 1
    271c:	fe 01       	movw	r30, r28
    271e:	cd 55       	subi	r28, 0x5D	; 93
    2720:	df 4f       	sbci	r29, 0xFF	; 255
    2722:	98 81       	ld	r25, Y
    2724:	c3 5a       	subi	r28, 0xA3	; 163
    2726:	d0 40       	sbci	r29, 0x00	; 0
    2728:	e9 0f       	add	r30, r25
    272a:	f1 1d       	adc	r31, r1
    272c:	85 af       	std	Z+61, r24	; 0x3d
					if (BitBSample>=85) BitB[SigSecond]=true;
    272e:	a4 e5       	ldi	r26, 0x54	; 84
    2730:	a5 15       	cp	r26, r5
    2732:	50 f4       	brcc	.+20     	; 0x2748 <main+0x83e>
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	fe 01       	movw	r30, r28
    2738:	cd 55       	subi	r28, 0x5D	; 93
    273a:	df 4f       	sbci	r29, 0xFF	; 255
    273c:	b8 81       	ld	r27, Y
    273e:	c3 5a       	subi	r28, 0xA3	; 163
    2740:	d0 40       	sbci	r29, 0x00	; 0
    2742:	eb 0f       	add	r30, r27
    2744:	f1 1d       	adc	r31, r1
    2746:	81 83       	std	Z+1, r24	; 0x01
					if (BitCSample>=170) BitC=true;
    2748:	e9 ea       	ldi	r30, 0xA9	; 169
    274a:	e6 15       	cp	r30, r6
    274c:	10 f4       	brcc	.+4      	; 0x2752 <main+0x848>
    274e:	77 24       	eor	r7, r7
    2750:	73 94       	inc	r7

					if (!MMarkFound && BitA[0] && BitB[0] && BitC) { // test for minute marker if not found
    2752:	cb 55       	subi	r28, 0x5B	; 91
    2754:	df 4f       	sbci	r29, 0xFF	; 255
    2756:	f8 81       	ld	r31, Y
    2758:	c5 5a       	subi	r28, 0xA5	; 165
    275a:	d0 40       	sbci	r29, 0x00	; 0
    275c:	f1 11       	cpse	r31, r1
    275e:	9c c3       	rjmp	.+1848   	; 0x2e98 <main+0xf8e>
    2760:	8d ad       	ldd	r24, Y+61	; 0x3d
    2762:	88 23       	and	r24, r24
    2764:	09 f4       	brne	.+2      	; 0x2768 <main+0x85e>
    2766:	a1 c3       	rjmp	.+1858   	; 0x2eaa <main+0xfa0>
    2768:	89 81       	ldd	r24, Y+1	; 0x01
    276a:	88 23       	and	r24, r24
    276c:	09 f4       	brne	.+2      	; 0x2770 <main+0x866>
    276e:	9d c3       	rjmp	.+1850   	; 0x2eaa <main+0xfa0>
    2770:	71 10       	cpse	r7, r1
    2772:	d8 c0       	rjmp	.+432    	; 0x2924 <main+0xa1a>
    2774:	9a c3       	rjmp	.+1844   	; 0x2eaa <main+0xfa0>
					}

					if (!MMarkFound) {					
						// if no minute marker found display bit samples and results 
						WriteText(&IM8_FontInfo,"BitA",0,30,LEFT);
						WriteText(&IM8_FontInfo,BitA[SigSecond] ? "1" : "0",35,30,FREEPOS);
    2776:	67 e9       	ldi	r22, 0x97	; 151
    2778:	71 e0       	ldi	r23, 0x01	; 1
    277a:	02 c0       	rjmp	.+4      	; 0x2780 <main+0x876>
    277c:	65 e9       	ldi	r22, 0x95	; 149
    277e:	71 e0       	ldi	r23, 0x01	; 1
    2780:	03 e0       	ldi	r16, 0x03	; 3
    2782:	2e e1       	ldi	r18, 0x1E	; 30
    2784:	43 e2       	ldi	r20, 0x23	; 35
    2786:	8d e8       	ldi	r24, 0x8D	; 141
    2788:	91 e0       	ldi	r25, 0x01	; 1
    278a:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_Z9WriteTextPK9FONT_INFOPKchhh>
						Byte2String(BString,BitASample);
    278e:	64 2d       	mov	r22, r4
    2790:	ce 01       	movw	r24, r28
    2792:	84 56       	subi	r24, 0x64	; 100
    2794:	9f 4f       	sbci	r25, 0xFF	; 255
    2796:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <_Z11Byte2StringPch>
						WriteText(&IM8_FontInfo,BString,45,30,FREEPOS);
    279a:	2e e1       	ldi	r18, 0x1E	; 30
    279c:	4d e2       	ldi	r20, 0x2D	; 45
    279e:	be 01       	movw	r22, r28
    27a0:	64 56       	subi	r22, 0x64	; 100
    27a2:	7f 4f       	sbci	r23, 0xFF	; 255
    27a4:	8d e8       	ldi	r24, 0x8D	; 141
    27a6:	91 e0       	ldi	r25, 0x01	; 1
    27a8:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_Z9WriteTextPK9FONT_INFOPKchhh>

						WriteText(&IM8_FontInfo,"BitB",0,42,LEFT);
    27ac:	00 e0       	ldi	r16, 0x00	; 0
    27ae:	2a e2       	ldi	r18, 0x2A	; 42
    27b0:	40 e0       	ldi	r20, 0x00	; 0
    27b2:	65 ed       	ldi	r22, 0xD5	; 213
    27b4:	71 e0       	ldi	r23, 0x01	; 1
    27b6:	8d e8       	ldi	r24, 0x8D	; 141
    27b8:	91 e0       	ldi	r25, 0x01	; 1
    27ba:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_Z9WriteTextPK9FONT_INFOPKchhh>
						WriteText(&IM8_FontInfo,BitB[SigSecond] ? "1" : "0",35,42,FREEPOS);
    27be:	fe 01       	movw	r30, r28
    27c0:	e8 0d       	add	r30, r8
    27c2:	f9 1d       	adc	r31, r9
    27c4:	81 81       	ldd	r24, Z+1	; 0x01
    27c6:	81 11       	cpse	r24, r1
    27c8:	03 c0       	rjmp	.+6      	; 0x27d0 <main+0x8c6>
    27ca:	67 e9       	ldi	r22, 0x97	; 151
    27cc:	71 e0       	ldi	r23, 0x01	; 1
    27ce:	02 c0       	rjmp	.+4      	; 0x27d4 <main+0x8ca>
    27d0:	65 e9       	ldi	r22, 0x95	; 149
    27d2:	71 e0       	ldi	r23, 0x01	; 1
    27d4:	03 e0       	ldi	r16, 0x03	; 3
    27d6:	2a e2       	ldi	r18, 0x2A	; 42
    27d8:	43 e2       	ldi	r20, 0x23	; 35
    27da:	8d e8       	ldi	r24, 0x8D	; 141
    27dc:	91 e0       	ldi	r25, 0x01	; 1
    27de:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_Z9WriteTextPK9FONT_INFOPKchhh>
						Byte2String(BString,BitBSample);
    27e2:	65 2d       	mov	r22, r5
    27e4:	ce 01       	movw	r24, r28
    27e6:	84 56       	subi	r24, 0x64	; 100
    27e8:	9f 4f       	sbci	r25, 0xFF	; 255
    27ea:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <_Z11Byte2StringPch>
						WriteText(&IM8_FontInfo,BString,45,42,FREEPOS);
    27ee:	2a e2       	ldi	r18, 0x2A	; 42
    27f0:	4d e2       	ldi	r20, 0x2D	; 45
    27f2:	be 01       	movw	r22, r28
    27f4:	64 56       	subi	r22, 0x64	; 100
    27f6:	7f 4f       	sbci	r23, 0xFF	; 255
    27f8:	8d e8       	ldi	r24, 0x8D	; 141
    27fa:	91 e0       	ldi	r25, 0x01	; 1
    27fc:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_Z9WriteTextPK9FONT_INFOPKchhh>

						WriteText(&IM8_FontInfo,"BitC",0,54,LEFT);
    2800:	00 e0       	ldi	r16, 0x00	; 0
    2802:	26 e3       	ldi	r18, 0x36	; 54
    2804:	40 e0       	ldi	r20, 0x00	; 0
    2806:	6a ed       	ldi	r22, 0xDA	; 218
    2808:	71 e0       	ldi	r23, 0x01	; 1
    280a:	8d e8       	ldi	r24, 0x8D	; 141
    280c:	91 e0       	ldi	r25, 0x01	; 1
    280e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_Z9WriteTextPK9FONT_INFOPKchhh>
						WriteText(&IM8_FontInfo,BitC ? "1" : "0",35,54,FREEPOS);
    2812:	71 10       	cpse	r7, r1
    2814:	03 c0       	rjmp	.+6      	; 0x281c <main+0x912>
    2816:	67 e9       	ldi	r22, 0x97	; 151
    2818:	71 e0       	ldi	r23, 0x01	; 1
    281a:	02 c0       	rjmp	.+4      	; 0x2820 <main+0x916>
    281c:	65 e9       	ldi	r22, 0x95	; 149
    281e:	71 e0       	ldi	r23, 0x01	; 1
    2820:	03 e0       	ldi	r16, 0x03	; 3
    2822:	26 e3       	ldi	r18, 0x36	; 54
    2824:	43 e2       	ldi	r20, 0x23	; 35
    2826:	8d e8       	ldi	r24, 0x8D	; 141
    2828:	91 e0       	ldi	r25, 0x01	; 1
    282a:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_Z9WriteTextPK9FONT_INFOPKchhh>
						Byte2String(BString,BitCSample);
    282e:	66 2d       	mov	r22, r6
    2830:	ce 01       	movw	r24, r28
    2832:	84 56       	subi	r24, 0x64	; 100
    2834:	9f 4f       	sbci	r25, 0xFF	; 255
    2836:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <_Z11Byte2StringPch>
						WriteText(&IM8_FontInfo,BString,45,54,FREEPOS);
    283a:	26 e3       	ldi	r18, 0x36	; 54
    283c:	4d e2       	ldi	r20, 0x2D	; 45
    283e:	be 01       	movw	r22, r28
    2840:	64 56       	subi	r22, 0x64	; 100
    2842:	7f 4f       	sbci	r23, 0xFF	; 255
    2844:	8d e8       	ldi	r24, 0x8D	; 141
    2846:	91 e0       	ldi	r25, 0x01	; 1
    2848:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_Z9WriteTextPK9FONT_INFOPKchhh>
								
						BitASample=0; // reset samples ready for next second
						BitBSample=0;
						BitCSample=0;											
    284c:	61 2c       	mov	r6, r1
						WriteText(&IM8_FontInfo,BitC ? "1" : "0",35,54,FREEPOS);
						Byte2String(BString,BitCSample);
						WriteText(&IM8_FontInfo,BString,45,54,FREEPOS);
								
						BitASample=0; // reset samples ready for next second
						BitBSample=0;
    284e:	51 2c       	mov	r5, r1
						WriteText(&IM8_FontInfo,"BitC",0,54,LEFT);
						WriteText(&IM8_FontInfo,BitC ? "1" : "0",35,54,FREEPOS);
						Byte2String(BString,BitCSample);
						WriteText(&IM8_FontInfo,BString,45,54,FREEPOS);
								
						BitASample=0; // reset samples ready for next second
    2850:	41 2c       	mov	r4, r1
    2852:	e9 ce       	rjmp	.-558    	; 0x2626 <main+0x71c>
						BitCSample=0;											
					}
					
					if (MMarkFound) { // if minute marker found...
						// ... interpret data collected
						if (SigSecond==24) SigYear=BitA[17]*80 + BitA[18]*40 + BitA[19]*20 + BitA[20]*10 + BitA[21]*8 + BitA[22]*4 + BitA[23]*2 + BitA[24];
    2854:	2f 96       	adiw	r28, 0x0f	; 15
    2856:	9f ad       	ldd	r25, Y+63	; 0x3f
    2858:	2f 97       	sbiw	r28, 0x0f	; 15
    285a:	60 96       	adiw	r28, 0x10	; 16
    285c:	8f ad       	ldd	r24, Y+63	; 0x3f
    285e:	60 97       	sbiw	r28, 0x10	; 16
    2860:	28 e2       	ldi	r18, 0x28	; 40
    2862:	82 9f       	mul	r24, r18
    2864:	80 2d       	mov	r24, r0
    2866:	11 24       	eor	r1, r1
    2868:	20 e5       	ldi	r18, 0x50	; 80
    286a:	92 9f       	mul	r25, r18
    286c:	80 0d       	add	r24, r0
    286e:	11 24       	eor	r1, r1
    2870:	66 96       	adiw	r28, 0x16	; 22
    2872:	9f ad       	ldd	r25, Y+63	; 0x3f
    2874:	66 97       	sbiw	r28, 0x16	; 22
    2876:	98 0f       	add	r25, r24
    2878:	62 96       	adiw	r28, 0x12	; 18
    287a:	2f ad       	ldd	r18, Y+63	; 0x3f
    287c:	62 97       	sbiw	r28, 0x12	; 18
    287e:	22 0f       	add	r18, r18
    2880:	82 2f       	mov	r24, r18
    2882:	88 0f       	add	r24, r24
    2884:	88 0f       	add	r24, r24
    2886:	82 0f       	add	r24, r18
    2888:	98 0f       	add	r25, r24
    288a:	61 96       	adiw	r28, 0x11	; 17
    288c:	8f ad       	ldd	r24, Y+63	; 0x3f
    288e:	61 97       	sbiw	r28, 0x11	; 17
    2890:	28 2f       	mov	r18, r24
    2892:	22 0f       	add	r18, r18
    2894:	22 0f       	add	r18, r18
    2896:	82 2f       	mov	r24, r18
    2898:	88 0f       	add	r24, r24
    289a:	88 0f       	add	r24, r24
    289c:	82 0f       	add	r24, r18
    289e:	98 0f       	add	r25, r24
    28a0:	63 96       	adiw	r28, 0x13	; 19
    28a2:	8f ad       	ldd	r24, Y+63	; 0x3f
    28a4:	63 97       	sbiw	r28, 0x13	; 19
    28a6:	28 2f       	mov	r18, r24
    28a8:	22 0f       	add	r18, r18
    28aa:	64 96       	adiw	r28, 0x14	; 20
    28ac:	8f ad       	ldd	r24, Y+63	; 0x3f
    28ae:	64 97       	sbiw	r28, 0x14	; 20
    28b0:	82 0f       	add	r24, r18
    28b2:	28 2f       	mov	r18, r24
    28b4:	22 0f       	add	r18, r18
    28b6:	65 96       	adiw	r28, 0x15	; 21
    28b8:	8f ad       	ldd	r24, Y+63	; 0x3f
    28ba:	65 97       	sbiw	r28, 0x15	; 21
    28bc:	82 0f       	add	r24, r18
    28be:	88 0f       	add	r24, r24
    28c0:	98 0f       	add	r25, r24
    28c2:	c1 55       	subi	r28, 0x51	; 81
    28c4:	df 4f       	sbci	r29, 0xFF	; 255
    28c6:	98 83       	st	Y, r25
    28c8:	cf 5a       	subi	r28, 0xAF	; 175
    28ca:	d0 40       	sbci	r29, 0x00	; 0
    28cc:	64 c0       	rjmp	.+200    	; 0x2996 <main+0xa8c>
						if (SigSecond==29) SigMonth=BitA[25]*10 + BitA[26]*8 + BitA[27]*4 + BitA[28]*2 + BitA[29];
    28ce:	cd 55       	subi	r28, 0x5D	; 93
    28d0:	df 4f       	sbci	r29, 0xFF	; 255
    28d2:	38 81       	ld	r19, Y
    28d4:	c3 5a       	subi	r28, 0xA3	; 163
    28d6:	d0 40       	sbci	r29, 0x00	; 0
    28d8:	3d 31       	cpi	r19, 0x1D	; 29
    28da:	49 f5       	brne	.+82     	; 0x292e <main+0xa24>
    28dc:	67 96       	adiw	r28, 0x17	; 23
    28de:	8f ad       	ldd	r24, Y+63	; 0x3f
    28e0:	67 97       	sbiw	r28, 0x17	; 23
    28e2:	88 0f       	add	r24, r24
    28e4:	98 2f       	mov	r25, r24
    28e6:	99 0f       	add	r25, r25
    28e8:	99 0f       	add	r25, r25
    28ea:	98 0f       	add	r25, r24
    28ec:	68 96       	adiw	r28, 0x18	; 24
    28ee:	8f ad       	ldd	r24, Y+63	; 0x3f
    28f0:	68 97       	sbiw	r28, 0x18	; 24
    28f2:	88 0f       	add	r24, r24
    28f4:	88 0f       	add	r24, r24
    28f6:	88 0f       	add	r24, r24
    28f8:	89 0f       	add	r24, r25
    28fa:	6b 96       	adiw	r28, 0x1b	; 27
    28fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    28fe:	6b 97       	sbiw	r28, 0x1b	; 27
    2900:	98 0f       	add	r25, r24
    2902:	69 96       	adiw	r28, 0x19	; 25
    2904:	8f ad       	ldd	r24, Y+63	; 0x3f
    2906:	69 97       	sbiw	r28, 0x19	; 25
    2908:	28 2f       	mov	r18, r24
    290a:	22 0f       	add	r18, r18
    290c:	6a 96       	adiw	r28, 0x1a	; 26
    290e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2910:	6a 97       	sbiw	r28, 0x1a	; 26
    2912:	82 0f       	add	r24, r18
    2914:	88 0f       	add	r24, r24
    2916:	98 0f       	add	r25, r24
    2918:	c2 55       	subi	r28, 0x52	; 82
    291a:	df 4f       	sbci	r29, 0xFF	; 255
    291c:	98 83       	st	Y, r25
    291e:	ce 5a       	subi	r28, 0xAE	; 174
    2920:	d0 40       	sbci	r29, 0x00	; 0
    2922:	55 c0       	rjmp	.+170    	; 0x29ce <main+0xac4>
					if (BitBSample>=85) BitB[SigSecond]=true;
					if (BitCSample>=170) BitC=true;

					if (!MMarkFound && BitA[0] && BitB[0] && BitC) { // test for minute marker if not found
						MMarkFound=true;
						SigSecond=0;
    2924:	cd 55       	subi	r28, 0x5D	; 93
    2926:	df 4f       	sbci	r29, 0xFF	; 255
    2928:	18 82       	st	Y, r1
    292a:	c3 5a       	subi	r28, 0xA3	; 163
    292c:	d0 40       	sbci	r29, 0x00	; 0
					
					if (MMarkFound) { // if minute marker found...
						// ... interpret data collected
						if (SigSecond==24) SigYear=BitA[17]*80 + BitA[18]*40 + BitA[19]*20 + BitA[20]*10 + BitA[21]*8 + BitA[22]*4 + BitA[23]*2 + BitA[24];
						if (SigSecond==29) SigMonth=BitA[25]*10 + BitA[26]*8 + BitA[27]*4 + BitA[28]*2 + BitA[29];
						if (SigSecond==35) SigDay=BitA[30]*20 + BitA[31]*10 + BitA[32]*8 + BitA[33]*4 + BitA[34]*2 + BitA[35];
    292e:	cd 55       	subi	r28, 0x5D	; 93
    2930:	df 4f       	sbci	r29, 0xFF	; 255
    2932:	88 81       	ld	r24, Y
    2934:	c3 5a       	subi	r28, 0xA3	; 163
    2936:	d0 40       	sbci	r29, 0x00	; 0
    2938:	83 32       	cpi	r24, 0x23	; 35
    293a:	69 f5       	brne	.+90     	; 0x2996 <main+0xa8c>
    293c:	6c 96       	adiw	r28, 0x1c	; 28
    293e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2940:	6c 97       	sbiw	r28, 0x1c	; 28
    2942:	88 0f       	add	r24, r24
    2944:	88 0f       	add	r24, r24
    2946:	28 2f       	mov	r18, r24
    2948:	22 0f       	add	r18, r18
    294a:	22 0f       	add	r18, r18
    294c:	28 0f       	add	r18, r24
    294e:	6d 96       	adiw	r28, 0x1d	; 29
    2950:	8f ad       	ldd	r24, Y+63	; 0x3f
    2952:	6d 97       	sbiw	r28, 0x1d	; 29
    2954:	88 0f       	add	r24, r24
    2956:	98 2f       	mov	r25, r24
    2958:	99 0f       	add	r25, r25
    295a:	99 0f       	add	r25, r25
    295c:	89 0f       	add	r24, r25
    295e:	82 0f       	add	r24, r18
    2960:	a1 96       	adiw	r28, 0x21	; 33
    2962:	2f ad       	ldd	r18, Y+63	; 0x3f
    2964:	a1 97       	sbiw	r28, 0x21	; 33
    2966:	28 0f       	add	r18, r24
    2968:	6e 96       	adiw	r28, 0x1e	; 30
    296a:	8f ad       	ldd	r24, Y+63	; 0x3f
    296c:	6e 97       	sbiw	r28, 0x1e	; 30
    296e:	98 2f       	mov	r25, r24
    2970:	99 0f       	add	r25, r25
    2972:	6f 96       	adiw	r28, 0x1f	; 31
    2974:	8f ad       	ldd	r24, Y+63	; 0x3f
    2976:	6f 97       	sbiw	r28, 0x1f	; 31
    2978:	89 0f       	add	r24, r25
    297a:	98 2f       	mov	r25, r24
    297c:	99 0f       	add	r25, r25
    297e:	a0 96       	adiw	r28, 0x20	; 32
    2980:	8f ad       	ldd	r24, Y+63	; 0x3f
    2982:	a0 97       	sbiw	r28, 0x20	; 32
    2984:	89 0f       	add	r24, r25
    2986:	88 0f       	add	r24, r24
    2988:	28 0f       	add	r18, r24
    298a:	c3 55       	subi	r28, 0x53	; 83
    298c:	df 4f       	sbci	r29, 0xFF	; 255
    298e:	28 83       	st	Y, r18
    2990:	cd 5a       	subi	r28, 0xAD	; 173
    2992:	d0 40       	sbci	r29, 0x00	; 0
    2994:	50 c0       	rjmp	.+160    	; 0x2a36 <main+0xb2c>
						if (SigSecond==38) SigDoW=BitA[36]*4 + BitA[37]*2 + BitA[38];
    2996:	cd 55       	subi	r28, 0x5D	; 93
    2998:	df 4f       	sbci	r29, 0xFF	; 255
    299a:	98 81       	ld	r25, Y
    299c:	c3 5a       	subi	r28, 0xA3	; 163
    299e:	d0 40       	sbci	r29, 0x00	; 0
    29a0:	96 32       	cpi	r25, 0x26	; 38
    29a2:	a9 f4       	brne	.+42     	; 0x29ce <main+0xac4>
    29a4:	a2 96       	adiw	r28, 0x22	; 34
    29a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    29a8:	a2 97       	sbiw	r28, 0x22	; 34
    29aa:	a3 96       	adiw	r28, 0x23	; 35
    29ac:	8f ad       	ldd	r24, Y+63	; 0x3f
    29ae:	a3 97       	sbiw	r28, 0x23	; 35
    29b0:	a2 e0       	ldi	r26, 0x02	; 2
    29b2:	9a 9f       	mul	r25, r26
    29b4:	80 0d       	add	r24, r0
    29b6:	11 24       	eor	r1, r1
    29b8:	88 0f       	add	r24, r24
    29ba:	a4 96       	adiw	r28, 0x24	; 36
    29bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    29be:	a4 97       	sbiw	r28, 0x24	; 36
    29c0:	89 0f       	add	r24, r25
    29c2:	c0 55       	subi	r28, 0x50	; 80
    29c4:	df 4f       	sbci	r29, 0xFF	; 255
    29c6:	88 83       	st	Y, r24
    29c8:	c0 5b       	subi	r28, 0xB0	; 176
    29ca:	d0 40       	sbci	r29, 0x00	; 0
    29cc:	72 c0       	rjmp	.+228    	; 0x2ab2 <main+0xba8>
						if (SigSecond==44) SigHour=BitA[39]*20 + BitA[40]*10 + BitA[41]*8 + BitA[42]*4 + BitA[43]*2 + BitA[44];
    29ce:	cd 55       	subi	r28, 0x5D	; 93
    29d0:	df 4f       	sbci	r29, 0xFF	; 255
    29d2:	b8 81       	ld	r27, Y
    29d4:	c3 5a       	subi	r28, 0xA3	; 163
    29d6:	d0 40       	sbci	r29, 0x00	; 0
    29d8:	bc 32       	cpi	r27, 0x2C	; 44
    29da:	69 f5       	brne	.+90     	; 0x2a36 <main+0xb2c>
    29dc:	a5 96       	adiw	r28, 0x25	; 37
    29de:	8f ad       	ldd	r24, Y+63	; 0x3f
    29e0:	a5 97       	sbiw	r28, 0x25	; 37
    29e2:	88 0f       	add	r24, r24
    29e4:	88 0f       	add	r24, r24
    29e6:	28 2f       	mov	r18, r24
    29e8:	22 0f       	add	r18, r18
    29ea:	22 0f       	add	r18, r18
    29ec:	28 0f       	add	r18, r24
    29ee:	a6 96       	adiw	r28, 0x26	; 38
    29f0:	8f ad       	ldd	r24, Y+63	; 0x3f
    29f2:	a6 97       	sbiw	r28, 0x26	; 38
    29f4:	88 0f       	add	r24, r24
    29f6:	98 2f       	mov	r25, r24
    29f8:	99 0f       	add	r25, r25
    29fa:	99 0f       	add	r25, r25
    29fc:	89 0f       	add	r24, r25
    29fe:	82 0f       	add	r24, r18
    2a00:	aa 96       	adiw	r28, 0x2a	; 42
    2a02:	2f ad       	ldd	r18, Y+63	; 0x3f
    2a04:	aa 97       	sbiw	r28, 0x2a	; 42
    2a06:	28 0f       	add	r18, r24
    2a08:	a7 96       	adiw	r28, 0x27	; 39
    2a0a:	8f ad       	ldd	r24, Y+63	; 0x3f
    2a0c:	a7 97       	sbiw	r28, 0x27	; 39
    2a0e:	98 2f       	mov	r25, r24
    2a10:	99 0f       	add	r25, r25
    2a12:	a8 96       	adiw	r28, 0x28	; 40
    2a14:	8f ad       	ldd	r24, Y+63	; 0x3f
    2a16:	a8 97       	sbiw	r28, 0x28	; 40
    2a18:	89 0f       	add	r24, r25
    2a1a:	98 2f       	mov	r25, r24
    2a1c:	99 0f       	add	r25, r25
    2a1e:	a9 96       	adiw	r28, 0x29	; 41
    2a20:	8f ad       	ldd	r24, Y+63	; 0x3f
    2a22:	a9 97       	sbiw	r28, 0x29	; 41
    2a24:	89 0f       	add	r24, r25
    2a26:	88 0f       	add	r24, r24
    2a28:	28 0f       	add	r18, r24
    2a2a:	c4 55       	subi	r28, 0x54	; 84
    2a2c:	df 4f       	sbci	r29, 0xFF	; 255
    2a2e:	28 83       	st	Y, r18
    2a30:	cc 5a       	subi	r28, 0xAC	; 172
    2a32:	d0 40       	sbci	r29, 0x00	; 0
    2a34:	45 c0       	rjmp	.+138    	; 0x2ac0 <main+0xbb6>
						if (SigSecond==51) SigMinute=BitA[45]*40 + BitA[46]*20 + BitA[47]*10 + BitA[48]*8 + BitA[49]*4 + BitA[50]*2 + BitA[51];
    2a36:	cd 55       	subi	r28, 0x5D	; 93
    2a38:	df 4f       	sbci	r29, 0xFF	; 255
    2a3a:	e8 81       	ld	r30, Y
    2a3c:	c3 5a       	subi	r28, 0xA3	; 163
    2a3e:	d0 40       	sbci	r29, 0x00	; 0
    2a40:	e3 33       	cpi	r30, 0x33	; 51
    2a42:	b9 f5       	brne	.+110    	; 0x2ab2 <main+0xba8>
    2a44:	ab 96       	adiw	r28, 0x2b	; 43
    2a46:	2f ad       	ldd	r18, Y+63	; 0x3f
    2a48:	ab 97       	sbiw	r28, 0x2b	; 43
    2a4a:	ac 96       	adiw	r28, 0x2c	; 44
    2a4c:	8f ad       	ldd	r24, Y+63	; 0x3f
    2a4e:	ac 97       	sbiw	r28, 0x2c	; 44
    2a50:	98 2f       	mov	r25, r24
    2a52:	99 0f       	add	r25, r25
    2a54:	99 0f       	add	r25, r25
    2a56:	89 2f       	mov	r24, r25
    2a58:	88 0f       	add	r24, r24
    2a5a:	88 0f       	add	r24, r24
    2a5c:	89 0f       	add	r24, r25
    2a5e:	f8 e2       	ldi	r31, 0x28	; 40
    2a60:	2f 9f       	mul	r18, r31
    2a62:	80 0d       	add	r24, r0
    2a64:	11 24       	eor	r1, r1
    2a66:	e1 96       	adiw	r28, 0x31	; 49
    2a68:	9f ad       	ldd	r25, Y+63	; 0x3f
    2a6a:	e1 97       	sbiw	r28, 0x31	; 49
    2a6c:	98 0f       	add	r25, r24
    2a6e:	ae 96       	adiw	r28, 0x2e	; 46
    2a70:	8f ad       	ldd	r24, Y+63	; 0x3f
    2a72:	ae 97       	sbiw	r28, 0x2e	; 46
    2a74:	88 0f       	add	r24, r24
    2a76:	88 0f       	add	r24, r24
    2a78:	88 0f       	add	r24, r24
    2a7a:	98 0f       	add	r25, r24
    2a7c:	ad 96       	adiw	r28, 0x2d	; 45
    2a7e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2a80:	ad 97       	sbiw	r28, 0x2d	; 45
    2a82:	28 2f       	mov	r18, r24
    2a84:	22 0f       	add	r18, r18
    2a86:	82 2f       	mov	r24, r18
    2a88:	88 0f       	add	r24, r24
    2a8a:	88 0f       	add	r24, r24
    2a8c:	82 0f       	add	r24, r18
    2a8e:	98 0f       	add	r25, r24
    2a90:	af 96       	adiw	r28, 0x2f	; 47
    2a92:	8f ad       	ldd	r24, Y+63	; 0x3f
    2a94:	af 97       	sbiw	r28, 0x2f	; 47
    2a96:	28 2f       	mov	r18, r24
    2a98:	22 0f       	add	r18, r18
    2a9a:	e0 96       	adiw	r28, 0x30	; 48
    2a9c:	8f ad       	ldd	r24, Y+63	; 0x3f
    2a9e:	e0 97       	sbiw	r28, 0x30	; 48
    2aa0:	82 0f       	add	r24, r18
    2aa2:	88 0f       	add	r24, r24
    2aa4:	98 0f       	add	r25, r24
    2aa6:	c5 55       	subi	r28, 0x55	; 85
    2aa8:	df 4f       	sbci	r29, 0xFF	; 255
    2aaa:	98 83       	st	Y, r25
    2aac:	cb 5a       	subi	r28, 0xAB	; 171
    2aae:	d0 40       	sbci	r29, 0x00	; 0
    2ab0:	07 c0       	rjmp	.+14     	; 0x2ac0 <main+0xbb6>

						// ... and display if meaningful
						if(SigSecond>=35) {
    2ab2:	cd 55       	subi	r28, 0x5D	; 93
    2ab4:	df 4f       	sbci	r29, 0xFF	; 255
    2ab6:	28 81       	ld	r18, Y
    2ab8:	c3 5a       	subi	r28, 0xA3	; 163
    2aba:	d0 40       	sbci	r29, 0x00	; 0
    2abc:	23 32       	cpi	r18, 0x23	; 35
    2abe:	80 f1       	brcs	.+96     	; 0x2b20 <main+0xc16>
							DString[0]= 0x30 + (uint8_t)(SigDay%100)/10;
    2ac0:	89 e2       	ldi	r24, 0x29	; 41
    2ac2:	c3 55       	subi	r28, 0x53	; 83
    2ac4:	df 4f       	sbci	r29, 0xFF	; 255
    2ac6:	38 81       	ld	r19, Y
    2ac8:	cd 5a       	subi	r28, 0xAD	; 173
    2aca:	d0 40       	sbci	r29, 0x00	; 0
    2acc:	38 9f       	mul	r19, r24
    2ace:	81 2d       	mov	r24, r1
    2ad0:	11 24       	eor	r1, r1
    2ad2:	82 95       	swap	r24
    2ad4:	8f 70       	andi	r24, 0x0F	; 15
    2ad6:	93 2f       	mov	r25, r19
    2ad8:	a4 e6       	ldi	r26, 0x64	; 100
    2ada:	8a 9f       	mul	r24, r26
    2adc:	90 19       	sub	r25, r0
    2ade:	11 24       	eor	r1, r1
    2ae0:	8d ec       	ldi	r24, 0xCD	; 205
    2ae2:	98 9f       	mul	r25, r24
    2ae4:	91 2d       	mov	r25, r1
    2ae6:	11 24       	eor	r1, r1
    2ae8:	96 95       	lsr	r25
    2aea:	96 95       	lsr	r25
    2aec:	96 95       	lsr	r25
    2aee:	90 5d       	subi	r25, 0xD0	; 208
    2af0:	c3 57       	subi	r28, 0x73	; 115
    2af2:	df 4f       	sbci	r29, 0xFF	; 255
    2af4:	98 83       	st	Y, r25
    2af6:	cd 58       	subi	r28, 0x8D	; 141
    2af8:	d0 40       	sbci	r29, 0x00	; 0
							DString[1]= 0x30 + (uint8_t)(SigDay%10);
    2afa:	38 9f       	mul	r19, r24
    2afc:	81 2d       	mov	r24, r1
    2afe:	11 24       	eor	r1, r1
    2b00:	86 95       	lsr	r24
    2b02:	86 95       	lsr	r24
    2b04:	86 95       	lsr	r24
    2b06:	88 0f       	add	r24, r24
    2b08:	98 2f       	mov	r25, r24
    2b0a:	99 0f       	add	r25, r25
    2b0c:	99 0f       	add	r25, r25
    2b0e:	89 0f       	add	r24, r25
    2b10:	38 1b       	sub	r19, r24
    2b12:	83 2f       	mov	r24, r19
    2b14:	80 5d       	subi	r24, 0xD0	; 208
    2b16:	c2 57       	subi	r28, 0x72	; 114
    2b18:	df 4f       	sbci	r29, 0xFF	; 255
    2b1a:	88 83       	st	Y, r24
    2b1c:	ce 58       	subi	r28, 0x8E	; 142
    2b1e:	d0 40       	sbci	r29, 0x00	; 0
						}
						
						if(SigSecond>=29) {
    2b20:	cd 55       	subi	r28, 0x5D	; 93
    2b22:	df 4f       	sbci	r29, 0xFF	; 255
    2b24:	b8 81       	ld	r27, Y
    2b26:	c3 5a       	subi	r28, 0xA3	; 163
    2b28:	d0 40       	sbci	r29, 0x00	; 0
    2b2a:	bd 31       	cpi	r27, 0x1D	; 29
    2b2c:	80 f1       	brcs	.+96     	; 0x2b8e <main+0xc84>
							DString[3]= 0x30 + (uint8_t)(SigMonth%100)/10;
    2b2e:	89 e2       	ldi	r24, 0x29	; 41
    2b30:	c2 55       	subi	r28, 0x52	; 82
    2b32:	df 4f       	sbci	r29, 0xFF	; 255
    2b34:	e8 81       	ld	r30, Y
    2b36:	ce 5a       	subi	r28, 0xAE	; 174
    2b38:	d0 40       	sbci	r29, 0x00	; 0
    2b3a:	e8 9f       	mul	r30, r24
    2b3c:	81 2d       	mov	r24, r1
    2b3e:	11 24       	eor	r1, r1
    2b40:	82 95       	swap	r24
    2b42:	8f 70       	andi	r24, 0x0F	; 15
    2b44:	9e 2f       	mov	r25, r30
    2b46:	f4 e6       	ldi	r31, 0x64	; 100
    2b48:	8f 9f       	mul	r24, r31
    2b4a:	90 19       	sub	r25, r0
    2b4c:	11 24       	eor	r1, r1
    2b4e:	8d ec       	ldi	r24, 0xCD	; 205
    2b50:	98 9f       	mul	r25, r24
    2b52:	91 2d       	mov	r25, r1
    2b54:	11 24       	eor	r1, r1
    2b56:	96 95       	lsr	r25
    2b58:	96 95       	lsr	r25
    2b5a:	96 95       	lsr	r25
    2b5c:	90 5d       	subi	r25, 0xD0	; 208
    2b5e:	c0 57       	subi	r28, 0x70	; 112
    2b60:	df 4f       	sbci	r29, 0xFF	; 255
    2b62:	98 83       	st	Y, r25
    2b64:	c0 59       	subi	r28, 0x90	; 144
    2b66:	d0 40       	sbci	r29, 0x00	; 0
							DString[4]= 0x30 + (uint8_t)(SigMonth%10);
    2b68:	e8 9f       	mul	r30, r24
    2b6a:	81 2d       	mov	r24, r1
    2b6c:	11 24       	eor	r1, r1
    2b6e:	86 95       	lsr	r24
    2b70:	86 95       	lsr	r24
    2b72:	86 95       	lsr	r24
    2b74:	88 0f       	add	r24, r24
    2b76:	98 2f       	mov	r25, r24
    2b78:	99 0f       	add	r25, r25
    2b7a:	99 0f       	add	r25, r25
    2b7c:	89 0f       	add	r24, r25
    2b7e:	e8 1b       	sub	r30, r24
    2b80:	8e 2f       	mov	r24, r30
    2b82:	80 5d       	subi	r24, 0xD0	; 208
    2b84:	cf 56       	subi	r28, 0x6F	; 111
    2b86:	df 4f       	sbci	r29, 0xFF	; 255
    2b88:	88 83       	st	Y, r24
    2b8a:	c1 59       	subi	r28, 0x91	; 145
    2b8c:	d0 40       	sbci	r29, 0x00	; 0
						}						

						if(SigSecond>=24) {
    2b8e:	cd 55       	subi	r28, 0x5D	; 93
    2b90:	df 4f       	sbci	r29, 0xFF	; 255
    2b92:	28 81       	ld	r18, Y
    2b94:	c3 5a       	subi	r28, 0xA3	; 163
    2b96:	d0 40       	sbci	r29, 0x00	; 0
    2b98:	28 31       	cpi	r18, 0x18	; 24
    2b9a:	d0 f1       	brcs	.+116    	; 0x2c10 <main+0xd06>
							DString[6]= 0x30 + (uint8_t)(SigYear%100)/10;
    2b9c:	89 e2       	ldi	r24, 0x29	; 41
    2b9e:	c1 55       	subi	r28, 0x51	; 81
    2ba0:	df 4f       	sbci	r29, 0xFF	; 255
    2ba2:	38 81       	ld	r19, Y
    2ba4:	cf 5a       	subi	r28, 0xAF	; 175
    2ba6:	d0 40       	sbci	r29, 0x00	; 0
    2ba8:	38 9f       	mul	r19, r24
    2baa:	81 2d       	mov	r24, r1
    2bac:	11 24       	eor	r1, r1
    2bae:	82 95       	swap	r24
    2bb0:	8f 70       	andi	r24, 0x0F	; 15
    2bb2:	93 2f       	mov	r25, r19
    2bb4:	a4 e6       	ldi	r26, 0x64	; 100
    2bb6:	8a 9f       	mul	r24, r26
    2bb8:	90 19       	sub	r25, r0
    2bba:	11 24       	eor	r1, r1
    2bbc:	8d ec       	ldi	r24, 0xCD	; 205
    2bbe:	98 9f       	mul	r25, r24
    2bc0:	91 2d       	mov	r25, r1
    2bc2:	11 24       	eor	r1, r1
    2bc4:	96 95       	lsr	r25
    2bc6:	96 95       	lsr	r25
    2bc8:	96 95       	lsr	r25
    2bca:	90 5d       	subi	r25, 0xD0	; 208
    2bcc:	cd 56       	subi	r28, 0x6D	; 109
    2bce:	df 4f       	sbci	r29, 0xFF	; 255
    2bd0:	98 83       	st	Y, r25
    2bd2:	c3 59       	subi	r28, 0x93	; 147
    2bd4:	d0 40       	sbci	r29, 0x00	; 0
							DString[7]= 0x30 + (uint8_t)(SigYear%10);
    2bd6:	38 9f       	mul	r19, r24
    2bd8:	81 2d       	mov	r24, r1
    2bda:	11 24       	eor	r1, r1
    2bdc:	86 95       	lsr	r24
    2bde:	86 95       	lsr	r24
    2be0:	86 95       	lsr	r24
    2be2:	88 0f       	add	r24, r24
    2be4:	98 2f       	mov	r25, r24
    2be6:	99 0f       	add	r25, r25
    2be8:	99 0f       	add	r25, r25
    2bea:	89 0f       	add	r24, r25
    2bec:	38 1b       	sub	r19, r24
    2bee:	83 2f       	mov	r24, r19
    2bf0:	80 5d       	subi	r24, 0xD0	; 208
    2bf2:	cc 56       	subi	r28, 0x6C	; 108
    2bf4:	df 4f       	sbci	r29, 0xFF	; 255
    2bf6:	88 83       	st	Y, r24
    2bf8:	c4 59       	subi	r28, 0x94	; 148
    2bfa:	d0 40       	sbci	r29, 0x00	; 0
							WriteText(&IM8_FontInfo,DString,40,30,CENTRE);
    2bfc:	01 e0       	ldi	r16, 0x01	; 1
    2bfe:	2e e1       	ldi	r18, 0x1E	; 30
    2c00:	48 e2       	ldi	r20, 0x28	; 40
    2c02:	be 01       	movw	r22, r28
    2c04:	63 57       	subi	r22, 0x73	; 115
    2c06:	7f 4f       	sbci	r23, 0xFF	; 255
    2c08:	8d e8       	ldi	r24, 0x8D	; 141
    2c0a:	91 e0       	ldi	r25, 0x01	; 1
    2c0c:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_Z9WriteTextPK9FONT_INFOPKchhh>
						}

						if (SigSecond>=38) {
    2c10:	cd 55       	subi	r28, 0x5D	; 93
    2c12:	df 4f       	sbci	r29, 0xFF	; 255
    2c14:	b8 81       	ld	r27, Y
    2c16:	c3 5a       	subi	r28, 0xA3	; 163
    2c18:	d0 40       	sbci	r29, 0x00	; 0
    2c1a:	b6 32       	cpi	r27, 0x26	; 38
    2c1c:	08 f4       	brcc	.+2      	; 0x2c20 <main+0xd16>
    2c1e:	55 c0       	rjmp	.+170    	; 0x2cca <main+0xdc0>
							switch(SigDoW) {
    2c20:	c0 55       	subi	r28, 0x50	; 80
    2c22:	df 4f       	sbci	r29, 0xFF	; 255
    2c24:	e8 81       	ld	r30, Y
    2c26:	c0 5b       	subi	r28, 0xB0	; 176
    2c28:	d0 40       	sbci	r29, 0x00	; 0
    2c2a:	8e 2f       	mov	r24, r30
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	87 30       	cpi	r24, 0x07	; 7
    2c30:	91 05       	cpc	r25, r1
    2c32:	08 f0       	brcs	.+2      	; 0x2c36 <main+0xd2c>
    2c34:	4a c0       	rjmp	.+148    	; 0x2cca <main+0xdc0>
    2c36:	fc 01       	movw	r30, r24
    2c38:	ee 56       	subi	r30, 0x6E	; 110
    2c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3c:	0c 94 62 18 	jmp	0x30c4	; 0x30c4 <__tablejump2__>
								case 0: WriteText(&IM8_FontInfo,"Sun",70,30,RIGHT);
    2c40:	02 e0       	ldi	r16, 0x02	; 2
    2c42:	2e e1       	ldi	r18, 0x1E	; 30
    2c44:	46 e4       	ldi	r20, 0x46	; 70
    2c46:	6f ed       	ldi	r22, 0xDF	; 223
    2c48:	71 e0       	ldi	r23, 0x01	; 1
    2c4a:	8d e8       	ldi	r24, 0x8D	; 141
    2c4c:	91 e0       	ldi	r25, 0x01	; 1
    2c4e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_Z9WriteTextPK9FONT_INFOPKchhh>
										break;
    2c52:	3b c0       	rjmp	.+118    	; 0x2cca <main+0xdc0>
								case 1: WriteText(&IM8_FontInfo,"Mon",70,30,RIGHT);
    2c54:	02 e0       	ldi	r16, 0x02	; 2
    2c56:	2e e1       	ldi	r18, 0x1E	; 30
    2c58:	46 e4       	ldi	r20, 0x46	; 70
    2c5a:	63 ee       	ldi	r22, 0xE3	; 227
    2c5c:	71 e0       	ldi	r23, 0x01	; 1
    2c5e:	8d e8       	ldi	r24, 0x8D	; 141
    2c60:	91 e0       	ldi	r25, 0x01	; 1
    2c62:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_Z9WriteTextPK9FONT_INFOPKchhh>
										break;
    2c66:	31 c0       	rjmp	.+98     	; 0x2cca <main+0xdc0>
								case 2: WriteText(&IM8_FontInfo,"Tue",70,30,RIGHT);
    2c68:	02 e0       	ldi	r16, 0x02	; 2
    2c6a:	2e e1       	ldi	r18, 0x1E	; 30
    2c6c:	46 e4       	ldi	r20, 0x46	; 70
    2c6e:	67 ee       	ldi	r22, 0xE7	; 231
    2c70:	71 e0       	ldi	r23, 0x01	; 1
    2c72:	8d e8       	ldi	r24, 0x8D	; 141
    2c74:	91 e0       	ldi	r25, 0x01	; 1
    2c76:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_Z9WriteTextPK9FONT_INFOPKchhh>
										break;
    2c7a:	27 c0       	rjmp	.+78     	; 0x2cca <main+0xdc0>
								case 3: WriteText(&IM8_FontInfo,"Wed",70,30,RIGHT);
    2c7c:	02 e0       	ldi	r16, 0x02	; 2
    2c7e:	2e e1       	ldi	r18, 0x1E	; 30
    2c80:	46 e4       	ldi	r20, 0x46	; 70
    2c82:	6b ee       	ldi	r22, 0xEB	; 235
    2c84:	71 e0       	ldi	r23, 0x01	; 1
    2c86:	8d e8       	ldi	r24, 0x8D	; 141
    2c88:	91 e0       	ldi	r25, 0x01	; 1
    2c8a:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_Z9WriteTextPK9FONT_INFOPKchhh>
										break;
    2c8e:	1d c0       	rjmp	.+58     	; 0x2cca <main+0xdc0>
								case 4: WriteText(&IM8_FontInfo,"Thu",70,30,RIGHT);
    2c90:	02 e0       	ldi	r16, 0x02	; 2
    2c92:	2e e1       	ldi	r18, 0x1E	; 30
    2c94:	46 e4       	ldi	r20, 0x46	; 70
    2c96:	6f ee       	ldi	r22, 0xEF	; 239
    2c98:	71 e0       	ldi	r23, 0x01	; 1
    2c9a:	8d e8       	ldi	r24, 0x8D	; 141
    2c9c:	91 e0       	ldi	r25, 0x01	; 1
    2c9e:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_Z9WriteTextPK9FONT_INFOPKchhh>
										break;
    2ca2:	13 c0       	rjmp	.+38     	; 0x2cca <main+0xdc0>
								case 5: WriteText(&IM8_FontInfo,"Fri",70,30,RIGHT);
    2ca4:	02 e0       	ldi	r16, 0x02	; 2
    2ca6:	2e e1       	ldi	r18, 0x1E	; 30
    2ca8:	46 e4       	ldi	r20, 0x46	; 70
    2caa:	63 ef       	ldi	r22, 0xF3	; 243
    2cac:	71 e0       	ldi	r23, 0x01	; 1
    2cae:	8d e8       	ldi	r24, 0x8D	; 141
    2cb0:	91 e0       	ldi	r25, 0x01	; 1
    2cb2:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_Z9WriteTextPK9FONT_INFOPKchhh>
										break;
    2cb6:	09 c0       	rjmp	.+18     	; 0x2cca <main+0xdc0>
								case 6: WriteText(&IM8_FontInfo,"Sat",70,30,RIGHT);
    2cb8:	02 e0       	ldi	r16, 0x02	; 2
    2cba:	2e e1       	ldi	r18, 0x1E	; 30
    2cbc:	46 e4       	ldi	r20, 0x46	; 70
    2cbe:	67 ef       	ldi	r22, 0xF7	; 247
    2cc0:	71 e0       	ldi	r23, 0x01	; 1
    2cc2:	8d e8       	ldi	r24, 0x8D	; 141
    2cc4:	91 e0       	ldi	r25, 0x01	; 1
    2cc6:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_Z9WriteTextPK9FONT_INFOPKchhh>
										break;
							}

						}
						if (SigSecond>=51) {
    2cca:	cd 55       	subi	r28, 0x5D	; 93
    2ccc:	df 4f       	sbci	r29, 0xFF	; 255
    2cce:	f8 81       	ld	r31, Y
    2cd0:	c3 5a       	subi	r28, 0xA3	; 163
    2cd2:	d0 40       	sbci	r29, 0x00	; 0
    2cd4:	f3 33       	cpi	r31, 0x33	; 51
    2cd6:	80 f1       	brcs	.+96     	; 0x2d38 <main+0xe2e>
							TString[3]= 0x30 + (uint8_t)(SigMinute%100)/10;
    2cd8:	89 e2       	ldi	r24, 0x29	; 41
    2cda:	c5 55       	subi	r28, 0x55	; 85
    2cdc:	df 4f       	sbci	r29, 0xFF	; 255
    2cde:	28 81       	ld	r18, Y
    2ce0:	cb 5a       	subi	r28, 0xAB	; 171
    2ce2:	d0 40       	sbci	r29, 0x00	; 0
    2ce4:	28 9f       	mul	r18, r24
    2ce6:	81 2d       	mov	r24, r1
    2ce8:	11 24       	eor	r1, r1
    2cea:	82 95       	swap	r24
    2cec:	8f 70       	andi	r24, 0x0F	; 15
    2cee:	92 2f       	mov	r25, r18
    2cf0:	34 e6       	ldi	r19, 0x64	; 100
    2cf2:	83 9f       	mul	r24, r19
    2cf4:	90 19       	sub	r25, r0
    2cf6:	11 24       	eor	r1, r1
    2cf8:	8d ec       	ldi	r24, 0xCD	; 205
    2cfa:	98 9f       	mul	r25, r24
    2cfc:	91 2d       	mov	r25, r1
    2cfe:	11 24       	eor	r1, r1
    2d00:	96 95       	lsr	r25
    2d02:	96 95       	lsr	r25
    2d04:	96 95       	lsr	r25
    2d06:	90 5d       	subi	r25, 0xD0	; 208
    2d08:	c7 56       	subi	r28, 0x67	; 103
    2d0a:	df 4f       	sbci	r29, 0xFF	; 255
    2d0c:	98 83       	st	Y, r25
    2d0e:	c9 59       	subi	r28, 0x99	; 153
    2d10:	d0 40       	sbci	r29, 0x00	; 0
							TString[4]= 0x30 + (uint8_t)(SigMinute%10);
    2d12:	28 9f       	mul	r18, r24
    2d14:	81 2d       	mov	r24, r1
    2d16:	11 24       	eor	r1, r1
    2d18:	86 95       	lsr	r24
    2d1a:	86 95       	lsr	r24
    2d1c:	86 95       	lsr	r24
    2d1e:	88 0f       	add	r24, r24
    2d20:	98 2f       	mov	r25, r24
    2d22:	99 0f       	add	r25, r25
    2d24:	99 0f       	add	r25, r25
    2d26:	89 0f       	add	r24, r25
    2d28:	28 1b       	sub	r18, r24
    2d2a:	82 2f       	mov	r24, r18
    2d2c:	80 5d       	subi	r24, 0xD0	; 208
    2d2e:	c6 56       	subi	r28, 0x66	; 102
    2d30:	df 4f       	sbci	r29, 0xFF	; 255
    2d32:	88 83       	st	Y, r24
    2d34:	ca 59       	subi	r28, 0x9A	; 154
    2d36:	d0 40       	sbci	r29, 0x00	; 0
						}
						if (SigSecond>=44) {
    2d38:	cd 55       	subi	r28, 0x5D	; 93
    2d3a:	df 4f       	sbci	r29, 0xFF	; 255
    2d3c:	88 81       	ld	r24, Y
    2d3e:	c3 5a       	subi	r28, 0xA3	; 163
    2d40:	d0 40       	sbci	r29, 0x00	; 0
    2d42:	8c 32       	cpi	r24, 0x2C	; 44
    2d44:	08 f4       	brcc	.+2      	; 0x2d48 <main+0xe3e>
    2d46:	c8 c0       	rjmp	.+400    	; 0x2ed8 <main+0xfce>
							TString[0]= 0x30 + (uint8_t)(SigHour%100)/10;
    2d48:	89 e2       	ldi	r24, 0x29	; 41
    2d4a:	c4 55       	subi	r28, 0x54	; 84
    2d4c:	df 4f       	sbci	r29, 0xFF	; 255
    2d4e:	98 81       	ld	r25, Y
    2d50:	cc 5a       	subi	r28, 0xAC	; 172
    2d52:	d0 40       	sbci	r29, 0x00	; 0
    2d54:	98 9f       	mul	r25, r24
    2d56:	81 2d       	mov	r24, r1
    2d58:	11 24       	eor	r1, r1
    2d5a:	82 95       	swap	r24
    2d5c:	8f 70       	andi	r24, 0x0F	; 15
    2d5e:	a4 e6       	ldi	r26, 0x64	; 100
    2d60:	8a 9f       	mul	r24, r26
    2d62:	90 19       	sub	r25, r0
    2d64:	11 24       	eor	r1, r1
    2d66:	8d ec       	ldi	r24, 0xCD	; 205
    2d68:	98 9f       	mul	r25, r24
    2d6a:	91 2d       	mov	r25, r1
    2d6c:	11 24       	eor	r1, r1
    2d6e:	96 95       	lsr	r25
    2d70:	96 95       	lsr	r25
    2d72:	96 95       	lsr	r25
    2d74:	90 5d       	subi	r25, 0xD0	; 208
    2d76:	ca 56       	subi	r28, 0x6A	; 106
    2d78:	df 4f       	sbci	r29, 0xFF	; 255
    2d7a:	98 83       	st	Y, r25
    2d7c:	c6 59       	subi	r28, 0x96	; 150
    2d7e:	d0 40       	sbci	r29, 0x00	; 0
							TString[1]= 0x30 + (uint8_t)(SigHour%10);
    2d80:	c4 55       	subi	r28, 0x54	; 84
    2d82:	df 4f       	sbci	r29, 0xFF	; 255
    2d84:	b8 81       	ld	r27, Y
    2d86:	cc 5a       	subi	r28, 0xAC	; 172
    2d88:	d0 40       	sbci	r29, 0x00	; 0
    2d8a:	b8 9f       	mul	r27, r24
    2d8c:	81 2d       	mov	r24, r1
    2d8e:	11 24       	eor	r1, r1
    2d90:	86 95       	lsr	r24
    2d92:	86 95       	lsr	r24
    2d94:	86 95       	lsr	r24
    2d96:	88 0f       	add	r24, r24
    2d98:	98 2f       	mov	r25, r24
    2d9a:	99 0f       	add	r25, r25
    2d9c:	99 0f       	add	r25, r25
    2d9e:	89 0f       	add	r24, r25
    2da0:	b8 1b       	sub	r27, r24
    2da2:	8b 2f       	mov	r24, r27
    2da4:	80 5d       	subi	r24, 0xD0	; 208
    2da6:	c9 56       	subi	r28, 0x69	; 105
    2da8:	df 4f       	sbci	r29, 0xFF	; 255
    2daa:	88 83       	st	Y, r24
    2dac:	c7 59       	subi	r28, 0x97	; 151
    2dae:	d0 40       	sbci	r29, 0x00	; 0
							WriteText(&IM16_FontInfo,TString,0,42,CENTRE);							
    2db0:	01 e0       	ldi	r16, 0x01	; 1
    2db2:	2a e2       	ldi	r18, 0x2A	; 42
    2db4:	40 e0       	ldi	r20, 0x00	; 0
    2db6:	be 01       	movw	r22, r28
    2db8:	6a 56       	subi	r22, 0x6A	; 106
    2dba:	7f 4f       	sbci	r23, 0xFF	; 255
    2dbc:	85 e8       	ldi	r24, 0x85	; 133
    2dbe:	91 e0       	ldi	r25, 0x01	; 1
    2dc0:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_Z9WriteTextPK9FONT_INFOPKchhh>
    2dc4:	89 c0       	rjmp	.+274    	; 0x2ed8 <main+0xfce>
    2dc6:	c7 01       	movw	r24, r14
    2dc8:	01 96       	adiw	r24, 0x01	; 1

			BitA[SigSecond]=false;
			BitB[SigSecond]=false;
			BitC=false;
			
			for (i=0; i<=999; i++) {
    2dca:	88 3e       	cpi	r24, 0xE8	; 232
    2dcc:	93 40       	sbci	r25, 0x03	; 3
    2dce:	08 f4       	brcc	.+2      	; 0x2dd2 <main+0xec8>
    2dd0:	2a cc       	rjmp	.-1964   	; 0x2626 <main+0x71c>
    2dd2:	70 2e       	mov	r7, r16
				}
			
			
			}
			
			if (MMarkFound) {
    2dd4:	cb 55       	subi	r28, 0x5B	; 91
    2dd6:	df 4f       	sbci	r29, 0xFF	; 255
    2dd8:	f8 81       	ld	r31, Y
    2dda:	c5 5a       	subi	r28, 0xA5	; 165
    2ddc:	d0 40       	sbci	r29, 0x00	; 0
    2dde:	ff 23       	and	r31, r31
    2de0:	a1 f0       	breq	.+40     	; 0x2e0a <main+0xf00>
				Byte2String(BString,SigSecond);
    2de2:	cd 55       	subi	r28, 0x5D	; 93
    2de4:	df 4f       	sbci	r29, 0xFF	; 255
    2de6:	68 81       	ld	r22, Y
    2de8:	c3 5a       	subi	r28, 0xA3	; 163
    2dea:	d0 40       	sbci	r29, 0x00	; 0
    2dec:	ce 01       	movw	r24, r28
    2dee:	84 56       	subi	r24, 0x64	; 100
    2df0:	9f 4f       	sbci	r25, 0xFF	; 255
    2df2:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <_Z11Byte2StringPch>
				WriteText(&IM8_FontInfo,BString,128,0,RIGHT);
    2df6:	02 e0       	ldi	r16, 0x02	; 2
    2df8:	20 e0       	ldi	r18, 0x00	; 0
    2dfa:	40 e8       	ldi	r20, 0x80	; 128
    2dfc:	be 01       	movw	r22, r28
    2dfe:	64 56       	subi	r22, 0x64	; 100
    2e00:	7f 4f       	sbci	r23, 0xFF	; 255
    2e02:	8d e8       	ldi	r24, 0x8D	; 141
    2e04:	91 e0       	ldi	r25, 0x01	; 1
    2e06:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_Z9WriteTextPK9FONT_INFOPKchhh>
			}
			
		}
		// --------------------------------------------------------------------------------------
		
		fb.show(); // update OLED screen
    2e0a:	85 e1       	ldi	r24, 0x15	; 21
    2e0c:	92 e0       	ldi	r25, 0x02	; 2
    2e0e:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <_ZN11Framebuffer4showEv>
		TC=TC-LEdgeAdjust;
    2e12:	80 91 12 02 	lds	r24, 0x0212
    2e16:	90 91 13 02 	lds	r25, 0x0213
    2e1a:	cc 55       	subi	r28, 0x5C	; 92
    2e1c:	df 4f       	sbci	r29, 0xFF	; 255
    2e1e:	28 81       	ld	r18, Y
    2e20:	c4 5a       	subi	r28, 0xA4	; 164
    2e22:	d0 40       	sbci	r29, 0x00	; 0
    2e24:	82 1b       	sub	r24, r18
    2e26:	91 09       	sbc	r25, r1
    2e28:	90 93 13 02 	sts	0x0213, r25
    2e2c:	80 93 12 02 	sts	0x0212, r24
	}
    2e30:	41 c9       	rjmp	.-3454   	; 0x20b4 <main+0x1aa>
					x++;
				}
				PrevPinState=PinState;
				PinState=CHECK_BIT(buffer[x],y);  // read pin state
			
				if (i>=LEdgeSMin && i<=LEdgeSMin+(10*LEdgeSRange)-1) // id ms counter within Leading Edge search range
    2e32:	ce 55       	subi	r28, 0x5E	; 94
    2e34:	df 4f       	sbci	r29, 0xFF	; 255
    2e36:	38 81       	ld	r19, Y
    2e38:	c2 5a       	subi	r28, 0xA2	; 162
    2e3a:	d0 40       	sbci	r29, 0x00	; 0
    2e3c:	83 2f       	mov	r24, r19
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	5c 01       	movw	r10, r24
    2e42:	aa 0c       	add	r10, r10
    2e44:	bb 1c       	adc	r11, r11
    2e46:	88 0f       	add	r24, r24
    2e48:	99 1f       	adc	r25, r25
    2e4a:	88 0f       	add	r24, r24
    2e4c:	99 1f       	adc	r25, r25
    2e4e:	88 0f       	add	r24, r24
    2e50:	99 1f       	adc	r25, r25
    2e52:	8a 0d       	add	r24, r10
    2e54:	9b 1d       	adc	r25, r11
    2e56:	51 01       	movw	r10, r2
    2e58:	a1 e0       	ldi	r26, 0x01	; 1
    2e5a:	aa 1a       	sub	r10, r26
    2e5c:	b1 08       	sbc	r11, r1
    2e5e:	a8 0e       	add	r10, r24
    2e60:	b9 1e       	adc	r11, r25
    2e62:	8c e0       	ldi	r24, 0x0C	; 12
    2e64:	68 2e       	mov	r6, r24
    2e66:	62 18       	sub	r6, r2
    2e68:	27 2d       	mov	r18, r7
    2e6a:	00 e0       	ldi	r16, 0x00	; 0
    2e6c:	10 e0       	ldi	r17, 0x00	; 0
			}
			
			x=0;  // Buffer byte counter
			y=0;  // Buffer bit counter
			for (i=0; i<=999; i++) {   // millisecond counter
				y++;
    2e6e:	ee 24       	eor	r14, r14
    2e70:	e3 94       	inc	r14
    2e72:	f1 2c       	mov	r15, r1
					x++;
				}
				PrevPinState=PinState;
				PinState=CHECK_BIT(buffer[x],y);  // read pin state
			
				if (i>=LEdgeSMin && i<=LEdgeSMin+(10*LEdgeSRange)-1) // id ms counter within Leading Edge search range
    2e74:	c1 2c       	mov	r12, r1
    2e76:	d1 2c       	mov	r13, r1
				{
					if (!PrevPinState && PinState) 	LEdgeCount[(i-LEdgeSMin)/LEdgeSRange]++; // leading Edge found, increment counter for current bin
    2e78:	83 2e       	mov	r8, r19
    2e7a:	91 2c       	mov	r9, r1
			x=0;  // Buffer byte counter
			y=0;  // Buffer bit counter
			for (i=0; i<=999; i++) {   // millisecond counter
				y++;
				if (y==8) {  
					y=0;
    2e7c:	41 2c       	mov	r4, r1
    2e7e:	51 2c       	mov	r5, r1
    2e80:	89 c9       	rjmp	.-3310   	; 0x2194 <main+0x28a>
    2e82:	fe 01       	movw	r30, r28
    2e84:	e7 58       	subi	r30, 0x87	; 135
    2e86:	ff 4f       	sbci	r31, 0xFF	; 255
    2e88:	4f 01       	movw	r8, r30
    2e8a:	9e 01       	movw	r18, r28
    2e8c:	2d 57       	subi	r18, 0x7D	; 125
    2e8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e90:	79 01       	movw	r14, r18
				WriteText(&IM8_FontInfo,BString,127,0,RIGHT);
			}
			
			x=0;  // Buffer byte counter
			y=0;  // Buffer bit counter
			for (i=0; i<=999; i++) {   // millisecond counter
    2e92:	6f 01       	movw	r12, r30
    2e94:	6c e0       	ldi	r22, 0x0C	; 12
    2e96:	e3 c9       	rjmp	.-3130   	; 0x225e <main+0x354>
						BitCSample=0;											
					}
					
					if (MMarkFound) { // if minute marker found...
						// ... interpret data collected
						if (SigSecond==24) SigYear=BitA[17]*80 + BitA[18]*40 + BitA[19]*20 + BitA[20]*10 + BitA[21]*8 + BitA[22]*4 + BitA[23]*2 + BitA[24];
    2e98:	cd 55       	subi	r28, 0x5D	; 93
    2e9a:	df 4f       	sbci	r29, 0xFF	; 255
    2e9c:	98 81       	ld	r25, Y
    2e9e:	c3 5a       	subi	r28, 0xA3	; 163
    2ea0:	d0 40       	sbci	r29, 0x00	; 0
    2ea2:	98 31       	cpi	r25, 0x18	; 24
    2ea4:	09 f0       	breq	.+2      	; 0x2ea8 <main+0xf9e>
    2ea6:	13 cd       	rjmp	.-1498   	; 0x28ce <main+0x9c4>
    2ea8:	d5 cc       	rjmp	.-1622   	; 0x2854 <main+0x94a>
						SigSecond=0;
					}

					if (!MMarkFound) {					
						// if no minute marker found display bit samples and results 
						WriteText(&IM8_FontInfo,"BitA",0,30,LEFT);
    2eaa:	00 e0       	ldi	r16, 0x00	; 0
    2eac:	2e e1       	ldi	r18, 0x1E	; 30
    2eae:	40 e0       	ldi	r20, 0x00	; 0
    2eb0:	6b ef       	ldi	r22, 0xFB	; 251
    2eb2:	71 e0       	ldi	r23, 0x01	; 1
    2eb4:	8d e8       	ldi	r24, 0x8D	; 141
    2eb6:	91 e0       	ldi	r25, 0x01	; 1
    2eb8:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <_Z9WriteTextPK9FONT_INFOPKchhh>
						WriteText(&IM8_FontInfo,BitA[SigSecond] ? "1" : "0",35,30,FREEPOS);
    2ebc:	cd 55       	subi	r28, 0x5D	; 93
    2ebe:	df 4f       	sbci	r29, 0xFF	; 255
    2ec0:	a8 81       	ld	r26, Y
    2ec2:	c3 5a       	subi	r28, 0xA3	; 163
    2ec4:	d0 40       	sbci	r29, 0x00	; 0
    2ec6:	8a 2e       	mov	r8, r26
    2ec8:	91 2c       	mov	r9, r1
    2eca:	fe 01       	movw	r30, r28
    2ecc:	e8 0d       	add	r30, r8
    2ece:	f9 1d       	adc	r31, r9
    2ed0:	85 ad       	ldd	r24, Z+61	; 0x3d
    2ed2:	81 11       	cpse	r24, r1
    2ed4:	53 cc       	rjmp	.-1882   	; 0x277c <main+0x872>
    2ed6:	4f cc       	rjmp	.-1890   	; 0x2776 <main+0x86c>
			
			// increment signal second counter if MMark found
			if (MMarkFound) {
				SigSecond++;
				if (SigSecond>=60) {
					SigSecond=0;
    2ed8:	b1 e0       	ldi	r27, 0x01	; 1
    2eda:	cb 55       	subi	r28, 0x5B	; 91
    2edc:	df 4f       	sbci	r29, 0xFF	; 255
    2ede:	b8 83       	st	Y, r27
    2ee0:	c5 5a       	subi	r28, 0xA5	; 165
    2ee2:	d0 40       	sbci	r29, 0x00	; 0
    2ee4:	a0 cb       	rjmp	.-2240   	; 0x2626 <main+0x71c>

00002ee6 <_GLOBAL__sub_I_fb>:
const uint8_t TILDE = 93;

#pragma endregion

// Global variables
Framebuffer fb;
    2ee6:	85 e1       	ldi	r24, 0x15	; 21
    2ee8:	92 e0       	ldi	r25, 0x02	; 2
    2eea:	0e 94 f5 0c 	call	0x19ea	; 0x19ea <_ZN11FramebufferC1Ev>
    2eee:	08 95       	ret

00002ef0 <_ZN7SSD130611sendCommandEh>:

    // Turn display back on
    sendCommand(SSD1306_DISPLAYON);
}

void SSD1306::sendCommand(uint8_t command) {
    2ef0:	1f 93       	push	r17
    2ef2:	cf 93       	push	r28
    2ef4:	df 93       	push	r29
    2ef6:	ec 01       	movw	r28, r24
    2ef8:	16 2f       	mov	r17, r22
    i2c.start();
    2efa:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <_ZN3I2C5startEv>
    i2c.write(0x00);
    2efe:	60 e0       	ldi	r22, 0x00	; 0
    2f00:	ce 01       	movw	r24, r28
    2f02:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <_ZN3I2C5writeEh>
    i2c.write(command);
    2f06:	61 2f       	mov	r22, r17
    2f08:	ce 01       	movw	r24, r28
    2f0a:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <_ZN3I2C5writeEh>
    i2c.stop();
    2f0e:	ce 01       	movw	r24, r28
    2f10:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <_ZN3I2C4stopEv>
}
    2f14:	df 91       	pop	r29
    2f16:	cf 91       	pop	r28
    2f18:	1f 91       	pop	r17
    2f1a:	08 95       	ret

00002f1c <_ZN7SSD1306C1Ev>:
#include "simulator/I2C.h"
#else
#include "I2C.h"
#endif

SSD1306::SSD1306() {
    2f1c:	cf 93       	push	r28
    2f1e:	df 93       	push	r29
    2f20:	ec 01       	movw	r28, r24
    2f22:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <_ZN3I2CC1Ev>
    i2c.init(SSD1306_DEFAULT_ADDRESS);
    2f26:	68 e7       	ldi	r22, 0x78	; 120
    2f28:	ce 01       	movw	r24, r28
    2f2a:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <_ZN3I2C4initEh>

    // Turn display off
    sendCommand(SSD1306_DISPLAYOFF);
    2f2e:	6e ea       	ldi	r22, 0xAE	; 174
    2f30:	ce 01       	movw	r24, r28
    2f32:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_SETDISPLAYCLOCKDIV);
    2f36:	65 ed       	ldi	r22, 0xD5	; 213
    2f38:	ce 01       	movw	r24, r28
    2f3a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x80);
    2f3e:	60 e8       	ldi	r22, 0x80	; 128
    2f40:	ce 01       	movw	r24, r28
    2f42:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_SETMULTIPLEX);
    2f46:	68 ea       	ldi	r22, 0xA8	; 168
    2f48:	ce 01       	movw	r24, r28
    2f4a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x3F);
    2f4e:	6f e3       	ldi	r22, 0x3F	; 63
    2f50:	ce 01       	movw	r24, r28
    2f52:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>
    
    sendCommand(SSD1306_SETDISPLAYOFFSET);
    2f56:	63 ed       	ldi	r22, 0xD3	; 211
    2f58:	ce 01       	movw	r24, r28
    2f5a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x00);
    2f5e:	60 e0       	ldi	r22, 0x00	; 0
    2f60:	ce 01       	movw	r24, r28
    2f62:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>
    
    sendCommand(SSD1306_SETSTARTLINE | 0x00);
    2f66:	60 e4       	ldi	r22, 0x40	; 64
    2f68:	ce 01       	movw	r24, r28
    2f6a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>
    
    // We use internal charge pump
    sendCommand(SSD1306_CHARGEPUMP);
    2f6e:	6d e8       	ldi	r22, 0x8D	; 141
    2f70:	ce 01       	movw	r24, r28
    2f72:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x14);
    2f76:	64 e1       	ldi	r22, 0x14	; 20
    2f78:	ce 01       	movw	r24, r28
    2f7a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>
    
    // Horizontal memory mode
    sendCommand(SSD1306_MEMORYMODE);
    2f7e:	60 e2       	ldi	r22, 0x20	; 32
    2f80:	ce 01       	movw	r24, r28
    2f82:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x00);
    2f86:	60 e0       	ldi	r22, 0x00	; 0
    2f88:	ce 01       	movw	r24, r28
    2f8a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>
    
    sendCommand(SSD1306_SEGREMAP | 0x1);
    2f8e:	61 ea       	ldi	r22, 0xA1	; 161
    2f90:	ce 01       	movw	r24, r28
    2f92:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_COMSCANDEC);
    2f96:	68 ec       	ldi	r22, 0xC8	; 200
    2f98:	ce 01       	movw	r24, r28
    2f9a:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_SETCOMPINS);
    2f9e:	6a ed       	ldi	r22, 0xDA	; 218
    2fa0:	ce 01       	movw	r24, r28
    2fa2:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x12);
    2fa6:	62 e1       	ldi	r22, 0x12	; 18
    2fa8:	ce 01       	movw	r24, r28
    2faa:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>

    // Max contrast
    sendCommand(SSD1306_SETCONTRAST);
    2fae:	61 e8       	ldi	r22, 0x81	; 129
    2fb0:	ce 01       	movw	r24, r28
    2fb2:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>
    sendCommand(0xCF);
    2fb6:	6f ec       	ldi	r22, 0xCF	; 207
    2fb8:	ce 01       	movw	r24, r28
    2fba:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_SETPRECHARGE);
    2fbe:	69 ed       	ldi	r22, 0xD9	; 217
    2fc0:	ce 01       	movw	r24, r28
    2fc2:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>
    sendCommand(0xF1);
    2fc6:	61 ef       	ldi	r22, 0xF1	; 241
    2fc8:	ce 01       	movw	r24, r28
    2fca:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_SETVCOMDETECT);
    2fce:	6b ed       	ldi	r22, 0xDB	; 219
    2fd0:	ce 01       	movw	r24, r28
    2fd2:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x40);
    2fd6:	60 e4       	ldi	r22, 0x40	; 64
    2fd8:	ce 01       	movw	r24, r28
    2fda:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_DISPLAYALLON_RESUME);
    2fde:	64 ea       	ldi	r22, 0xA4	; 164
    2fe0:	ce 01       	movw	r24, r28
    2fe2:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>

    // Non-inverted display
    sendCommand(SSD1306_NORMALDISPLAY);
    2fe6:	66 ea       	ldi	r22, 0xA6	; 166
    2fe8:	ce 01       	movw	r24, r28
    2fea:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>

    // Turn display back on
    sendCommand(SSD1306_DISPLAYON);
    2fee:	6f ea       	ldi	r22, 0xAF	; 175
    2ff0:	ce 01       	movw	r24, r28
    2ff2:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>
}
    2ff6:	df 91       	pop	r29
    2ff8:	cf 91       	pop	r28
    2ffa:	08 95       	ret

00002ffc <_ZN7SSD130615sendFramebufferEPh>:
    } else {
        sendCommand(SSD1306_NORMALDISPLAY);
    }
}

void SSD1306::sendFramebuffer(uint8_t *buffer) {
    2ffc:	cf 92       	push	r12
    2ffe:	df 92       	push	r13
    3000:	ef 92       	push	r14
    3002:	ff 92       	push	r15
    3004:	0f 93       	push	r16
    3006:	1f 93       	push	r17
    3008:	cf 93       	push	r28
    300a:	df 93       	push	r29
    300c:	08 2f       	mov	r16, r24
    300e:	19 2f       	mov	r17, r25
    3010:	7b 01       	movw	r14, r22
    sendCommand(SSD1306_COLUMNADDR);
    3012:	61 e2       	ldi	r22, 0x21	; 33
    3014:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x00);
    3018:	60 e0       	ldi	r22, 0x00	; 0
    301a:	80 2f       	mov	r24, r16
    301c:	91 2f       	mov	r25, r17
    301e:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x7F);
    3022:	6f e7       	ldi	r22, 0x7F	; 127
    3024:	80 2f       	mov	r24, r16
    3026:	91 2f       	mov	r25, r17
    3028:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_PAGEADDR);
    302c:	62 e2       	ldi	r22, 0x22	; 34
    302e:	80 2f       	mov	r24, r16
    3030:	91 2f       	mov	r25, r17
    3032:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x00);
    3036:	60 e0       	ldi	r22, 0x00	; 0
    3038:	80 2f       	mov	r24, r16
    303a:	91 2f       	mov	r25, r17
    303c:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x07);
    3040:	67 e0       	ldi	r22, 0x07	; 7
    3042:	80 2f       	mov	r24, r16
    3044:	91 2f       	mov	r25, r17
    3046:	0e 94 78 17 	call	0x2ef0	; 0x2ef0 <_ZN7SSD130611sendCommandEh>
    304a:	e7 01       	movw	r28, r14
    304c:	8c ef       	ldi	r24, 0xFC	; 252
    304e:	f8 1a       	sub	r15, r24

    // We have to send the buffer as 16 bytes packets
    // Our buffer is 1024 bytes long, 1024/16 = 64
    // We have to send 64 packets
    for (uint8_t packet = 0; packet < 64; packet++) {
        i2c.start();
    3050:	80 2f       	mov	r24, r16
    3052:	91 2f       	mov	r25, r17
    3054:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <_ZN3I2C5startEv>
        i2c.write(0x40);
    3058:	60 e4       	ldi	r22, 0x40	; 64
    305a:	80 2f       	mov	r24, r16
    305c:	91 2f       	mov	r25, r17
    305e:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <_ZN3I2C5writeEh>
    3062:	6e 01       	movw	r12, r28
    3064:	80 e1       	ldi	r24, 0x10	; 16
    3066:	c8 0e       	add	r12, r24
    3068:	d1 1c       	adc	r13, r1
        for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
            i2c.write(buffer[packet*16+packet_byte]);
    306a:	69 91       	ld	r22, Y+
    306c:	80 2f       	mov	r24, r16
    306e:	91 2f       	mov	r25, r17
    3070:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <_ZN3I2C5writeEh>
    // Our buffer is 1024 bytes long, 1024/16 = 64
    // We have to send 64 packets
    for (uint8_t packet = 0; packet < 64; packet++) {
        i2c.start();
        i2c.write(0x40);
        for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
    3074:	cc 15       	cp	r28, r12
    3076:	dd 05       	cpc	r29, r13
    3078:	c1 f7       	brne	.-16     	; 0x306a <_ZN7SSD130615sendFramebufferEPh+0x6e>
            i2c.write(buffer[packet*16+packet_byte]);
        }
        i2c.stop();
    307a:	80 2f       	mov	r24, r16
    307c:	91 2f       	mov	r25, r17
    307e:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <_ZN3I2C4stopEv>
    3082:	e6 01       	movw	r28, r12
    sendCommand(0x07);

    // We have to send the buffer as 16 bytes packets
    // Our buffer is 1024 bytes long, 1024/16 = 64
    // We have to send 64 packets
    for (uint8_t packet = 0; packet < 64; packet++) {
    3084:	ce 14       	cp	r12, r14
    3086:	df 04       	cpc	r13, r15
    3088:	19 f7       	brne	.-58     	; 0x3050 <_ZN7SSD130615sendFramebufferEPh+0x54>
        for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
            i2c.write(buffer[packet*16+packet_byte]);
        }
        i2c.stop();
    }
    308a:	df 91       	pop	r29
    308c:	cf 91       	pop	r28
    308e:	1f 91       	pop	r17
    3090:	0f 91       	pop	r16
    3092:	ff 90       	pop	r15
    3094:	ef 90       	pop	r14
    3096:	df 90       	pop	r13
    3098:	cf 90       	pop	r12
    309a:	08 95       	ret

0000309c <__udivmodhi4>:
    309c:	aa 1b       	sub	r26, r26
    309e:	bb 1b       	sub	r27, r27
    30a0:	51 e1       	ldi	r21, 0x11	; 17
    30a2:	07 c0       	rjmp	.+14     	; 0x30b2 <__udivmodhi4_ep>

000030a4 <__udivmodhi4_loop>:
    30a4:	aa 1f       	adc	r26, r26
    30a6:	bb 1f       	adc	r27, r27
    30a8:	a6 17       	cp	r26, r22
    30aa:	b7 07       	cpc	r27, r23
    30ac:	10 f0       	brcs	.+4      	; 0x30b2 <__udivmodhi4_ep>
    30ae:	a6 1b       	sub	r26, r22
    30b0:	b7 0b       	sbc	r27, r23

000030b2 <__udivmodhi4_ep>:
    30b2:	88 1f       	adc	r24, r24
    30b4:	99 1f       	adc	r25, r25
    30b6:	5a 95       	dec	r21
    30b8:	a9 f7       	brne	.-22     	; 0x30a4 <__udivmodhi4_loop>
    30ba:	80 95       	com	r24
    30bc:	90 95       	com	r25
    30be:	bc 01       	movw	r22, r24
    30c0:	cd 01       	movw	r24, r26
    30c2:	08 95       	ret

000030c4 <__tablejump2__>:
    30c4:	ee 0f       	add	r30, r30
    30c6:	ff 1f       	adc	r31, r31
    30c8:	05 90       	lpm	r0, Z+
    30ca:	f4 91       	lpm	r31, Z
    30cc:	e0 2d       	mov	r30, r0
    30ce:	09 94       	ijmp

000030d0 <__umulhisi3>:
    30d0:	a2 9f       	mul	r26, r18
    30d2:	b0 01       	movw	r22, r0
    30d4:	b3 9f       	mul	r27, r19
    30d6:	c0 01       	movw	r24, r0
    30d8:	a3 9f       	mul	r26, r19
    30da:	70 0d       	add	r23, r0
    30dc:	81 1d       	adc	r24, r1
    30de:	11 24       	eor	r1, r1
    30e0:	91 1d       	adc	r25, r1
    30e2:	b2 9f       	mul	r27, r18
    30e4:	70 0d       	add	r23, r0
    30e6:	81 1d       	adc	r24, r1
    30e8:	11 24       	eor	r1, r1
    30ea:	91 1d       	adc	r25, r1
    30ec:	08 95       	ret

000030ee <do_rand>:
    30ee:	8f 92       	push	r8
    30f0:	9f 92       	push	r9
    30f2:	af 92       	push	r10
    30f4:	bf 92       	push	r11
    30f6:	cf 92       	push	r12
    30f8:	df 92       	push	r13
    30fa:	ef 92       	push	r14
    30fc:	ff 92       	push	r15
    30fe:	cf 93       	push	r28
    3100:	df 93       	push	r29
    3102:	ec 01       	movw	r28, r24
    3104:	68 81       	ld	r22, Y
    3106:	79 81       	ldd	r23, Y+1	; 0x01
    3108:	8a 81       	ldd	r24, Y+2	; 0x02
    310a:	9b 81       	ldd	r25, Y+3	; 0x03
    310c:	61 15       	cp	r22, r1
    310e:	71 05       	cpc	r23, r1
    3110:	81 05       	cpc	r24, r1
    3112:	91 05       	cpc	r25, r1
    3114:	21 f4       	brne	.+8      	; 0x311e <do_rand+0x30>
    3116:	64 e2       	ldi	r22, 0x24	; 36
    3118:	79 ed       	ldi	r23, 0xD9	; 217
    311a:	8b e5       	ldi	r24, 0x5B	; 91
    311c:	97 e0       	ldi	r25, 0x07	; 7
    311e:	2d e1       	ldi	r18, 0x1D	; 29
    3120:	33 ef       	ldi	r19, 0xF3	; 243
    3122:	41 e0       	ldi	r20, 0x01	; 1
    3124:	50 e0       	ldi	r21, 0x00	; 0
    3126:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <__divmodsi4>
    312a:	49 01       	movw	r8, r18
    312c:	5a 01       	movw	r10, r20
    312e:	9b 01       	movw	r18, r22
    3130:	ac 01       	movw	r20, r24
    3132:	a7 ea       	ldi	r26, 0xA7	; 167
    3134:	b1 e4       	ldi	r27, 0x41	; 65
    3136:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <__muluhisi3>
    313a:	6b 01       	movw	r12, r22
    313c:	7c 01       	movw	r14, r24
    313e:	ac ee       	ldi	r26, 0xEC	; 236
    3140:	b4 ef       	ldi	r27, 0xF4	; 244
    3142:	a5 01       	movw	r20, r10
    3144:	94 01       	movw	r18, r8
    3146:	0e 94 00 19 	call	0x3200	; 0x3200 <__mulohisi3>
    314a:	dc 01       	movw	r26, r24
    314c:	cb 01       	movw	r24, r22
    314e:	8c 0d       	add	r24, r12
    3150:	9d 1d       	adc	r25, r13
    3152:	ae 1d       	adc	r26, r14
    3154:	bf 1d       	adc	r27, r15
    3156:	b7 ff       	sbrs	r27, 7
    3158:	03 c0       	rjmp	.+6      	; 0x3160 <do_rand+0x72>
    315a:	01 97       	sbiw	r24, 0x01	; 1
    315c:	a1 09       	sbc	r26, r1
    315e:	b0 48       	sbci	r27, 0x80	; 128
    3160:	88 83       	st	Y, r24
    3162:	99 83       	std	Y+1, r25	; 0x01
    3164:	aa 83       	std	Y+2, r26	; 0x02
    3166:	bb 83       	std	Y+3, r27	; 0x03
    3168:	9f 77       	andi	r25, 0x7F	; 127
    316a:	df 91       	pop	r29
    316c:	cf 91       	pop	r28
    316e:	ff 90       	pop	r15
    3170:	ef 90       	pop	r14
    3172:	df 90       	pop	r13
    3174:	cf 90       	pop	r12
    3176:	bf 90       	pop	r11
    3178:	af 90       	pop	r10
    317a:	9f 90       	pop	r9
    317c:	8f 90       	pop	r8
    317e:	08 95       	ret

00003180 <rand_r>:
    3180:	0e 94 77 18 	call	0x30ee	; 0x30ee <do_rand>
    3184:	08 95       	ret

00003186 <rand>:
    3186:	80 e0       	ldi	r24, 0x00	; 0
    3188:	91 e0       	ldi	r25, 0x01	; 1
    318a:	0e 94 77 18 	call	0x30ee	; 0x30ee <do_rand>
    318e:	08 95       	ret

00003190 <srand>:
    3190:	a0 e0       	ldi	r26, 0x00	; 0
    3192:	b0 e0       	ldi	r27, 0x00	; 0
    3194:	80 93 00 01 	sts	0x0100, r24
    3198:	90 93 01 01 	sts	0x0101, r25
    319c:	a0 93 02 01 	sts	0x0102, r26
    31a0:	b0 93 03 01 	sts	0x0103, r27
    31a4:	08 95       	ret

000031a6 <__divmodsi4>:
    31a6:	05 2e       	mov	r0, r21
    31a8:	97 fb       	bst	r25, 7
    31aa:	1e f4       	brtc	.+6      	; 0x31b2 <__divmodsi4+0xc>
    31ac:	00 94       	com	r0
    31ae:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <__negsi2>
    31b2:	57 fd       	sbrc	r21, 7
    31b4:	07 d0       	rcall	.+14     	; 0x31c4 <__divmodsi4_neg2>
    31b6:	0e 94 05 19 	call	0x320a	; 0x320a <__udivmodsi4>
    31ba:	07 fc       	sbrc	r0, 7
    31bc:	03 d0       	rcall	.+6      	; 0x31c4 <__divmodsi4_neg2>
    31be:	4e f4       	brtc	.+18     	; 0x31d2 <__divmodsi4_exit>
    31c0:	0c 94 ea 18 	jmp	0x31d4	; 0x31d4 <__negsi2>

000031c4 <__divmodsi4_neg2>:
    31c4:	50 95       	com	r21
    31c6:	40 95       	com	r20
    31c8:	30 95       	com	r19
    31ca:	21 95       	neg	r18
    31cc:	3f 4f       	sbci	r19, 0xFF	; 255
    31ce:	4f 4f       	sbci	r20, 0xFF	; 255
    31d0:	5f 4f       	sbci	r21, 0xFF	; 255

000031d2 <__divmodsi4_exit>:
    31d2:	08 95       	ret

000031d4 <__negsi2>:
    31d4:	90 95       	com	r25
    31d6:	80 95       	com	r24
    31d8:	70 95       	com	r23
    31da:	61 95       	neg	r22
    31dc:	7f 4f       	sbci	r23, 0xFF	; 255
    31de:	8f 4f       	sbci	r24, 0xFF	; 255
    31e0:	9f 4f       	sbci	r25, 0xFF	; 255
    31e2:	08 95       	ret

000031e4 <__muluhisi3>:
    31e4:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__umulhisi3>
    31e8:	a5 9f       	mul	r26, r21
    31ea:	90 0d       	add	r25, r0
    31ec:	b4 9f       	mul	r27, r20
    31ee:	90 0d       	add	r25, r0
    31f0:	a4 9f       	mul	r26, r20
    31f2:	80 0d       	add	r24, r0
    31f4:	91 1d       	adc	r25, r1
    31f6:	11 24       	eor	r1, r1
    31f8:	08 95       	ret

000031fa <__mulshisi3>:
    31fa:	b7 ff       	sbrs	r27, 7
    31fc:	0c 94 f2 18 	jmp	0x31e4	; 0x31e4 <__muluhisi3>

00003200 <__mulohisi3>:
    3200:	0e 94 f2 18 	call	0x31e4	; 0x31e4 <__muluhisi3>
    3204:	82 1b       	sub	r24, r18
    3206:	93 0b       	sbc	r25, r19
    3208:	08 95       	ret

0000320a <__udivmodsi4>:
    320a:	a1 e2       	ldi	r26, 0x21	; 33
    320c:	1a 2e       	mov	r1, r26
    320e:	aa 1b       	sub	r26, r26
    3210:	bb 1b       	sub	r27, r27
    3212:	fd 01       	movw	r30, r26
    3214:	0d c0       	rjmp	.+26     	; 0x3230 <__udivmodsi4_ep>

00003216 <__udivmodsi4_loop>:
    3216:	aa 1f       	adc	r26, r26
    3218:	bb 1f       	adc	r27, r27
    321a:	ee 1f       	adc	r30, r30
    321c:	ff 1f       	adc	r31, r31
    321e:	a2 17       	cp	r26, r18
    3220:	b3 07       	cpc	r27, r19
    3222:	e4 07       	cpc	r30, r20
    3224:	f5 07       	cpc	r31, r21
    3226:	20 f0       	brcs	.+8      	; 0x3230 <__udivmodsi4_ep>
    3228:	a2 1b       	sub	r26, r18
    322a:	b3 0b       	sbc	r27, r19
    322c:	e4 0b       	sbc	r30, r20
    322e:	f5 0b       	sbc	r31, r21

00003230 <__udivmodsi4_ep>:
    3230:	66 1f       	adc	r22, r22
    3232:	77 1f       	adc	r23, r23
    3234:	88 1f       	adc	r24, r24
    3236:	99 1f       	adc	r25, r25
    3238:	1a 94       	dec	r1
    323a:	69 f7       	brne	.-38     	; 0x3216 <__udivmodsi4_loop>
    323c:	60 95       	com	r22
    323e:	70 95       	com	r23
    3240:	80 95       	com	r24
    3242:	90 95       	com	r25
    3244:	9b 01       	movw	r18, r22
    3246:	ac 01       	movw	r20, r24
    3248:	bd 01       	movw	r22, r26
    324a:	cf 01       	movw	r24, r30
    324c:	08 95       	ret

0000324e <_exit>:
    324e:	f8 94       	cli

00003250 <__stop_program>:
    3250:	ff cf       	rjmp	.-2      	; 0x3250 <__stop_program>
