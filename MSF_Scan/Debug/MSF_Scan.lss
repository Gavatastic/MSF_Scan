
MSF_Scan.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000086  00800100  00001214  000012a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001214  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000407  00800186  00800186  0000132e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000132e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001360  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000221b  00000000  00000000  000014c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000091e  00000000  00000000  000036db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000072a  00000000  00000000  00003ff9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003ac  00000000  00000000  00004724  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007d9  00000000  00000000  00004ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018a5  00000000  00000000  000052a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00006b4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 01 	jmp	0x26a	; 0x26a <__ctors_end>
       4:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
       8:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
       c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      10:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      14:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      18:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      1c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      20:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      24:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      28:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      2c:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__vector_11>
      30:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      34:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      38:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      3c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      40:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      44:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      48:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      4c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      50:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      54:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      58:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      5c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      60:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>
      64:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 07       	cpc	r16, r16
      6c:	c0 00       	.word	0x00c0	; ????
      6e:	00 00       	nop
      70:	00 00       	nop
      72:	00 0f       	add	r16, r16
      74:	f0 00       	.word	0x00f0	; ????
      76:	00 00       	nop
      78:	00 00       	nop
      7a:	00 3c       	cpi	r16, 0xC0	; 192
      7c:	38 00       	.word	0x0038	; ????
      7e:	00 00       	nop
      80:	00 00       	nop
      82:	00 70       	andi	r16, 0x00	; 0
      84:	1c 00       	.word	0x001c	; ????
      86:	00 00       	nop
      88:	00 00       	nop
      8a:	00 60       	ori	r16, 0x00	; 0
      8c:	0e 00       	.word	0x000e	; ????
      8e:	00 00       	nop
      90:	00 00       	nop
      92:	00 e0       	ldi	r16, 0x00	; 0
      94:	07 00       	.word	0x0007	; ????
      96:	00 00       	nop
      98:	00 00       	nop
      9a:	01 c0       	rjmp	.+2      	; 0x9e <__trampolines_end+0x36>
      9c:	03 00       	.word	0x0003	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	01 80       	ldd	r0, Z+1	; 0x01
      a4:	03 80       	ldd	r0, Z+3	; 0x03
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	03 80       	ldd	r0, Z+3	; 0x03
      ac:	01 80       	ldd	r0, Z+1	; 0x01
      ae:	00 00       	nop
      b0:	00 00       	nop
      b2:	03 00       	.word	0x0003	; ????
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <__trampolines_end+0x50>
      b6:	00 00       	nop
      b8:	00 00       	nop
      ba:	03 00       	.word	0x0003	; ????
      bc:	00 c0       	rjmp	.+0      	; 0xbe <__trampolines_end+0x56>
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	06 00       	.word	0x0006	; ????
      c4:	00 c0       	rjmp	.+0      	; 0xc6 <__trampolines_end+0x5e>
      c6:	00 00       	nop
      c8:	00 3f       	cpi	r16, 0xF0	; 240
      ca:	c6 00       	.word	0x00c6	; ????
      cc:	00 67       	ori	r16, 0x70	; 112
      ce:	fc 00       	.word	0x00fc	; ????
      d0:	01 ff       	sbrs	r16, 1
      d2:	fe 00       	.word	0x00fe	; ????
      d4:	00 ff       	sbrs	r16, 0
      d6:	ff 80       	ldd	r15, Y+7	; 0x07
      d8:	07 c0       	rjmp	.+14     	; 0xe8 <__trampolines_end+0x80>
      da:	3f c0       	rjmp	.+126    	; 0x15a <__trampolines_end+0xf2>
      dc:	03 fc       	sbrc	r0, 3
      de:	03 c0       	rjmp	.+6      	; 0xe6 <__trampolines_end+0x7e>
      e0:	07 00       	.word	0x0007	; ????
      e2:	0f f8       	.word	0xf80f	; ????
      e4:	1f f0       	brie	.+6      	; 0xec <__trampolines_end+0x84>
      e6:	00 e0       	ldi	r16, 0x00	; 0
      e8:	0c 00       	.word	0x000c	; ????
      ea:	0c 3e       	cpi	r16, 0xEC	; 236
      ec:	fc 30       	cpi	r31, 0x0C	; 12
      ee:	00 70       	andi	r16, 0x00	; 0
      f0:	0c 00       	.word	0x000c	; ????
      f2:	0c 0f       	add	r16, r28
      f4:	e0 30       	cpi	r30, 0x00	; 0
      f6:	00 30       	cpi	r16, 0x00	; 0
      f8:	18 00       	.word	0x0018	; ????
      fa:	1c 0f       	add	r17, r28
      fc:	f0 30       	cpi	r31, 0x00	; 0
      fe:	00 38       	cpi	r16, 0x80	; 128
     100:	18 00       	.word	0x0018	; ????
     102:	18 3e       	cpi	r17, 0xE8	; 232
     104:	78 30       	cpi	r23, 0x08	; 8
     106:	00 38       	cpi	r16, 0x80	; 128
     108:	18 00       	.word	0x0018	; ????
     10a:	18 78       	andi	r17, 0x88	; 136
     10c:	1e 18       	sub	r1, r14
     10e:	00 38       	cpi	r16, 0x80	; 128
     110:	1c 00       	.word	0x001c	; ????
     112:	19 e0       	ldi	r17, 0x09	; 9
     114:	07 98       	cbi	0x00, 7	; 0
     116:	00 30       	cpi	r16, 0x00	; 0
     118:	0c 00       	.word	0x000c	; ????
     11a:	1f 80       	ldd	r1, Y+7	; 0x07
     11c:	01 f8       	bld	r0, 1
     11e:	00 30       	cpi	r16, 0x00	; 0
     120:	0c 00       	.word	0x000c	; ????
     122:	1f 00       	.word	0x001f	; ????
     124:	00 f8       	bld	r0, 0
     126:	00 70       	andi	r16, 0x00	; 0
     128:	06 00       	.word	0x0006	; ????
     12a:	3c 00       	.word	0x003c	; ????
     12c:	00 38       	cpi	r16, 0x80	; 128
     12e:	00 60       	ori	r16, 0x00	; 0
     130:	06 00       	.word	0x0006	; ????
     132:	78 00       	.word	0x0078	; ????
     134:	00 1e       	adc	r0, r16
     136:	00 e0       	ldi	r16, 0x00	; 0
     138:	03 00       	.word	0x0003	; ????
     13a:	f0 00       	.word	0x00f0	; ????
     13c:	00 1f       	adc	r16, r16
     13e:	00 c0       	rjmp	.+0      	; 0x140 <__trampolines_end+0xd8>
     140:	03 81       	ldd	r16, Z+3	; 0x03
     142:	f0 00       	.word	0x00f0	; ????
     144:	00 1f       	adc	r16, r16
     146:	81 c0       	rjmp	.+258    	; 0x24a <__trampolines_end+0x1e2>
     148:	01 c7       	rjmp	.+3586   	; 0xf4c <_ZN7SSD1306C1Ev+0x6e>
     14a:	b0 03       	fmuls	r19, r16
     14c:	80 19       	sub	r24, r0
     14e:	c3 80       	ldd	r12, Z+3	; 0x03
     150:	00 ce       	rjmp	.-1024   	; 0xfffffd52 <__eeprom_end+0xff7efd52>
     152:	30 07       	cpc	r19, r16
     154:	e0 1c       	adc	r14, r0
     156:	f7 00       	.word	0x00f7	; ????
     158:	00 fc       	sbrc	r0, 0
     15a:	30 0f       	add	r19, r16
     15c:	e0 1c       	adc	r14, r0
     15e:	3e 00       	.word	0x003e	; ????
     160:	00 78       	andi	r16, 0x80	; 128
     162:	30 0f       	add	r19, r16
     164:	f0 1c       	adc	r15, r0
     166:	1c 00       	.word	0x001c	; ????
     168:	00 78       	andi	r16, 0x80	; 128
     16a:	30 0f       	add	r19, r16
     16c:	f0 1c       	adc	r15, r0
     16e:	1c 00       	.word	0x001c	; ????
     170:	00 fc       	sbrc	r0, 0
     172:	30 0f       	add	r19, r16
     174:	e0 1c       	adc	r14, r0
     176:	3e 00       	.word	0x003e	; ????
     178:	00 ce       	rjmp	.-1024   	; 0xfffffd7a <__eeprom_end+0xff7efd7a>
     17a:	30 07       	cpc	r19, r16
     17c:	e0 1c       	adc	r14, r0
     17e:	f7 00       	.word	0x00f7	; ????
     180:	01 c7       	rjmp	.+3586   	; 0xf84 <_ZN7SSD1306C1Ev+0xa6>
     182:	b0 03       	fmuls	r19, r16
     184:	c0 19       	sub	r28, r0
     186:	c3 80       	ldd	r12, Z+3	; 0x03
     188:	03 81       	ldd	r16, Z+3	; 0x03
     18a:	f0 00       	.word	0x00f0	; ????
     18c:	00 1f       	adc	r16, r16
     18e:	81 c0       	rjmp	.+258    	; 0x292 <__do_clear_bss+0x6>
     190:	03 00       	.word	0x0003	; ????
     192:	f0 00       	.word	0x00f0	; ????
     194:	00 1f       	adc	r16, r16
     196:	00 c0       	rjmp	.+0      	; 0x198 <__trampolines_end+0x130>
     198:	06 00       	.word	0x0006	; ????
     19a:	78 00       	.word	0x0078	; ????
     19c:	00 1e       	adc	r0, r16
     19e:	00 e0       	ldi	r16, 0x00	; 0
     1a0:	06 00       	.word	0x0006	; ????
     1a2:	3c 00       	.word	0x003c	; ????
     1a4:	00 38       	cpi	r16, 0x80	; 128
     1a6:	00 60       	ori	r16, 0x00	; 0
     1a8:	0c 00       	.word	0x000c	; ????
     1aa:	1f 00       	.word	0x001f	; ????
     1ac:	00 f8       	bld	r0, 0
     1ae:	00 30       	cpi	r16, 0x00	; 0
     1b0:	0c 00       	.word	0x000c	; ????
     1b2:	1f 80       	ldd	r1, Y+7	; 0x07
     1b4:	01 f8       	bld	r0, 1
     1b6:	00 30       	cpi	r16, 0x00	; 0
     1b8:	1c 00       	.word	0x001c	; ????
     1ba:	19 e0       	ldi	r17, 0x09	; 9
     1bc:	07 98       	cbi	0x00, 7	; 0
     1be:	00 30       	cpi	r16, 0x00	; 0
     1c0:	18 00       	.word	0x0018	; ????
     1c2:	18 f8       	.word	0xf818	; ????
     1c4:	1e 18       	sub	r1, r14
     1c6:	00 38       	cpi	r16, 0x80	; 128
     1c8:	18 00       	.word	0x0018	; ????
     1ca:	18 3e       	cpi	r17, 0xE8	; 232
     1cc:	7c 30       	cpi	r23, 0x0C	; 12
     1ce:	00 18       	sub	r0, r0
     1d0:	18 00       	.word	0x0018	; ????
     1d2:	1c 0f       	add	r17, r28
     1d4:	f0 30       	cpi	r31, 0x00	; 0
     1d6:	00 38       	cpi	r16, 0x80	; 128
     1d8:	1c 00       	.word	0x001c	; ????
     1da:	0c 07       	cpc	r16, r28
     1dc:	e0 30       	cpi	r30, 0x00	; 0
     1de:	00 30       	cpi	r16, 0x00	; 0
     1e0:	0c 00       	.word	0x000c	; ????
     1e2:	0c 3f       	cpi	r16, 0xFC	; 252
     1e4:	fc 30       	cpi	r31, 0x0C	; 12
     1e6:	00 30       	cpi	r16, 0x00	; 0
     1e8:	0e 00       	.word	0x000e	; ????
     1ea:	0f f8       	.word	0xf80f	; ????
     1ec:	1f f0       	brie	.+6      	; 0x1f4 <__trampolines_end+0x18c>
     1ee:	00 60       	ori	r16, 0x00	; 0
     1f0:	07 c0       	rjmp	.+14     	; 0x200 <__trampolines_end+0x198>
     1f2:	3f c0       	rjmp	.+126    	; 0x272 <__ctors_end+0x8>
     1f4:	07 f8       	bld	r0, 7
     1f6:	03 e0       	ldi	r16, 0x03	; 3
     1f8:	01 ff       	sbrs	r16, 1
     1fa:	fe 00       	.word	0x00fe	; ????
     1fc:	00 ff       	sbrs	r16, 0
     1fe:	ff 80       	ldd	r15, Y+7	; 0x07
     200:	00 7f       	andi	r16, 0xF0	; 240
     202:	e6 00       	.word	0x00e6	; ????
     204:	00 67       	ori	r16, 0x70	; 112
     206:	fe 00       	.word	0x00fe	; ????
     208:	00 00       	nop
     20a:	06 00       	.word	0x0006	; ????
     20c:	00 c0       	rjmp	.+0      	; 0x20e <__trampolines_end+0x1a6>
     20e:	00 00       	nop
     210:	00 00       	nop
     212:	03 00       	.word	0x0003	; ????
     214:	00 c0       	rjmp	.+0      	; 0x216 <__trampolines_end+0x1ae>
     216:	00 00       	nop
     218:	00 00       	nop
     21a:	03 00       	.word	0x0003	; ????
     21c:	01 c0       	rjmp	.+2      	; 0x220 <__trampolines_end+0x1b8>
     21e:	00 00       	nop
     220:	00 00       	nop
     222:	03 80       	ldd	r0, Z+3	; 0x03
     224:	01 80       	ldd	r0, Z+1	; 0x01
     226:	00 00       	nop
     228:	00 00       	nop
     22a:	01 80       	ldd	r0, Z+1	; 0x01
     22c:	03 80       	ldd	r0, Z+3	; 0x03
     22e:	00 00       	nop
     230:	00 00       	nop
     232:	01 c0       	rjmp	.+2      	; 0x236 <__trampolines_end+0x1ce>
     234:	03 00       	.word	0x0003	; ????
     236:	00 00       	nop
     238:	00 00       	nop
     23a:	00 e0       	ldi	r16, 0x00	; 0
     23c:	07 00       	.word	0x0007	; ????
     23e:	00 00       	nop
     240:	00 00       	nop
     242:	00 60       	ori	r16, 0x00	; 0
     244:	0e 00       	.word	0x000e	; ????
     246:	00 00       	nop
     248:	00 00       	nop
     24a:	00 30       	cpi	r16, 0x00	; 0
     24c:	1c 00       	.word	0x001c	; ????
     24e:	00 00       	nop
     250:	00 00       	nop
     252:	00 3c       	cpi	r16, 0xC0	; 192
     254:	38 00       	.word	0x0038	; ????
     256:	00 00       	nop
     258:	00 00       	nop
     25a:	00 0f       	add	r16, r16
     25c:	f0 00       	.word	0x00f0	; ????
     25e:	00 00       	nop
     260:	00 00       	nop
     262:	00 07       	cpc	r16, r16
     264:	c0 00       	.word	0x00c0	; ????
	...

00000268 <__ctors_start>:
     268:	54 07       	cpc	r21, r20

0000026a <__ctors_end>:
     26a:	11 24       	eor	r1, r1
     26c:	1f be       	out	0x3f, r1	; 63
     26e:	cf ef       	ldi	r28, 0xFF	; 255
     270:	d8 e0       	ldi	r29, 0x08	; 8
     272:	de bf       	out	0x3e, r29	; 62
     274:	cd bf       	out	0x3d, r28	; 61

00000276 <__do_copy_data>:
     276:	11 e0       	ldi	r17, 0x01	; 1
     278:	a0 e0       	ldi	r26, 0x00	; 0
     27a:	b1 e0       	ldi	r27, 0x01	; 1
     27c:	e4 e1       	ldi	r30, 0x14	; 20
     27e:	f2 e1       	ldi	r31, 0x12	; 18
     280:	02 c0       	rjmp	.+4      	; 0x286 <__do_copy_data+0x10>
     282:	05 90       	lpm	r0, Z+
     284:	0d 92       	st	X+, r0
     286:	a6 38       	cpi	r26, 0x86	; 134
     288:	b1 07       	cpc	r27, r17
     28a:	d9 f7       	brne	.-10     	; 0x282 <__do_copy_data+0xc>

0000028c <__do_clear_bss>:
     28c:	25 e0       	ldi	r18, 0x05	; 5
     28e:	a6 e8       	ldi	r26, 0x86	; 134
     290:	b1 e0       	ldi	r27, 0x01	; 1
     292:	01 c0       	rjmp	.+2      	; 0x296 <.do_clear_bss_start>

00000294 <.do_clear_bss_loop>:
     294:	1d 92       	st	X+, r1

00000296 <.do_clear_bss_start>:
     296:	ad 38       	cpi	r26, 0x8D	; 141
     298:	b2 07       	cpc	r27, r18
     29a:	e1 f7       	brne	.-8      	; 0x294 <.do_clear_bss_loop>

0000029c <__do_global_ctors>:
     29c:	11 e0       	ldi	r17, 0x01	; 1
     29e:	c5 e3       	ldi	r28, 0x35	; 53
     2a0:	d1 e0       	ldi	r29, 0x01	; 1
     2a2:	04 c0       	rjmp	.+8      	; 0x2ac <__do_global_ctors+0x10>
     2a4:	21 97       	sbiw	r28, 0x01	; 1
     2a6:	fe 01       	movw	r30, r28
     2a8:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__tablejump2__>
     2ac:	c4 33       	cpi	r28, 0x34	; 52
     2ae:	d1 07       	cpc	r29, r17
     2b0:	c9 f7       	brne	.-14     	; 0x2a4 <__do_global_ctors+0x8>
     2b2:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <main>
     2b6:	0c 94 08 09 	jmp	0x1210	; 0x1210 <_exit>

000002ba <__bad_interrupt>:
     2ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002be <_ZN11Framebuffer9drawPixelEhhh>:
    }
}
#endif

void Framebuffer::drawPixel(uint8_t pos_x, uint8_t pos_y, uint8_t pixel_status) {
    if (pos_x >= SSD1306_WIDTH || pos_y >= SSD1306_HEIGHT) {
     2be:	66 23       	and	r22, r22
     2c0:	ac f1       	brlt	.+106    	; 0x32c <_ZN11Framebuffer9drawPixelEhhh+0x6e>
     2c2:	40 34       	cpi	r20, 0x40	; 64
     2c4:	98 f5       	brcc	.+102    	; 0x32c <_ZN11Framebuffer9drawPixelEhhh+0x6e>
        return;
    }

    if (pixel_status) {
     2c6:	22 23       	and	r18, r18
     2c8:	c9 f0       	breq	.+50     	; 0x2fc <_ZN11Framebuffer9drawPixelEhhh+0x3e>
        this->buffer[pos_x+(pos_y/8)*SSD1306_WIDTH] |= (1 << (pos_y&7));
     2ca:	24 2f       	mov	r18, r20
     2cc:	26 95       	lsr	r18
     2ce:	26 95       	lsr	r18
     2d0:	26 95       	lsr	r18
     2d2:	50 e8       	ldi	r21, 0x80	; 128
     2d4:	25 9f       	mul	r18, r21
     2d6:	90 01       	movw	r18, r0
     2d8:	11 24       	eor	r1, r1
     2da:	26 0f       	add	r18, r22
     2dc:	31 1d       	adc	r19, r1
     2de:	fc 01       	movw	r30, r24
     2e0:	e2 0f       	add	r30, r18
     2e2:	f3 1f       	adc	r31, r19
     2e4:	47 70       	andi	r20, 0x07	; 7
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <_ZN11Framebuffer9drawPixelEhhh+0x32>
     2ec:	88 0f       	add	r24, r24
     2ee:	99 1f       	adc	r25, r25
     2f0:	4a 95       	dec	r20
     2f2:	e2 f7       	brpl	.-8      	; 0x2ec <_ZN11Framebuffer9drawPixelEhhh+0x2e>
     2f4:	90 81       	ld	r25, Z
     2f6:	89 2b       	or	r24, r25
     2f8:	80 83       	st	Z, r24
     2fa:	08 95       	ret
    } else {
        this->buffer[pos_x+(pos_y/8)*SSD1306_WIDTH] &= ~(1 << (pos_y&7));
     2fc:	24 2f       	mov	r18, r20
     2fe:	26 95       	lsr	r18
     300:	26 95       	lsr	r18
     302:	26 95       	lsr	r18
     304:	30 e8       	ldi	r19, 0x80	; 128
     306:	23 9f       	mul	r18, r19
     308:	f0 01       	movw	r30, r0
     30a:	11 24       	eor	r1, r1
     30c:	e6 0f       	add	r30, r22
     30e:	f1 1d       	adc	r31, r1
     310:	e8 0f       	add	r30, r24
     312:	f9 1f       	adc	r31, r25
     314:	47 70       	andi	r20, 0x07	; 7
     316:	81 e0       	ldi	r24, 0x01	; 1
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	02 c0       	rjmp	.+4      	; 0x320 <_ZN11Framebuffer9drawPixelEhhh+0x62>
     31c:	88 0f       	add	r24, r24
     31e:	99 1f       	adc	r25, r25
     320:	4a 95       	dec	r20
     322:	e2 f7       	brpl	.-8      	; 0x31c <_ZN11Framebuffer9drawPixelEhhh+0x5e>
     324:	80 95       	com	r24
     326:	90 81       	ld	r25, Z
     328:	89 23       	and	r24, r25
     32a:	80 83       	st	Z, r24
     32c:	08 95       	ret

0000032e <_ZN11Framebuffer10drawBitmapEPKhhhhh>:
Framebuffer::Framebuffer() {
    this->clear();
}

#ifndef SIMULATOR
void Framebuffer::drawBitmap(const uint8_t *progmem_bitmap, uint8_t height, uint8_t width, uint8_t pos_x, uint8_t pos_y) {
     32e:	2f 92       	push	r2
     330:	3f 92       	push	r3
     332:	4f 92       	push	r4
     334:	5f 92       	push	r5
     336:	6f 92       	push	r6
     338:	7f 92       	push	r7
     33a:	8f 92       	push	r8
     33c:	9f 92       	push	r9
     33e:	af 92       	push	r10
     340:	bf 92       	push	r11
     342:	cf 92       	push	r12
     344:	df 92       	push	r13
     346:	ef 92       	push	r14
     348:	ff 92       	push	r15
     34a:	0f 93       	push	r16
     34c:	1f 93       	push	r17
     34e:	cf 93       	push	r28
     350:	df 93       	push	r29
     352:	00 d0       	rcall	.+0      	; 0x354 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0x26>
     354:	1f 92       	push	r1
     356:	cd b7       	in	r28, 0x3d	; 61
     358:	de b7       	in	r29, 0x3e	; 62
    uint8_t current_byte;
    uint8_t byte_width = (width + 7)/8;
     35a:	e2 2f       	mov	r30, r18
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	37 96       	adiw	r30, 0x07	; 7
     360:	3f 01       	movw	r6, r30
     362:	1a f4       	brpl	.+6      	; 0x36a <_ZN11Framebuffer10drawBitmapEPKhhhhh+0x3c>
     364:	37 e0       	ldi	r19, 0x07	; 7
     366:	63 0e       	add	r6, r19
     368:	71 1c       	adc	r7, r1
     36a:	75 94       	asr	r7
     36c:	67 94       	ror	r6
     36e:	75 94       	asr	r7
     370:	67 94       	ror	r6
     372:	75 94       	asr	r7
     374:	67 94       	ror	r6

    for (uint8_t current_y = 0; current_y < height; current_y++) {
     376:	44 23       	and	r20, r20
     378:	09 f4       	brne	.+2      	; 0x37c <_ZN11Framebuffer10drawBitmapEPKhhhhh+0x4e>
     37a:	4b c0       	rjmp	.+150    	; 0x412 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0xe4>
     37c:	42 2e       	mov	r4, r18
     37e:	5b 01       	movw	r10, r22
     380:	6c 01       	movw	r12, r24
     382:	24 2e       	mov	r2, r20
     384:	2e 0c       	add	r2, r14
     386:	81 2c       	mov	r8, r1
     388:	91 2c       	mov	r9, r1
        for (uint8_t current_x = 0; current_x < width; current_x++) {
            current_byte = pgm_read_byte(progmem_bitmap + current_y*byte_width + current_x/8);
     38a:	77 24       	eor	r7, r7
     38c:	09 83       	std	Y+1, r16	; 0x01
     38e:	31 2c       	mov	r3, r1
            if (current_byte & (128 >> (current_x&7))) {
     390:	00 e8       	ldi	r16, 0x80	; 128
     392:	10 e0       	ldi	r17, 0x00	; 0
     394:	30 c0       	rjmp	.+96     	; 0x3f6 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0xc8>
    uint8_t current_byte;
    uint8_t byte_width = (width + 7)/8;

    for (uint8_t current_y = 0; current_y < height; current_y++) {
        for (uint8_t current_x = 0; current_x < width; current_x++) {
            current_byte = pgm_read_byte(progmem_bitmap + current_y*byte_width + current_x/8);
     396:	8f 2d       	mov	r24, r15
     398:	86 95       	lsr	r24
     39a:	86 95       	lsr	r24
     39c:	86 95       	lsr	r24
     39e:	ea 81       	ldd	r30, Y+2	; 0x02
     3a0:	fb 81       	ldd	r31, Y+3	; 0x03
     3a2:	e8 0f       	add	r30, r24
     3a4:	f1 1d       	adc	r31, r1
     3a6:	ea 0d       	add	r30, r10
     3a8:	fb 1d       	adc	r31, r11
     3aa:	84 91       	lpm	r24, Z
            if (current_byte & (128 >> (current_x&7))) {
     3ac:	9f 2d       	mov	r25, r15
     3ae:	97 70       	andi	r25, 0x07	; 7
     3b0:	98 01       	movw	r18, r16
     3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0x8a>
     3b4:	35 95       	asr	r19
     3b6:	27 95       	ror	r18
     3b8:	9a 95       	dec	r25
     3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0x86>
     3bc:	e8 2f       	mov	r30, r24
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	e2 23       	and	r30, r18
     3c2:	f3 23       	and	r31, r19
     3c4:	ef 2b       	or	r30, r31
     3c6:	39 f0       	breq	.+14     	; 0x3d6 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0xa8>
                this->drawPixel(current_x+pos_x,current_y+pos_y,1);
     3c8:	21 e0       	ldi	r18, 0x01	; 1
     3ca:	4e 2d       	mov	r20, r14
     3cc:	65 2d       	mov	r22, r5
     3ce:	c6 01       	movw	r24, r12
     3d0:	0e 94 5f 01 	call	0x2be	; 0x2be <_ZN11Framebuffer9drawPixelEhhh>
     3d4:	06 c0       	rjmp	.+12     	; 0x3e2 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0xb4>
            } else {
                this->drawPixel(current_x+pos_x,current_y+pos_y,0);
     3d6:	23 2d       	mov	r18, r3
     3d8:	4e 2d       	mov	r20, r14
     3da:	65 2d       	mov	r22, r5
     3dc:	c6 01       	movw	r24, r12
     3de:	0e 94 5f 01 	call	0x2be	; 0x2be <_ZN11Framebuffer9drawPixelEhhh>
void Framebuffer::drawBitmap(const uint8_t *progmem_bitmap, uint8_t height, uint8_t width, uint8_t pos_x, uint8_t pos_y) {
    uint8_t current_byte;
    uint8_t byte_width = (width + 7)/8;

    for (uint8_t current_y = 0; current_y < height; current_y++) {
        for (uint8_t current_x = 0; current_x < width; current_x++) {
     3e2:	f3 94       	inc	r15
     3e4:	53 94       	inc	r5
     3e6:	f4 10       	cpse	r15, r4
     3e8:	d6 cf       	rjmp	.-84     	; 0x396 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0x68>
     3ea:	8f ef       	ldi	r24, 0xFF	; 255
     3ec:	88 1a       	sub	r8, r24
     3ee:	98 0a       	sbc	r9, r24
     3f0:	e3 94       	inc	r14
#ifndef SIMULATOR
void Framebuffer::drawBitmap(const uint8_t *progmem_bitmap, uint8_t height, uint8_t width, uint8_t pos_x, uint8_t pos_y) {
    uint8_t current_byte;
    uint8_t byte_width = (width + 7)/8;

    for (uint8_t current_y = 0; current_y < height; current_y++) {
     3f2:	e2 14       	cp	r14, r2
     3f4:	71 f0       	breq	.+28     	; 0x412 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0xe4>
        for (uint8_t current_x = 0; current_x < width; current_x++) {
     3f6:	44 20       	and	r4, r4
     3f8:	c1 f3       	breq	.-16     	; 0x3ea <_ZN11Framebuffer10drawBitmapEPKhhhhh+0xbc>
            current_byte = pgm_read_byte(progmem_bitmap + current_y*byte_width + current_x/8);
     3fa:	86 9c       	mul	r8, r6
     3fc:	f0 01       	movw	r30, r0
     3fe:	87 9c       	mul	r8, r7
     400:	f0 0d       	add	r31, r0
     402:	96 9c       	mul	r9, r6
     404:	f0 0d       	add	r31, r0
     406:	11 24       	eor	r1, r1
     408:	fb 83       	std	Y+3, r31	; 0x03
     40a:	ea 83       	std	Y+2, r30	; 0x02
     40c:	59 80       	ldd	r5, Y+1	; 0x01
     40e:	f3 2c       	mov	r15, r3
     410:	c2 cf       	rjmp	.-124    	; 0x396 <_ZN11Framebuffer10drawBitmapEPKhhhhh+0x68>
            } else {
                this->drawPixel(current_x+pos_x,current_y+pos_y,0);
            }
        }
    }
}
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	1f 91       	pop	r17
     41e:	0f 91       	pop	r16
     420:	ff 90       	pop	r15
     422:	ef 90       	pop	r14
     424:	df 90       	pop	r13
     426:	cf 90       	pop	r12
     428:	bf 90       	pop	r11
     42a:	af 90       	pop	r10
     42c:	9f 90       	pop	r9
     42e:	8f 90       	pop	r8
     430:	7f 90       	pop	r7
     432:	6f 90       	pop	r6
     434:	5f 90       	pop	r5
     436:	4f 90       	pop	r4
     438:	3f 90       	pop	r3
     43a:	2f 90       	pop	r2
     43c:	08 95       	ret

0000043e <_ZN11Framebuffer9drawPixelEhh>:
        this->buffer[pos_x+(pos_y/8)*SSD1306_WIDTH] &= ~(1 << (pos_y&7));
    }
}

void Framebuffer::drawPixel(uint8_t pos_x, uint8_t pos_y) {
    if (pos_x >= SSD1306_WIDTH || pos_y >= SSD1306_HEIGHT) {
     43e:	66 23       	and	r22, r22
     440:	cc f0       	brlt	.+50     	; 0x474 <_ZN11Framebuffer9drawPixelEhh+0x36>
     442:	40 34       	cpi	r20, 0x40	; 64
     444:	b8 f4       	brcc	.+46     	; 0x474 <_ZN11Framebuffer9drawPixelEhh+0x36>
        return;
    }

    this->buffer[pos_x+(pos_y/8)*SSD1306_WIDTH] |= (1 << (pos_y&7));
     446:	24 2f       	mov	r18, r20
     448:	26 95       	lsr	r18
     44a:	26 95       	lsr	r18
     44c:	26 95       	lsr	r18
     44e:	30 e8       	ldi	r19, 0x80	; 128
     450:	23 9f       	mul	r18, r19
     452:	f0 01       	movw	r30, r0
     454:	11 24       	eor	r1, r1
     456:	e6 0f       	add	r30, r22
     458:	f1 1d       	adc	r31, r1
     45a:	e8 0f       	add	r30, r24
     45c:	f9 1f       	adc	r31, r25
     45e:	47 70       	andi	r20, 0x07	; 7
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	02 c0       	rjmp	.+4      	; 0x46a <_ZN11Framebuffer9drawPixelEhh+0x2c>
     466:	88 0f       	add	r24, r24
     468:	99 1f       	adc	r25, r25
     46a:	4a 95       	dec	r20
     46c:	e2 f7       	brpl	.-8      	; 0x466 <_ZN11Framebuffer9drawPixelEhh+0x28>
     46e:	90 81       	ld	r25, Z
     470:	89 2b       	or	r24, r25
     472:	80 83       	st	Z, r24
     474:	08 95       	ret

00000476 <_ZN11Framebuffer9drawVLineEhhh>:
}

void Framebuffer::drawVLine(uint8_t x, uint8_t y, uint8_t length) {
     476:	ff 92       	push	r15
     478:	0f 93       	push	r16
     47a:	1f 93       	push	r17
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
    for (uint8_t i = 0; i < length; ++i) {
     480:	22 23       	and	r18, r18
     482:	69 f0       	breq	.+26     	; 0x49e <_ZN11Framebuffer9drawVLineEhhh+0x28>
     484:	c4 2f       	mov	r28, r20
     486:	f6 2e       	mov	r15, r22
     488:	8c 01       	movw	r16, r24
     48a:	d2 2f       	mov	r29, r18
     48c:	d4 0f       	add	r29, r20
        this->drawPixel(x,i+y);
     48e:	4c 2f       	mov	r20, r28
     490:	6f 2d       	mov	r22, r15
     492:	c8 01       	movw	r24, r16
     494:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN11Framebuffer9drawPixelEhh>
     498:	cf 5f       	subi	r28, 0xFF	; 255

    this->buffer[pos_x+(pos_y/8)*SSD1306_WIDTH] |= (1 << (pos_y&7));
}

void Framebuffer::drawVLine(uint8_t x, uint8_t y, uint8_t length) {
    for (uint8_t i = 0; i < length; ++i) {
     49a:	cd 13       	cpse	r28, r29
     49c:	f8 cf       	rjmp	.-16     	; 0x48e <_ZN11Framebuffer9drawVLineEhhh+0x18>
        this->drawPixel(x,i+y);
    }
}
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	ff 90       	pop	r15
     4a8:	08 95       	ret

000004aa <_ZN11Framebuffer9drawHLineEhhh>:

void Framebuffer::drawHLine(uint8_t x, uint8_t y, uint8_t length) {
     4aa:	ff 92       	push	r15
     4ac:	0f 93       	push	r16
     4ae:	1f 93       	push	r17
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
    for (uint8_t i = 0; i < length; ++i) {
     4b4:	22 23       	and	r18, r18
     4b6:	69 f0       	breq	.+26     	; 0x4d2 <_ZN11Framebuffer9drawHLineEhhh+0x28>
     4b8:	f4 2e       	mov	r15, r20
     4ba:	c6 2f       	mov	r28, r22
     4bc:	8c 01       	movw	r16, r24
     4be:	d2 2f       	mov	r29, r18
     4c0:	d6 0f       	add	r29, r22
        this->drawPixel(i+x,y);
     4c2:	4f 2d       	mov	r20, r15
     4c4:	6c 2f       	mov	r22, r28
     4c6:	c8 01       	movw	r24, r16
     4c8:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN11Framebuffer9drawPixelEhh>
     4cc:	cf 5f       	subi	r28, 0xFF	; 255
        this->drawPixel(x,i+y);
    }
}

void Framebuffer::drawHLine(uint8_t x, uint8_t y, uint8_t length) {
    for (uint8_t i = 0; i < length; ++i) {
     4ce:	cd 13       	cpse	r28, r29
     4d0:	f8 cf       	rjmp	.-16     	; 0x4c2 <_ZN11Framebuffer9drawHLineEhhh+0x18>
        this->drawPixel(i+x,y);
    }
}
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	1f 91       	pop	r17
     4d8:	0f 91       	pop	r16
     4da:	ff 90       	pop	r15
     4dc:	08 95       	ret

000004de <_ZN11Framebuffer13drawRectangleEhhhh>:

void Framebuffer::drawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
     4de:	cf 92       	push	r12
     4e0:	df 92       	push	r13
     4e2:	ef 92       	push	r14
     4e4:	ff 92       	push	r15
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	ec 01       	movw	r28, r24
     4f0:	f6 2e       	mov	r15, r22
     4f2:	14 2f       	mov	r17, r20
     4f4:	d2 2e       	mov	r13, r18
    uint8_t length = x2 - x1 + 1;
     4f6:	e2 2e       	mov	r14, r18
     4f8:	e6 1a       	sub	r14, r22
     4fa:	e3 94       	inc	r14
    uint8_t height = y2 - y1;
     4fc:	c0 2e       	mov	r12, r16
     4fe:	c4 1a       	sub	r12, r20

    this->drawHLine(x1,y1,length);
     500:	2e 2d       	mov	r18, r14
     502:	0e 94 55 02 	call	0x4aa	; 0x4aa <_ZN11Framebuffer9drawHLineEhhh>
    this->drawHLine(x1,y2,length);
     506:	2e 2d       	mov	r18, r14
     508:	40 2f       	mov	r20, r16
     50a:	6f 2d       	mov	r22, r15
     50c:	ce 01       	movw	r24, r28
     50e:	0e 94 55 02 	call	0x4aa	; 0x4aa <_ZN11Framebuffer9drawHLineEhhh>
    this->drawVLine(x1,y1,height);
     512:	2c 2d       	mov	r18, r12
     514:	41 2f       	mov	r20, r17
     516:	6f 2d       	mov	r22, r15
     518:	ce 01       	movw	r24, r28
     51a:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN11Framebuffer9drawVLineEhhh>
    this->drawVLine(x2,y1,height);
     51e:	2c 2d       	mov	r18, r12
     520:	41 2f       	mov	r20, r17
     522:	6d 2d       	mov	r22, r13
     524:	ce 01       	movw	r24, r28
     526:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN11Framebuffer9drawVLineEhhh>
}
     52a:	df 91       	pop	r29
     52c:	cf 91       	pop	r28
     52e:	1f 91       	pop	r17
     530:	0f 91       	pop	r16
     532:	ff 90       	pop	r15
     534:	ef 90       	pop	r14
     536:	df 90       	pop	r13
     538:	cf 90       	pop	r12
     53a:	08 95       	ret

0000053c <_ZN11Framebuffer13drawRectangleEhhhhh>:

void Framebuffer::drawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint8_t fill) {
     53c:	5f 92       	push	r5
     53e:	6f 92       	push	r6
     540:	7f 92       	push	r7
     542:	8f 92       	push	r8
     544:	9f 92       	push	r9
     546:	af 92       	push	r10
     548:	bf 92       	push	r11
     54a:	cf 92       	push	r12
     54c:	df 92       	push	r13
     54e:	ef 92       	push	r14
     550:	ff 92       	push	r15
     552:	0f 93       	push	r16
     554:	1f 93       	push	r17
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	6c 01       	movw	r12, r24
     55c:	76 2e       	mov	r7, r22
     55e:	84 2e       	mov	r8, r20
    if (!fill) {
     560:	e1 10       	cpse	r14, r1
     562:	03 c0       	rjmp	.+6      	; 0x56a <_ZN11Framebuffer13drawRectangleEhhhhh+0x2e>
        this->drawRectangle(x1,y1,x2,y2);
     564:	0e 94 6f 02 	call	0x4de	; 0x4de <_ZN11Framebuffer13drawRectangleEhhhh>
     568:	24 c0       	rjmp	.+72     	; 0x5b2 <_ZN11Framebuffer13drawRectangleEhhhhh+0x76>
    } else {
        uint8_t length = x2 - x1 + 1;
        uint8_t height = y2 - y1;
     56a:	04 1b       	sub	r16, r20
     56c:	2f 5f       	subi	r18, 0xFF	; 255

void Framebuffer::drawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, uint8_t fill) {
    if (!fill) {
        this->drawRectangle(x1,y1,x2,y2);
    } else {
        uint8_t length = x2 - x1 + 1;
     56e:	26 1b       	sub	r18, r22
        uint8_t height = y2 - y1;

        for (int x = 0; x < length; ++x) {
     570:	a2 2e       	mov	r10, r18
     572:	b1 2c       	mov	r11, r1
     574:	1a 14       	cp	r1, r10
     576:	1b 04       	cpc	r1, r11
     578:	94 f0       	brlt	.+36     	; 0x59e <_ZN11Framebuffer13drawRectangleEhhhhh+0x62>
     57a:	1b c0       	rjmp	.+54     	; 0x5b2 <_ZN11Framebuffer13drawRectangleEhhhhh+0x76>
     57c:	4c 2f       	mov	r20, r28
     57e:	48 0d       	add	r20, r8
            for (int y = 0; y <= height; ++y) {
                this->drawPixel(x1+x,y+y1);
     580:	69 2d       	mov	r22, r9
     582:	c6 01       	movw	r24, r12
     584:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN11Framebuffer9drawPixelEhh>
    } else {
        uint8_t length = x2 - x1 + 1;
        uint8_t height = y2 - y1;

        for (int x = 0; x < length; ++x) {
            for (int y = 0; y <= height; ++y) {
     588:	21 96       	adiw	r28, 0x01	; 1
     58a:	0c 17       	cp	r16, r28
     58c:	1d 07       	cpc	r17, r29
     58e:	b4 f7       	brge	.-20     	; 0x57c <_ZN11Framebuffer13drawRectangleEhhhhh+0x40>
        this->drawRectangle(x1,y1,x2,y2);
    } else {
        uint8_t length = x2 - x1 + 1;
        uint8_t height = y2 - y1;

        for (int x = 0; x < length; ++x) {
     590:	8f ef       	ldi	r24, 0xFF	; 255
     592:	e8 1a       	sub	r14, r24
     594:	f8 0a       	sbc	r15, r24
     596:	ea 14       	cp	r14, r10
     598:	fb 04       	cpc	r15, r11
     59a:	31 f4       	brne	.+12     	; 0x5a8 <_ZN11Framebuffer13drawRectangleEhhhhh+0x6c>
     59c:	0a c0       	rjmp	.+20     	; 0x5b2 <_ZN11Framebuffer13drawRectangleEhhhhh+0x76>
     59e:	e1 2c       	mov	r14, r1
     5a0:	f1 2c       	mov	r15, r1
            for (int y = 0; y <= height; ++y) {
     5a2:	10 e0       	ldi	r17, 0x00	; 0
     5a4:	51 2c       	mov	r5, r1
     5a6:	61 2c       	mov	r6, r1
     5a8:	c5 2d       	mov	r28, r5
     5aa:	d6 2d       	mov	r29, r6
     5ac:	97 2c       	mov	r9, r7
     5ae:	9e 0c       	add	r9, r14
     5b0:	e5 cf       	rjmp	.-54     	; 0x57c <_ZN11Framebuffer13drawRectangleEhhhhh+0x40>
                this->drawPixel(x1+x,y+y1);
            }
        }
    }
}
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	1f 91       	pop	r17
     5b8:	0f 91       	pop	r16
     5ba:	ff 90       	pop	r15
     5bc:	ef 90       	pop	r14
     5be:	df 90       	pop	r13
     5c0:	cf 90       	pop	r12
     5c2:	bf 90       	pop	r11
     5c4:	af 90       	pop	r10
     5c6:	9f 90       	pop	r9
     5c8:	8f 90       	pop	r8
     5ca:	7f 90       	pop	r7
     5cc:	6f 90       	pop	r6
     5ce:	5f 90       	pop	r5
     5d0:	08 95       	ret

000005d2 <_ZN11Framebuffer5clearEv>:

void Framebuffer::clear() {
     5d2:	fc 01       	movw	r30, r24
     5d4:	9c 5f       	subi	r25, 0xFC	; 252
    for (uint16_t buffer_location = 0; buffer_location < SSD1306_BUFFERSIZE; buffer_location++) {
        this->buffer[buffer_location] = 0x00;
     5d6:	11 92       	st	Z+, r1
        }
    }
}

void Framebuffer::clear() {
    for (uint16_t buffer_location = 0; buffer_location < SSD1306_BUFFERSIZE; buffer_location++) {
     5d8:	e8 17       	cp	r30, r24
     5da:	f9 07       	cpc	r31, r25
     5dc:	e1 f7       	brne	.-8      	; 0x5d6 <_ZN11Framebuffer5clearEv+0x4>
        this->buffer[buffer_location] = 0x00;
    }
}
     5de:	08 95       	ret

000005e0 <_ZN11FramebufferC1Ev>:
For more information, please refer to <http://unlicense.org/>
*/

#include "Framebuffer.h"

Framebuffer::Framebuffer() {
     5e0:	cf 93       	push	r28
     5e2:	df 93       	push	r29
     5e4:	ec 01       	movw	r28, r24
     5e6:	9c 5f       	subi	r25, 0xFC	; 252
     5e8:	0e 94 6f 07 	call	0xede	; 0xede <_ZN7SSD1306C1Ev>
    this->clear();
     5ec:	ce 01       	movw	r24, r28
     5ee:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN11Framebuffer5clearEv>
}
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	08 95       	ret

000005f8 <_ZN11Framebuffer4showEv>:
void Framebuffer::invert(uint8_t status) {
    this->oled.invert(status);
}

void Framebuffer::show() {
    this->oled.sendFramebuffer(this->buffer);
     5f8:	bc 01       	movw	r22, r24
     5fa:	9c 5f       	subi	r25, 0xFC	; 252
     5fc:	0e 94 df 07 	call	0xfbe	; 0xfbe <_ZN7SSD130615sendFramebufferEPh>
     600:	08 95       	ret

00000602 <_ZN3I2CC1Ev>:
*/

#include "I2C.h"
#define F_CPU 8000000UL

I2C::I2C() {}
     602:	08 95       	ret

00000604 <_ZN3I2C4initEh>:

void I2C::init(uint8_t address) {
    this->address = address;
     604:	fc 01       	movw	r30, r24
     606:	60 83       	st	Z, r22
    TWSR = 0;
     608:	10 92 b9 00 	sts	0x00B9, r1
    TWBR = ((F_CPU/SCL_CLOCK)-16)/2;
     60c:	80 e2       	ldi	r24, 0x20	; 32
     60e:	80 93 b8 00 	sts	0x00B8, r24
     612:	08 95       	ret

00000614 <_ZN3I2C5startEv>:
}

uint8_t I2C::start() {
     614:	dc 01       	movw	r26, r24
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     616:	84 ea       	ldi	r24, 0xA4	; 164
     618:	80 93 bc 00 	sts	0x00BC, r24
    while(!(TWCR & (1<<TWINT)));
     61c:	ec eb       	ldi	r30, 0xBC	; 188
     61e:	f0 e0       	ldi	r31, 0x00	; 0
     620:	90 81       	ld	r25, Z
     622:	99 23       	and	r25, r25
     624:	ec f7       	brge	.-6      	; 0x620 <_ZN3I2C5startEv+0xc>

    twi_status_register = TW_STATUS & 0xF8;
     626:	90 91 b9 00 	lds	r25, 0x00B9
     62a:	98 7f       	andi	r25, 0xF8	; 248
     62c:	11 96       	adiw	r26, 0x01	; 1
     62e:	9c 93       	st	X, r25
     630:	11 97       	sbiw	r26, 0x01	; 1
    if ((this->twi_status_register != TW_START) && (this->twi_status_register != TW_REP_START)) {
     632:	98 30       	cpi	r25, 0x08	; 8
     634:	11 f0       	breq	.+4      	; 0x63a <_ZN3I2C5startEv+0x26>
     636:	90 31       	cpi	r25, 0x10	; 16
     638:	b9 f4       	brne	.+46     	; 0x668 <_ZN3I2C5startEv+0x54>
        return 1;
    }

    TWDR = address;
     63a:	8c 91       	ld	r24, X
     63c:	80 93 bb 00 	sts	0x00BB, r24
    TWCR = (1<<TWINT) | (1<<TWEN);
     640:	84 e8       	ldi	r24, 0x84	; 132
     642:	80 93 bc 00 	sts	0x00BC, r24

    while(!(TWCR & (1<<TWINT)));
     646:	ec eb       	ldi	r30, 0xBC	; 188
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	90 81       	ld	r25, Z
     64c:	99 23       	and	r25, r25
     64e:	ec f7       	brge	.-6      	; 0x64a <_ZN3I2C5startEv+0x36>

    this->twi_status_register = TW_STATUS & 0xF8;
     650:	90 91 b9 00 	lds	r25, 0x00B9
     654:	98 7f       	andi	r25, 0xF8	; 248
     656:	11 96       	adiw	r26, 0x01	; 1
     658:	9c 93       	st	X, r25
    if ((this->twi_status_register != TW_MT_SLA_ACK) && (this->twi_status_register != TW_MR_SLA_ACK)) {
     65a:	98 31       	cpi	r25, 0x18	; 24
     65c:	39 f0       	breq	.+14     	; 0x66c <_ZN3I2C5startEv+0x58>
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	90 34       	cpi	r25, 0x40	; 64
     662:	29 f4       	brne	.+10     	; 0x66e <_ZN3I2C5startEv+0x5a>
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	08 95       	ret
    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    while(!(TWCR & (1<<TWINT)));

    twi_status_register = TW_STATUS & 0xF8;
    if ((this->twi_status_register != TW_START) && (this->twi_status_register != TW_REP_START)) {
        return 1;
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	08 95       	ret
    this->twi_status_register = TW_STATUS & 0xF8;
    if ((this->twi_status_register != TW_MT_SLA_ACK) && (this->twi_status_register != TW_MR_SLA_ACK)) {
        return 1;
    }

    return 0;
     66c:	80 e0       	ldi	r24, 0x00	; 0
}
     66e:	08 95       	ret

00000670 <_ZN3I2C5writeEh>:

uint8_t I2C::write(uint8_t data) {
     670:	dc 01       	movw	r26, r24
    TWDR = data;
     672:	60 93 bb 00 	sts	0x00BB, r22
    TWCR = (1<<TWINT) | (1<<TWEN);
     676:	84 e8       	ldi	r24, 0x84	; 132
     678:	80 93 bc 00 	sts	0x00BC, r24

    while(!(TWCR & (1<<TWINT)));
     67c:	ec eb       	ldi	r30, 0xBC	; 188
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	90 81       	ld	r25, Z
     682:	99 23       	and	r25, r25
     684:	ec f7       	brge	.-6      	; 0x680 <_ZN3I2C5writeEh+0x10>

    this->twi_status_register = TW_STATUS & 0xF8;
     686:	90 91 b9 00 	lds	r25, 0x00B9
     68a:	98 7f       	andi	r25, 0xF8	; 248
     68c:	11 96       	adiw	r26, 0x01	; 1
     68e:	9c 93       	st	X, r25
    if (this->twi_status_register != TW_MT_DATA_ACK) {
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	98 32       	cpi	r25, 0x28	; 40
     694:	09 f4       	brne	.+2      	; 0x698 <_ZN3I2C5writeEh+0x28>
     696:	80 e0       	ldi	r24, 0x00	; 0
        return 1;
    } else {
        return 0;
    }
}
     698:	08 95       	ret

0000069a <_ZN3I2C4stopEv>:

void I2C::stop(void) {
    TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     69a:	84 e9       	ldi	r24, 0x94	; 148
     69c:	80 93 bc 00 	sts	0x00BC, r24
    while(TWCR & (1<<TWSTO));
     6a0:	ec eb       	ldi	r30, 0xBC	; 188
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	80 81       	ld	r24, Z
     6a6:	84 fd       	sbrc	r24, 4
     6a8:	fd cf       	rjmp	.-6      	; 0x6a4 <_ZN3I2C4stopEv+0xa>
     6aa:	08 95       	ret

000006ac <__vector_11>:
	0x00, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x0E, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x38, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x0F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xC0, 0x00, 0x00, 0x00
};

ISR(TIMER1_COMPA_vect) { 
     6ac:	1f 92       	push	r1
     6ae:	0f 92       	push	r0
     6b0:	0f b6       	in	r0, 0x3f	; 63
     6b2:	0f 92       	push	r0
     6b4:	11 24       	eor	r1, r1
     6b6:	2f 93       	push	r18
     6b8:	3f 93       	push	r19
     6ba:	4f 93       	push	r20
     6bc:	5f 93       	push	r21
     6be:	8f 93       	push	r24
     6c0:	9f 93       	push	r25
     6c2:	ef 93       	push	r30
     6c4:	ff 93       	push	r31

	TC++;
     6c6:	80 91 88 01 	lds	r24, 0x0188
     6ca:	90 91 89 01 	lds	r25, 0x0189
     6ce:	01 96       	adiw	r24, 0x01	; 1
     6d0:	90 93 89 01 	sts	0x0189, r25
     6d4:	80 93 88 01 	sts	0x0188, r24
	if ((PIND & (1<<DDD3))) {
     6d8:	4b 9b       	sbis	0x09, 3	; 9
     6da:	1d c0       	rjmp	.+58     	; 0x716 <__vector_11+0x6a>
		
//		fb.buffer[(uint16_t)(TC%8)*128+(TC/8)]=0xFF;
		buffer[(uint16_t)TC/8] |= (1<<(TC%8));
     6dc:	20 91 88 01 	lds	r18, 0x0188
     6e0:	30 91 89 01 	lds	r19, 0x0189
     6e4:	e0 91 88 01 	lds	r30, 0x0188
     6e8:	f0 91 89 01 	lds	r31, 0x0189
     6ec:	f6 95       	lsr	r31
     6ee:	e7 95       	ror	r30
     6f0:	f6 95       	lsr	r31
     6f2:	e7 95       	ror	r30
     6f4:	f6 95       	lsr	r31
     6f6:	e7 95       	ror	r30
     6f8:	eb 5f       	subi	r30, 0xFB	; 251
     6fa:	fe 4f       	sbci	r31, 0xFE	; 254
     6fc:	40 81       	ld	r20, Z
     6fe:	27 70       	andi	r18, 0x07	; 7
     700:	33 27       	eor	r19, r19
     702:	81 e0       	ldi	r24, 0x01	; 1
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	02 c0       	rjmp	.+4      	; 0x70c <__vector_11+0x60>
     708:	88 0f       	add	r24, r24
     70a:	99 1f       	adc	r25, r25
     70c:	2a 95       	dec	r18
     70e:	e2 f7       	brpl	.-8      	; 0x708 <__vector_11+0x5c>
     710:	84 2b       	or	r24, r20
     712:	80 83       	st	Z, r24
     714:	20 c0       	rjmp	.+64     	; 0x756 <__vector_11+0xaa>
	
	} else {
//		fb.buffer[(uint16_t)(TC%8)*128+(TC/8)]=0x00;	
		buffer[(uint16_t)TC/8] &= ~(1<<(TC%8));
     716:	40 91 88 01 	lds	r20, 0x0188
     71a:	50 91 89 01 	lds	r21, 0x0189
     71e:	e0 91 88 01 	lds	r30, 0x0188
     722:	f0 91 89 01 	lds	r31, 0x0189
     726:	f6 95       	lsr	r31
     728:	e7 95       	ror	r30
     72a:	f6 95       	lsr	r31
     72c:	e7 95       	ror	r30
     72e:	f6 95       	lsr	r31
     730:	e7 95       	ror	r30
     732:	eb 5f       	subi	r30, 0xFB	; 251
     734:	fe 4f       	sbci	r31, 0xFE	; 254
     736:	20 81       	ld	r18, Z
     738:	47 70       	andi	r20, 0x07	; 7
     73a:	55 27       	eor	r21, r21
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	02 c0       	rjmp	.+4      	; 0x746 <__vector_11+0x9a>
     742:	88 0f       	add	r24, r24
     744:	99 1f       	adc	r25, r25
     746:	4a 95       	dec	r20
     748:	e2 f7       	brpl	.-8      	; 0x742 <__vector_11+0x96>
     74a:	80 95       	com	r24
     74c:	90 95       	com	r25
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	82 23       	and	r24, r18
     752:	93 23       	and	r25, r19
     754:	80 83       	st	Z, r24
	
	}
	if (TC>=1000) {
     756:	80 91 88 01 	lds	r24, 0x0188
     75a:	90 91 89 01 	lds	r25, 0x0189
     75e:	88 3e       	cpi	r24, 0xE8	; 232
     760:	93 40       	sbci	r25, 0x03	; 3
     762:	20 f0       	brcs	.+8      	; 0x76c <__vector_11+0xc0>
		TC=0;
     764:	10 92 89 01 	sts	0x0189, r1
     768:	10 92 88 01 	sts	0x0188, r1

	}	

	if (TC==LEdge) { 
     76c:	20 91 88 01 	lds	r18, 0x0188
     770:	30 91 89 01 	lds	r19, 0x0189
     774:	80 91 86 01 	lds	r24, 0x0186
     778:	90 91 87 01 	lds	r25, 0x0187
     77c:	28 17       	cp	r18, r24
     77e:	39 07       	cpc	r19, r25
     780:	59 f4       	brne	.+22     	; 0x798 <__vector_11+0xec>
		TICK=true;	
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	80 93 8a 01 	sts	0x018A, r24
		TC=0;
     788:	10 92 89 01 	sts	0x0189, r1
     78c:	10 92 88 01 	sts	0x0188, r1
		LEdge=0;
     790:	10 92 87 01 	sts	0x0187, r1
     794:	10 92 86 01 	sts	0x0186, r1
	}

}
     798:	ff 91       	pop	r31
     79a:	ef 91       	pop	r30
     79c:	9f 91       	pop	r25
     79e:	8f 91       	pop	r24
     7a0:	5f 91       	pop	r21
     7a2:	4f 91       	pop	r20
     7a4:	3f 91       	pop	r19
     7a6:	2f 91       	pop	r18
     7a8:	0f 90       	pop	r0
     7aa:	0f be       	out	0x3f, r0	; 63
     7ac:	0f 90       	pop	r0
     7ae:	1f 90       	pop	r1
     7b0:	18 95       	reti

000007b2 <main>:



int main(void)
{
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
     7b6:	cd b7       	in	r28, 0x3d	; 61
     7b8:	de b7       	in	r29, 0x3e	; 62
     7ba:	c9 59       	subi	r28, 0x99	; 153
     7bc:	d1 09       	sbc	r29, r1
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	de bf       	out	0x3e, r29	; 62
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	cd bf       	out	0x3d, r28	; 61
	uint16_t y=0;
	
	// Leading Edge detection variables
	uint16_t LEdgeSMin=0; // bottom of leading edge search range
	uint8_t LEdgeSRange=100; // leading edge search bin size - effectively acts as Ledge Search mode too
	uint8_t LEdgeCount[10]={0}; // count of hits in each bin for current second
     7c8:	fe 01       	movw	r30, r28
     7ca:	ed 57       	subi	r30, 0x7D	; 125
     7cc:	ff 4f       	sbci	r31, 0xFF	; 255
     7ce:	8a e0       	ldi	r24, 0x0A	; 10
     7d0:	df 01       	movw	r26, r30
     7d2:	28 2f       	mov	r18, r24
     7d4:	1d 92       	st	X+, r1
     7d6:	2a 95       	dec	r18
     7d8:	e9 f7       	brne	.-6      	; 0x7d4 <main+0x22>
	uint8_t LEdgeSum[10]={0};	// count of consecutive seconds that a bin has had a hit
     7da:	3a 97       	sbiw	r30, 0x0a	; 10
     7dc:	df 01       	movw	r26, r30
     7de:	1d 92       	st	X+, r1
     7e0:	8a 95       	dec	r24
     7e2:	e9 f7       	brne	.-6      	; 0x7de <main+0x2c>
	bool MMarkFound=false; // has the Minute Marker been found
	bool SigSecond=0; // what second are we at during the minute?
	uint8_t BitASample=0; // for counting the strikes in the BitA window 
	uint8_t BitBSample=0; // for counting the strikes in the BitB window
	uint8_t BitCSample=0; // for counting the strikes in the remainder of the first half of the second
	bool BitA[60]={false}; // BitA array (one minute's worth)
     7e4:	8c e3       	ldi	r24, 0x3C	; 60
     7e6:	fc 97       	sbiw	r30, 0x3c	; 60
     7e8:	df 01       	movw	r26, r30
     7ea:	28 2f       	mov	r18, r24
     7ec:	1d 92       	st	X+, r1
     7ee:	2a 95       	dec	r18
     7f0:	e9 f7       	brne	.-6      	; 0x7ec <main+0x3a>
	bool BitB[60]={false}; // BitB array (one minute's worth)
     7f2:	fc 97       	sbiw	r30, 0x3c	; 60
     7f4:	df 01       	movw	r26, r30
     7f6:	1d 92       	st	X+, r1
     7f8:	8a 95       	dec	r24
     7fa:	e9 f7       	brne	.-6      	; 0x7f6 <main+0x44>
	
	bool PinState=false;
	bool PrevPinState=false;
	
	// Show splash-screen
	fb.clear();
     7fc:	8b e8       	ldi	r24, 0x8B	; 139
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN11Framebuffer5clearEv>
	fb.drawBitmap(Atomic,64,64,32,0);
     804:	e1 2c       	mov	r14, r1
     806:	00 e2       	ldi	r16, 0x20	; 32
     808:	20 e4       	ldi	r18, 0x40	; 64
     80a:	40 e4       	ldi	r20, 0x40	; 64
     80c:	68 e6       	ldi	r22, 0x68	; 104
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	8b e8       	ldi	r24, 0x8B	; 139
     812:	91 e0       	ldi	r25, 0x01	; 1
     814:	0e 94 97 01 	call	0x32e	; 0x32e <_ZN11Framebuffer10drawBitmapEPKhhhhh>
	fb.show();
     818:	8b e8       	ldi	r24, 0x8B	; 139
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN11Framebuffer4showEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     820:	bf ef       	ldi	r27, 0xFF	; 255
     822:	eb e7       	ldi	r30, 0x7B	; 123
     824:	f2 e9       	ldi	r31, 0x92	; 146
     826:	b1 50       	subi	r27, 0x01	; 1
     828:	e0 40       	sbci	r30, 0x00	; 0
     82a:	f0 40       	sbci	r31, 0x00	; 0
     82c:	e1 f7       	brne	.-8      	; 0x826 <main+0x74>
     82e:	00 c0       	rjmp	.+0      	; 0x830 <main+0x7e>
     830:	00 00       	nop
	_delay_ms(3000);
	fb.clear();
     832:	8b e8       	ldi	r24, 0x8B	; 139
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN11Framebuffer5clearEv>
	fb.show();
     83a:	8b e8       	ldi	r24, 0x8B	; 139
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN11Framebuffer4showEv>


	// Enable atomic clock pulse pin for input
	DDRD &= ~(1<<DDD3);// // pin PC3
     842:	53 98       	cbi	0x0a, 3	; 10
	PORTD |= (1<<DDD3); //  pin PC3 set to pulled-up
     844:	5b 9a       	sbi	0x0b, 3	; 11
	
	
	// Initialise ticker
	TCCR1B |= (1 << WGM12); // Configure timer 1 for CTC mode
     846:	e1 e8       	ldi	r30, 0x81	; 129
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	80 81       	ld	r24, Z
     84c:	88 60       	ori	r24, 0x08	; 8
     84e:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS11); // Start timer at Fcpu/8
     850:	80 81       	ld	r24, Z
     852:	82 60       	ori	r24, 0x02	; 2
     854:	80 83       	st	Z, r24
	TIMSK1 |= (1 << OCIE1A); // Enable CTC interrupt
     856:	ef e6       	ldi	r30, 0x6F	; 111
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	80 81       	ld	r24, Z
     85c:	82 60       	ori	r24, 0x02	; 2
     85e:	80 83       	st	Z, r24
	sei(); // Enable global interrupts
     860:	78 94       	sei
	OCR1A = 1999; // Set CTC compare value to 1000Hz at 16MHz AVR clock, with a prescaler of 8
     862:	8f ec       	ldi	r24, 0xCF	; 207
     864:	97 e0       	ldi	r25, 0x07	; 7
     866:	90 93 89 00 	sts	0x0089, r25
     86a:	80 93 88 00 	sts	0x0088, r24
	uint8_t BitCSample=0; // for counting the strikes in the remainder of the first half of the second
	bool BitA[60]={false}; // BitA array (one minute's worth)
	bool BitB[60]={false}; // BitB array (one minute's worth)
	bool BitC=false; // BitC - just for the current second as it has no use other than for the minute marker
	
	bool PinState=false;
     86e:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t BitASample=0; // for counting the strikes in the BitA window 
	uint8_t BitBSample=0; // for counting the strikes in the BitB window
	uint8_t BitCSample=0; // for counting the strikes in the remainder of the first half of the second
	bool BitA[60]={false}; // BitA array (one minute's worth)
	bool BitB[60]={false}; // BitB array (one minute's worth)
	bool BitC=false; // BitC - just for the current second as it has no use other than for the minute marker
     870:	c7 56       	subi	r28, 0x67	; 103
     872:	df 4f       	sbci	r29, 0xFF	; 255
     874:	18 82       	st	Y, r1
     876:	c9 59       	subi	r28, 0x99	; 153
     878:	d0 40       	sbci	r29, 0x00	; 0
	// Leading Edge adjustment variables
	bool LEdgeDetect= false;
	
	// Time decoding variables
	bool MMarkFound=false; // has the Minute Marker been found
	bool SigSecond=0; // what second are we at during the minute?
     87a:	c9 56       	subi	r28, 0x69	; 105
     87c:	df 4f       	sbci	r29, 0xFF	; 255
     87e:	18 82       	st	Y, r1
     880:	c7 59       	subi	r28, 0x97	; 151
     882:	d0 40       	sbci	r29, 0x00	; 0
	
	// Leading Edge adjustment variables
	bool LEdgeDetect= false;
	
	// Time decoding variables
	bool MMarkFound=false; // has the Minute Marker been found
     884:	ca 56       	subi	r28, 0x6A	; 106
     886:	df 4f       	sbci	r29, 0xFF	; 255
     888:	18 82       	st	Y, r1
     88a:	c6 59       	subi	r28, 0x96	; 150
     88c:	d0 40       	sbci	r29, 0x00	; 0
	uint8_t LEdgeSRange=100; // leading edge search bin size - effectively acts as Ledge Search mode too
	uint8_t LEdgeCount[10]={0}; // count of hits in each bin for current second
	uint8_t LEdgeSum[10]={0};	// count of consecutive seconds that a bin has had a hit
	uint8_t LEMax=0; // bin with highest number of consecutive hits
	uint8_t LE2Max=0; // bin with second highest number of consecutive hits
	uint8_t LESecsInMode=0; // number of seconds that we have been in this LEdge Search mode
     88e:	c8 56       	subi	r28, 0x68	; 104
     890:	df 4f       	sbci	r29, 0xFF	; 255
     892:	18 82       	st	Y, r1
     894:	c8 59       	subi	r28, 0x98	; 152
     896:	d0 40       	sbci	r29, 0x00	; 0
	uint16_t LEdgeSMin=0; // bottom of leading edge search range
	uint8_t LEdgeSRange=100; // leading edge search bin size - effectively acts as Ledge Search mode too
	uint8_t LEdgeCount[10]={0}; // count of hits in each bin for current second
	uint8_t LEdgeSum[10]={0};	// count of consecutive seconds that a bin has had a hit
	uint8_t LEMax=0; // bin with highest number of consecutive hits
	uint8_t LE2Max=0; // bin with second highest number of consecutive hits
     898:	cd 56       	subi	r28, 0x6D	; 109
     89a:	df 4f       	sbci	r29, 0xFF	; 255
     89c:	18 82       	st	Y, r1
     89e:	c3 59       	subi	r28, 0x93	; 147
     8a0:	d0 40       	sbci	r29, 0x00	; 0
	// Leading Edge detection variables
	uint16_t LEdgeSMin=0; // bottom of leading edge search range
	uint8_t LEdgeSRange=100; // leading edge search bin size - effectively acts as Ledge Search mode too
	uint8_t LEdgeCount[10]={0}; // count of hits in each bin for current second
	uint8_t LEdgeSum[10]={0};	// count of consecutive seconds that a bin has had a hit
	uint8_t LEMax=0; // bin with highest number of consecutive hits
     8a2:	c0 57       	subi	r28, 0x70	; 112
     8a4:	df 4f       	sbci	r29, 0xFF	; 255
     8a6:	18 82       	st	Y, r1
     8a8:	c0 59       	subi	r28, 0x90	; 144
     8aa:	d0 40       	sbci	r29, 0x00	; 0
	uint16_t x=0;
	uint16_t y=0;
	
	// Leading Edge detection variables
	uint16_t LEdgeSMin=0; // bottom of leading edge search range
	uint8_t LEdgeSRange=100; // leading edge search bin size - effectively acts as Ledge Search mode too
     8ac:	24 e6       	ldi	r18, 0x64	; 100
     8ae:	c1 57       	subi	r28, 0x71	; 113
     8b0:	df 4f       	sbci	r29, 0xFF	; 255
     8b2:	28 83       	st	Y, r18
     8b4:	cf 58       	subi	r28, 0x8F	; 143
     8b6:	d0 40       	sbci	r29, 0x00	; 0
	uint16_t i=0;
	uint16_t x=0;
	uint16_t y=0;
	
	// Leading Edge detection variables
	uint16_t LEdgeSMin=0; // bottom of leading edge search range
     8b8:	41 2c       	mov	r4, r1
     8ba:	51 2c       	mov	r5, r1
     8bc:	ce 01       	movw	r24, r28
     8be:	87 58       	subi	r24, 0x87	; 135
     8c0:	9f 4f       	sbci	r25, 0xFF	; 255
     8c2:	c3 57       	subi	r28, 0x73	; 115
     8c4:	df 4f       	sbci	r29, 0xFF	; 255
     8c6:	99 83       	std	Y+1, r25	; 0x01
     8c8:	88 83       	st	Y, r24
     8ca:	cd 58       	subi	r28, 0x8D	; 141
     8cc:	d0 40       	sbci	r29, 0x00	; 0
		// Leading Edge Search Region below
		#pragma region LeadingEdgeSearch
		if (LEdgeSearch) {		
			x=0;  // Buffer byte counter
			y=0;  // Buffer bit counter
			for (i=0; i<=999; i++) {   // millisecond counter
     8ce:	c3 57       	subi	r28, 0x73	; 115
     8d0:	df 4f       	sbci	r29, 0xFF	; 255
     8d2:	98 81       	ld	r25, Y
     8d4:	cd 58       	subi	r28, 0x8D	; 141
     8d6:	d0 40       	sbci	r29, 0x00	; 0
     8d8:	cf 56       	subi	r28, 0x6F	; 111
     8da:	df 4f       	sbci	r29, 0xFF	; 255
     8dc:	98 83       	st	Y, r25
     8de:	c1 59       	subi	r28, 0x91	; 145
     8e0:	d0 40       	sbci	r29, 0x00	; 0
     8e2:	c2 57       	subi	r28, 0x72	; 114
     8e4:	df 4f       	sbci	r29, 0xFF	; 255
     8e6:	a8 81       	ld	r26, Y
     8e8:	ce 58       	subi	r28, 0x8E	; 142
     8ea:	d0 40       	sbci	r29, 0x00	; 0
     8ec:	ce 56       	subi	r28, 0x6E	; 110
     8ee:	df 4f       	sbci	r29, 0xFF	; 255
     8f0:	a8 83       	st	Y, r26
     8f2:	c2 59       	subi	r28, 0x92	; 146
     8f4:	d0 40       	sbci	r29, 0x00	; 0
     8f6:	e9 e7       	ldi	r30, 0x79	; 121
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	ec 0f       	add	r30, r28
     8fc:	fd 1f       	adc	r31, r29
     8fe:	3a 96       	adiw	r30, 0x0a	; 10
     900:	cc 56       	subi	r28, 0x6C	; 108
     902:	df 4f       	sbci	r29, 0xFF	; 255
     904:	f9 83       	std	Y+1, r31	; 0x01
     906:	e8 83       	st	Y, r30
     908:	c4 59       	subi	r28, 0x94	; 148
     90a:	d0 40       	sbci	r29, 0x00	; 0
				y++;
				if (y==8) {  
					y=0;
     90c:	21 2c       	mov	r2, r1
     90e:	31 2c       	mov	r3, r1
	
	
	/* Replace with your application code */
	while (1)
	{
		while (!TICK); // wait for a tick
     910:	80 91 8a 01 	lds	r24, 0x018A
     914:	88 23       	and	r24, r24
     916:	e1 f3       	breq	.-8      	; 0x910 <__stack+0x11>
		TICK=false;
     918:	10 92 8a 01 	sts	0x018A, r1
		
		fb.clear();
     91c:	8b e8       	ldi	r24, 0x8B	; 139
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <_ZN11Framebuffer5clearEv>

		// Leading Edge Search Region below
		#pragma region LeadingEdgeSearch
		if (LEdgeSearch) {		
     924:	80 91 04 01 	lds	r24, 0x0104
     928:	88 23       	and	r24, r24
     92a:	09 f4       	brne	.+2      	; 0x92e <__stack+0x2f>
     92c:	af c1       	rjmp	.+862    	; 0xc8c <__stack+0x38d>
					x++;
				}
				PrevPinState=PinState;
				PinState=CHECK_BIT(buffer[x],y);  // read pin state
			
				if (i>=LEdgeSMin && i<=LEdgeSMin+(10*LEdgeSRange)-1) // id ms counter within Leading Edge search range
     92e:	c1 57       	subi	r28, 0x71	; 113
     930:	df 4f       	sbci	r29, 0xFF	; 255
     932:	f8 81       	ld	r31, Y
     934:	cf 58       	subi	r28, 0x8F	; 143
     936:	d0 40       	sbci	r29, 0x00	; 0
     938:	8f 2f       	mov	r24, r31
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	4c 01       	movw	r8, r24
     93e:	88 0c       	add	r8, r8
     940:	99 1c       	adc	r9, r9
     942:	88 0f       	add	r24, r24
     944:	99 1f       	adc	r25, r25
     946:	88 0f       	add	r24, r24
     948:	99 1f       	adc	r25, r25
     94a:	88 0f       	add	r24, r24
     94c:	99 1f       	adc	r25, r25
     94e:	88 0d       	add	r24, r8
     950:	99 1d       	adc	r25, r9
     952:	42 01       	movw	r8, r4
     954:	21 e0       	ldi	r18, 0x01	; 1
     956:	82 1a       	sub	r8, r18
     958:	91 08       	sbc	r9, r1
     95a:	88 0e       	add	r8, r24
     95c:	99 1e       	adc	r9, r25
     95e:	21 2f       	mov	r18, r17
     960:	c1 2c       	mov	r12, r1
     962:	d1 2c       	mov	r13, r1
		#pragma region LeadingEdgeSearch
		if (LEdgeSearch) {		
			x=0;  // Buffer byte counter
			y=0;  // Buffer bit counter
			for (i=0; i<=999; i++) {   // millisecond counter
				y++;
     964:	ee 24       	eor	r14, r14
     966:	e3 94       	inc	r14
     968:	f1 2c       	mov	r15, r1
					x++;
				}
				PrevPinState=PinState;
				PinState=CHECK_BIT(buffer[x],y);  // read pin state
			
				if (i>=LEdgeSMin && i<=LEdgeSMin+(10*LEdgeSRange)-1) // id ms counter within Leading Edge search range
     96a:	a1 2c       	mov	r10, r1
     96c:	b1 2c       	mov	r11, r1
				{
					if (!PrevPinState && PinState) 	LEdgeCount[(i-LEdgeSMin)/LEdgeSRange]++; // leading Edge found, increment counter for current bin
     96e:	6f 2e       	mov	r6, r31
     970:	71 2c       	mov	r7, r1
     972:	85 01       	movw	r16, r10
     974:	0c c0       	rjmp	.+24     	; 0x98e <__stack+0x8f>
		#pragma region LeadingEdgeSearch
		if (LEdgeSearch) {		
			x=0;  // Buffer byte counter
			y=0;  // Buffer bit counter
			for (i=0; i<=999; i++) {   // millisecond counter
				y++;
     976:	3f ef       	ldi	r19, 0xFF	; 255
     978:	e3 1a       	sub	r14, r19
     97a:	f3 0a       	sbc	r15, r19
				if (y==8) {  
     97c:	88 e0       	ldi	r24, 0x08	; 8
     97e:	e8 16       	cp	r14, r24
     980:	f1 04       	cpc	r15, r1
     982:	21 f4       	brne	.+8      	; 0x98c <__stack+0x8d>
					y=0;
					x++;
     984:	0f 5f       	subi	r16, 0xFF	; 255
     986:	1f 4f       	sbci	r17, 0xFF	; 255
			x=0;  // Buffer byte counter
			y=0;  // Buffer bit counter
			for (i=0; i<=999; i++) {   // millisecond counter
				y++;
				if (y==8) {  
					y=0;
     988:	e2 2c       	mov	r14, r2
     98a:	f3 2c       	mov	r15, r3
					x++;
				}
				PrevPinState=PinState;
				PinState=CHECK_BIT(buffer[x],y);  // read pin state
     98c:	2b 2d       	mov	r18, r11
     98e:	f8 01       	movw	r30, r16
     990:	eb 5f       	subi	r30, 0xFB	; 251
     992:	fe 4f       	sbci	r31, 0xFE	; 254
     994:	80 81       	ld	r24, Z
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	0e 2c       	mov	r0, r14
     99a:	02 c0       	rjmp	.+4      	; 0x9a0 <__stack+0xa1>
     99c:	95 95       	asr	r25
     99e:	87 95       	ror	r24
     9a0:	0a 94       	dec	r0
     9a2:	e2 f7       	brpl	.-8      	; 0x99c <__stack+0x9d>
     9a4:	a8 2f       	mov	r26, r24
     9a6:	a1 70       	andi	r26, 0x01	; 1
     9a8:	ba 2e       	mov	r11, r26
			
				if (i>=LEdgeSMin && i<=LEdgeSMin+(10*LEdgeSRange)-1) // id ms counter within Leading Edge search range
     9aa:	c4 14       	cp	r12, r4
     9ac:	d5 04       	cpc	r13, r5
     9ae:	b8 f0       	brcs	.+46     	; 0x9de <__stack+0xdf>
     9b0:	8c 14       	cp	r8, r12
     9b2:	9d 04       	cpc	r9, r13
     9b4:	a0 f0       	brcs	.+40     	; 0x9de <__stack+0xdf>
				{
					if (!PrevPinState && PinState) 	LEdgeCount[(i-LEdgeSMin)/LEdgeSRange]++; // leading Edge found, increment counter for current bin
     9b6:	21 11       	cpse	r18, r1
     9b8:	12 c0       	rjmp	.+36     	; 0x9de <__stack+0xdf>
     9ba:	aa 23       	and	r26, r26
     9bc:	c1 f0       	breq	.+48     	; 0x9ee <__stack+0xef>
     9be:	c6 01       	movw	r24, r12
     9c0:	84 19       	sub	r24, r4
     9c2:	95 09       	sbc	r25, r5
     9c4:	b3 01       	movw	r22, r6
     9c6:	0e 94 2f 08 	call	0x105e	; 0x105e <__udivmodhi4>
     9ca:	e3 e8       	ldi	r30, 0x83	; 131
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	ec 0f       	add	r30, r28
     9d0:	fd 1f       	adc	r31, r29
     9d2:	e6 0f       	add	r30, r22
     9d4:	f7 1f       	adc	r31, r23
     9d6:	80 81       	ld	r24, Z
     9d8:	8f 5f       	subi	r24, 0xFF	; 255
     9da:	80 83       	st	Z, r24
     9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <__stack+0xe3>
				}
				if (PinState) fb.drawPixel(x,y); // draw pixel to show raw signal
     9de:	bb 20       	and	r11, r11
     9e0:	31 f0       	breq	.+12     	; 0x9ee <__stack+0xef>
     9e2:	4e 2d       	mov	r20, r14
     9e4:	60 2f       	mov	r22, r16
     9e6:	8b e8       	ldi	r24, 0x8B	; 139
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN11Framebuffer9drawPixelEhh>
		// Leading Edge Search Region below
		#pragma region LeadingEdgeSearch
		if (LEdgeSearch) {		
			x=0;  // Buffer byte counter
			y=0;  // Buffer bit counter
			for (i=0; i<=999; i++) {   // millisecond counter
     9ee:	bf ef       	ldi	r27, 0xFF	; 255
     9f0:	cb 1a       	sub	r12, r27
     9f2:	db 0a       	sbc	r13, r27
     9f4:	e8 ee       	ldi	r30, 0xE8	; 232
     9f6:	ce 16       	cp	r12, r30
     9f8:	e3 e0       	ldi	r30, 0x03	; 3
     9fa:	de 06       	cpc	r13, r30
     9fc:	09 f0       	breq	.+2      	; 0xa00 <__stack+0x101>
     9fe:	bb cf       	rjmp	.-138    	; 0x976 <__stack+0x77>
     a00:	1b 2d       	mov	r17, r11
     a02:	ce 01       	movw	r24, r28
     a04:	87 58       	subi	r24, 0x87	; 135
     a06:	9f 4f       	sbci	r25, 0xFF	; 255
     a08:	4c 01       	movw	r8, r24
     a0a:	de 01       	movw	r26, r28
     a0c:	ad 57       	subi	r26, 0x7D	; 125
     a0e:	bf 4f       	sbci	r27, 0xFF	; 255
     a10:	7d 01       	movw	r14, r26
     a12:	cf 56       	subi	r28, 0x6F	; 111
     a14:	df 4f       	sbci	r29, 0xFF	; 255
     a16:	a8 80       	ld	r10, Y
     a18:	c1 59       	subi	r28, 0x91	; 145
     a1a:	d0 40       	sbci	r29, 0x00	; 0
     a1c:	ce 56       	subi	r28, 0x6E	; 110
     a1e:	df 4f       	sbci	r29, 0xFF	; 255
     a20:	b8 80       	ld	r11, Y
     a22:	c2 59       	subi	r28, 0x92	; 146
     a24:	d0 40       	sbci	r29, 0x00	; 0
     a26:	60 e0       	ldi	r22, 0x00	; 0
     a28:	71 2e       	mov	r7, r17
     a2a:	67 01       	movw	r12, r14
				if (PinState) fb.drawPixel(x,y); // draw pixel to show raw signal
			}

			for(uint8_t j=0; j<=9; j++){
				
				if (LEdgeCount[j]>=1) {  // increment counter if there has been a hit in this bin this second
     a2c:	d7 01       	movw	r26, r14
     a2e:	8c 91       	ld	r24, X
     a30:	88 23       	and	r24, r24
     a32:	29 f0       	breq	.+10     	; 0xa3e <__stack+0x13f>
					LEdgeSum[j]++;
     a34:	f5 01       	movw	r30, r10
     a36:	80 81       	ld	r24, Z
     a38:	8f 5f       	subi	r24, 0xFF	; 255
     a3a:	80 83       	st	Z, r24
     a3c:	02 c0       	rjmp	.+4      	; 0xa42 <__stack+0x143>
				}
				else
				{
					LEdgeSum[j]=0;  // else set count of number of consecutive seconds to zero
     a3e:	d5 01       	movw	r26, r10
     a40:	1c 92       	st	X, r1
				}
				fb.drawRectangle(j*12,63-LEdgeSum[j],(j+1)*12,63);  // display bar for bin on OLED screen
     a42:	1c e0       	ldi	r17, 0x0C	; 12
     a44:	16 0f       	add	r17, r22
     a46:	f5 01       	movw	r30, r10
     a48:	81 91       	ld	r24, Z+
     a4a:	5f 01       	movw	r10, r30
     a4c:	4f e3       	ldi	r20, 0x3F	; 63
     a4e:	48 1b       	sub	r20, r24
     a50:	0f e3       	ldi	r16, 0x3F	; 63
     a52:	21 2f       	mov	r18, r17
     a54:	8b e8       	ldi	r24, 0x8B	; 139
     a56:	91 e0       	ldi	r25, 0x01	; 1
     a58:	0e 94 6f 02 	call	0x4de	; 0x4de <_ZN11Framebuffer13drawRectangleEhhhh>
				LEdgeCount[j]=0;  // reset count of hits this second ready for next second
     a5c:	d6 01       	movw	r26, r12
     a5e:	1c 92       	st	X, r1
     a60:	bf ef       	ldi	r27, 0xFF	; 255
     a62:	eb 1a       	sub	r14, r27
     a64:	fb 0a       	sbc	r15, r27
     a66:	61 2f       	mov	r22, r17
					if (!PrevPinState && PinState) 	LEdgeCount[(i-LEdgeSMin)/LEdgeSRange]++; // leading Edge found, increment counter for current bin
				}
				if (PinState) fb.drawPixel(x,y); // draw pixel to show raw signal
			}

			for(uint8_t j=0; j<=9; j++){
     a68:	18 37       	cpi	r17, 0x78	; 120
     a6a:	f9 f6       	brne	.-66     	; 0xa2a <__stack+0x12b>
     a6c:	17 2d       	mov	r17, r7
     a6e:	cf 56       	subi	r28, 0x6F	; 111
     a70:	df 4f       	sbci	r29, 0xFF	; 255
     a72:	e8 81       	ld	r30, Y
     a74:	c1 59       	subi	r28, 0x91	; 145
     a76:	d0 40       	sbci	r29, 0x00	; 0
     a78:	ce 56       	subi	r28, 0x6E	; 110
     a7a:	df 4f       	sbci	r29, 0xFF	; 255
     a7c:	f8 81       	ld	r31, Y
     a7e:	c2 59       	subi	r28, 0x92	; 146
     a80:	d0 40       	sbci	r29, 0x00	; 0
     a82:	c0 57       	subi	r28, 0x70	; 112
     a84:	df 4f       	sbci	r29, 0xFF	; 255
     a86:	98 81       	ld	r25, Y
     a88:	c0 59       	subi	r28, 0x90	; 144
     a8a:	d0 40       	sbci	r29, 0x00	; 0
     a8c:	cd 56       	subi	r28, 0x6D	; 109
     a8e:	df 4f       	sbci	r29, 0xFF	; 255
     a90:	38 81       	ld	r19, Y
     a92:	c3 59       	subi	r28, 0x93	; 147
     a94:	d0 40       	sbci	r29, 0x00	; 0
     a96:	cc 56       	subi	r28, 0x6C	; 108
     a98:	df 4f       	sbci	r29, 0xFF	; 255
     a9a:	68 81       	ld	r22, Y
     a9c:	79 81       	ldd	r23, Y+1	; 0x01
     a9e:	c4 59       	subi	r28, 0x94	; 148
     aa0:	d0 40       	sbci	r29, 0x00	; 0
     aa2:	4e 2f       	mov	r20, r30
     aa4:	c3 57       	subi	r28, 0x73	; 115
     aa6:	df 4f       	sbci	r29, 0xFF	; 255
     aa8:	28 81       	ld	r18, Y
     aaa:	cd 58       	subi	r28, 0x8D	; 141
     aac:	d0 40       	sbci	r29, 0x00	; 0
     aae:	42 1b       	sub	r20, r18
				fb.drawRectangle(j*12,63-LEdgeSum[j],(j+1)*12,63);  // display bar for bin on OLED screen
				LEdgeCount[j]=0;  // reset count of hits this second ready for next second
			}

			for(uint8_t j=0; j<=9; j++){  // identify bins with first and second highest counts of leading edges
				if(LEdgeSum[j]>LEdgeSum[LEMax]) {LE2Max=LEMax; LEMax=j;}
     ab0:	81 91       	ld	r24, Z+
     ab2:	a9 e7       	ldi	r26, 0x79	; 121
     ab4:	b0 e0       	ldi	r27, 0x00	; 0
     ab6:	ac 0f       	add	r26, r28
     ab8:	bd 1f       	adc	r27, r29
     aba:	a9 0f       	add	r26, r25
     abc:	b1 1d       	adc	r27, r1
     abe:	2c 91       	ld	r18, X
     ac0:	28 17       	cp	r18, r24
     ac2:	10 f4       	brcc	.+4      	; 0xac8 <__stack+0x1c9>
     ac4:	39 2f       	mov	r19, r25
     ac6:	94 2f       	mov	r25, r20
				if(LEdgeSum[j]>LE2Max && LEdgeSum[j]<LEMax) LE2Max=j;
     ac8:	38 17       	cp	r19, r24
     aca:	18 f4       	brcc	.+6      	; 0xad2 <__stack+0x1d3>
     acc:	89 17       	cp	r24, r25
     ace:	08 f4       	brcc	.+2      	; 0xad2 <__stack+0x1d3>
     ad0:	34 2f       	mov	r19, r20
				}
				fb.drawRectangle(j*12,63-LEdgeSum[j],(j+1)*12,63);  // display bar for bin on OLED screen
				LEdgeCount[j]=0;  // reset count of hits this second ready for next second
			}

			for(uint8_t j=0; j<=9; j++){  // identify bins with first and second highest counts of leading edges
     ad2:	e6 17       	cp	r30, r22
     ad4:	f7 07       	cpc	r31, r23
     ad6:	29 f7       	brne	.-54     	; 0xaa2 <__stack+0x1a3>
     ad8:	c0 57       	subi	r28, 0x70	; 112
     ada:	df 4f       	sbci	r29, 0xFF	; 255
     adc:	98 83       	st	Y, r25
     ade:	c0 59       	subi	r28, 0x90	; 144
     ae0:	d0 40       	sbci	r29, 0x00	; 0
     ae2:	cd 56       	subi	r28, 0x6D	; 109
     ae4:	df 4f       	sbci	r29, 0xFF	; 255
     ae6:	38 83       	st	Y, r19
     ae8:	c3 59       	subi	r28, 0x93	; 147
     aea:	d0 40       	sbci	r29, 0x00	; 0
     aec:	09 2f       	mov	r16, r25
				if(LEdgeSum[j]>LEdgeSum[LEMax]) {LE2Max=LEMax; LEMax=j;}
				if(LEdgeSum[j]>LE2Max && LEdgeSum[j]<LEMax) LE2Max=j;
			}


			if (LEdgeSRange==100 && LEdgeSum[LEMax]>=10) { // one of the 100ms-wide bins has more than 10 consecutive hits
     aee:	c1 57       	subi	r28, 0x71	; 113
     af0:	df 4f       	sbci	r29, 0xFF	; 255
     af2:	38 81       	ld	r19, Y
     af4:	cf 58       	subi	r28, 0x8F	; 143
     af6:	d0 40       	sbci	r29, 0x00	; 0
     af8:	34 36       	cpi	r19, 0x64	; 100
     afa:	39 f5       	brne	.+78     	; 0xb4a <__stack+0x24b>
     afc:	89 2f       	mov	r24, r25
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	e9 e7       	ldi	r30, 0x79	; 121
     b02:	f0 e0       	ldi	r31, 0x00	; 0
     b04:	ec 0f       	add	r30, r28
     b06:	fd 1f       	adc	r31, r29
     b08:	e8 0f       	add	r30, r24
     b0a:	f9 1f       	adc	r31, r25
     b0c:	20 81       	ld	r18, Z
     b0e:	2a 30       	cpi	r18, 0x0A	; 10
     b10:	08 f4       	brcc	.+2      	; 0xb14 <__stack+0x215>
     b12:	bc c0       	rjmp	.+376    	; 0xc8c <__stack+0x38d>
				LEdgeSRange=10; // so we're going to narrow the search with 10ms wide bins ...
				LEdgeSMin=100*LEMax; // ... in the bin that had the most consecutive hits
     b14:	24 e6       	ldi	r18, 0x64	; 100
     b16:	28 9f       	mul	r18, r24
     b18:	20 01       	movw	r4, r0
     b1a:	29 9f       	mul	r18, r25
     b1c:	50 0c       	add	r5, r0
     b1e:	11 24       	eor	r1, r1
     b20:	cf 56       	subi	r28, 0x6F	; 111
     b22:	df 4f       	sbci	r29, 0xFF	; 255
     b24:	e8 81       	ld	r30, Y
     b26:	c1 59       	subi	r28, 0x91	; 145
     b28:	d0 40       	sbci	r29, 0x00	; 0
     b2a:	ce 56       	subi	r28, 0x6E	; 110
     b2c:	df 4f       	sbci	r29, 0xFF	; 255
     b2e:	f8 81       	ld	r31, Y
     b30:	c2 59       	subi	r28, 0x92	; 146
     b32:	d0 40       	sbci	r29, 0x00	; 0
     b34:	cc 56       	subi	r28, 0x6C	; 108
     b36:	df 4f       	sbci	r29, 0xFF	; 255
     b38:	88 81       	ld	r24, Y
     b3a:	99 81       	ldd	r25, Y+1	; 0x01
     b3c:	c4 59       	subi	r28, 0x94	; 148
     b3e:	d0 40       	sbci	r29, 0x00	; 0
				for(uint8_t j=0; j<=9; j++) { // reset the bin counts
					LEdgeSum[j]=0; 
     b40:	11 92       	st	Z+, r1


			if (LEdgeSRange==100 && LEdgeSum[LEMax]>=10) { // one of the 100ms-wide bins has more than 10 consecutive hits
				LEdgeSRange=10; // so we're going to narrow the search with 10ms wide bins ...
				LEdgeSMin=100*LEMax; // ... in the bin that had the most consecutive hits
				for(uint8_t j=0; j<=9; j++) { // reset the bin counts
     b42:	8e 17       	cp	r24, r30
     b44:	9f 07       	cpc	r25, r31
     b46:	e1 f7       	brne	.-8      	; 0xb40 <__stack+0x241>
     b48:	08 c0       	rjmp	.+16     	; 0xb5a <__stack+0x25b>
					LEdgeSum[j]=0; 
				}
			}

			if (LEdgeSRange==10) {
     b4a:	c1 57       	subi	r28, 0x71	; 113
     b4c:	df 4f       	sbci	r29, 0xFF	; 255
     b4e:	88 81       	ld	r24, Y
     b50:	cf 58       	subi	r28, 0x8F	; 143
     b52:	d0 40       	sbci	r29, 0x00	; 0
     b54:	8a 30       	cpi	r24, 0x0A	; 10
     b56:	09 f0       	breq	.+2      	; 0xb5a <__stack+0x25b>
     b58:	99 c0       	rjmp	.+306    	; 0xc8c <__stack+0x38d>
				fb.drawVLine((LEdgeSMin/100)*12,25,5); // Mark range that we're searching in with two small v lines
     b5a:	92 01       	movw	r18, r4
     b5c:	36 95       	lsr	r19
     b5e:	27 95       	ror	r18
     b60:	36 95       	lsr	r19
     b62:	27 95       	ror	r18
     b64:	ab e7       	ldi	r26, 0x7B	; 123
     b66:	b4 e1       	ldi	r27, 0x14	; 20
     b68:	0e 94 43 08 	call	0x1086	; 0x1086 <__umulhisi3>
     b6c:	7c 01       	movw	r14, r24
     b6e:	f6 94       	lsr	r15
     b70:	e7 94       	ror	r14
     b72:	6e 2d       	mov	r22, r14
     b74:	66 0f       	add	r22, r22
     b76:	6e 0d       	add	r22, r14
     b78:	66 0f       	add	r22, r22
     b7a:	66 0f       	add	r22, r22
     b7c:	25 e0       	ldi	r18, 0x05	; 5
     b7e:	49 e1       	ldi	r20, 0x19	; 25
     b80:	8b e8       	ldi	r24, 0x8B	; 139
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN11Framebuffer9drawVLineEhhh>
				fb.drawVLine(((LEdgeSMin/100)+1)*12,25,5);
     b88:	9f ef       	ldi	r25, 0xFF	; 255
     b8a:	e9 1a       	sub	r14, r25
     b8c:	f9 0a       	sbc	r15, r25
     b8e:	6e 2d       	mov	r22, r14
     b90:	66 0f       	add	r22, r22
     b92:	e6 0e       	add	r14, r22
     b94:	6e 2d       	mov	r22, r14
     b96:	66 0f       	add	r22, r22
     b98:	66 0f       	add	r22, r22
     b9a:	25 e0       	ldi	r18, 0x05	; 5
     b9c:	49 e1       	ldi	r20, 0x19	; 25
     b9e:	8b e8       	ldi	r24, 0x8B	; 139
     ba0:	91 e0       	ldi	r25, 0x01	; 1
     ba2:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN11Framebuffer9drawVLineEhhh>
				LESecsInMode++;
     ba6:	c8 56       	subi	r28, 0x68	; 104
     ba8:	df 4f       	sbci	r29, 0xFF	; 255
     baa:	a8 81       	ld	r26, Y
     bac:	c8 59       	subi	r28, 0x98	; 152
     bae:	d0 40       	sbci	r29, 0x00	; 0
     bb0:	af 5f       	subi	r26, 0xFF	; 255
     bb2:	c8 56       	subi	r28, 0x68	; 104
     bb4:	df 4f       	sbci	r29, 0xFF	; 255
     bb6:	a8 83       	st	Y, r26
     bb8:	c8 59       	subi	r28, 0x98	; 152
     bba:	d0 40       	sbci	r29, 0x00	; 0
				if (LESecsInMode>=30) { // we've been searching in 10ms bins for 30 seconds now, so revert to 100ms bins
     bbc:	ae 31       	cpi	r26, 0x1E	; 30
     bbe:	70 f1       	brcs	.+92     	; 0xc1c <__stack+0x31d>
     bc0:	cf 56       	subi	r28, 0x6F	; 111
     bc2:	df 4f       	sbci	r29, 0xFF	; 255
     bc4:	e8 81       	ld	r30, Y
     bc6:	c1 59       	subi	r28, 0x91	; 145
     bc8:	d0 40       	sbci	r29, 0x00	; 0
     bca:	ce 56       	subi	r28, 0x6E	; 110
     bcc:	df 4f       	sbci	r29, 0xFF	; 255
     bce:	f8 81       	ld	r31, Y
     bd0:	c2 59       	subi	r28, 0x92	; 146
     bd2:	d0 40       	sbci	r29, 0x00	; 0
     bd4:	cc 56       	subi	r28, 0x6C	; 108
     bd6:	df 4f       	sbci	r29, 0xFF	; 255
     bd8:	88 81       	ld	r24, Y
     bda:	99 81       	ldd	r25, Y+1	; 0x01
     bdc:	c4 59       	subi	r28, 0x94	; 148
     bde:	d0 40       	sbci	r29, 0x00	; 0
					LEdgeSRange=100;
					LEdgeSMin=0;
					for(uint8_t j=0; j<=9; j++) { // reset the bin counts
						LEdgeSum[j]=0;
     be0:	11 92       	st	Z+, r1
				fb.drawVLine(((LEdgeSMin/100)+1)*12,25,5);
				LESecsInMode++;
				if (LESecsInMode>=30) { // we've been searching in 10ms bins for 30 seconds now, so revert to 100ms bins
					LEdgeSRange=100;
					LEdgeSMin=0;
					for(uint8_t j=0; j<=9; j++) { // reset the bin counts
     be2:	8e 17       	cp	r24, r30
     be4:	9f 07       	cpc	r25, r31
     be6:	e1 f7       	brne	.-8      	; 0xbe0 <__stack+0x2e1>
						LEdgeSum[j]=0;
					}	
					TC=TC+(rand() & 0xFF);
     be8:	0e 94 a4 08 	call	0x1148	; 0x1148 <rand>
     bec:	20 91 88 01 	lds	r18, 0x0188
     bf0:	30 91 89 01 	lds	r19, 0x0189
     bf4:	28 0f       	add	r18, r24
     bf6:	31 1d       	adc	r19, r1
     bf8:	30 93 89 01 	sts	0x0189, r19
     bfc:	20 93 88 01 	sts	0x0188, r18
					LESecsInMode=0;			
     c00:	c8 56       	subi	r28, 0x68	; 104
     c02:	df 4f       	sbci	r29, 0xFF	; 255
     c04:	18 82       	st	Y, r1
     c06:	c8 59       	subi	r28, 0x98	; 152
     c08:	d0 40       	sbci	r29, 0x00	; 0
			if (LEdgeSRange==10) {
				fb.drawVLine((LEdgeSMin/100)*12,25,5); // Mark range that we're searching in with two small v lines
				fb.drawVLine(((LEdgeSMin/100)+1)*12,25,5);
				LESecsInMode++;
				if (LESecsInMode>=30) { // we've been searching in 10ms bins for 30 seconds now, so revert to 100ms bins
					LEdgeSRange=100;
     c0a:	b4 e6       	ldi	r27, 0x64	; 100
     c0c:	c1 57       	subi	r28, 0x71	; 113
     c0e:	df 4f       	sbci	r29, 0xFF	; 255
     c10:	b8 83       	st	Y, r27
     c12:	cf 58       	subi	r28, 0x8F	; 143
     c14:	d0 40       	sbci	r29, 0x00	; 0
					LEdgeSMin=0;
     c16:	41 2c       	mov	r4, r1
     c18:	51 2c       	mov	r5, r1
     c1a:	06 c0       	rjmp	.+12     	; 0xc28 <__stack+0x329>
     c1c:	ea e0       	ldi	r30, 0x0A	; 10
     c1e:	c1 57       	subi	r28, 0x71	; 113
     c20:	df 4f       	sbci	r29, 0xFF	; 255
     c22:	e8 83       	st	Y, r30
     c24:	cf 58       	subi	r28, 0x8F	; 143
     c26:	d0 40       	sbci	r29, 0x00	; 0
						LEdgeSum[j]=0;
					}	
					TC=TC+(rand() & 0xFF);
					LESecsInMode=0;			
				}
				if (LEdgeSum[LEMax]>=10){  // *** START OF SECOND FOUND ***
     c28:	80 2f       	mov	r24, r16
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	e9 e7       	ldi	r30, 0x79	; 121
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	ec 0f       	add	r30, r28
     c32:	fd 1f       	adc	r31, r29
     c34:	e8 0f       	add	r30, r24
     c36:	f9 1f       	adc	r31, r25
     c38:	20 81       	ld	r18, Z
     c3a:	2a 30       	cpi	r18, 0x0A	; 10
     c3c:	38 f1       	brcs	.+78     	; 0xc8c <__stack+0x38d>
					LEdge=LEdgeSMin+(LEMax*10)+5; // << This is what we'll treat as the start of the second
     c3e:	9c 01       	movw	r18, r24
     c40:	22 0f       	add	r18, r18
     c42:	33 1f       	adc	r19, r19
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	88 0f       	add	r24, r24
     c4a:	99 1f       	adc	r25, r25
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	82 0f       	add	r24, r18
     c52:	93 1f       	adc	r25, r19
     c54:	05 96       	adiw	r24, 0x05	; 5
     c56:	48 0e       	add	r4, r24
     c58:	59 1e       	adc	r5, r25
     c5a:	50 92 87 01 	sts	0x0187, r5
     c5e:	40 92 86 01 	sts	0x0186, r4
     c62:	f4 01       	movw	r30, r8
     c64:	cc 56       	subi	r28, 0x6C	; 108
     c66:	df 4f       	sbci	r29, 0xFF	; 255
     c68:	88 81       	ld	r24, Y
     c6a:	99 81       	ldd	r25, Y+1	; 0x01
     c6c:	c4 59       	subi	r28, 0x94	; 148
     c6e:	d0 40       	sbci	r29, 0x00	; 0
					LEdgeSMin=0; // reset these variables ready for next time
					LEdgeSRange=100;
					for(uint8_t j=0; j<=9; j++) { // reset the bin counts
						LEdgeSum[j]=0;
     c70:	11 92       	st	Z+, r1
				}
				if (LEdgeSum[LEMax]>=10){  // *** START OF SECOND FOUND ***
					LEdge=LEdgeSMin+(LEMax*10)+5; // << This is what we'll treat as the start of the second
					LEdgeSMin=0; // reset these variables ready for next time
					LEdgeSRange=100;
					for(uint8_t j=0; j<=9; j++) { // reset the bin counts
     c72:	8e 17       	cp	r24, r30
     c74:	9f 07       	cpc	r25, r31
     c76:	e1 f7       	brne	.-8      	; 0xc70 <__stack+0x371>
						LEdgeSum[j]=0;
					}		
					LEdgeSearch=false;		
     c78:	10 92 04 01 	sts	0x0104, r1
					LESecsInMode=0;			
				}
				if (LEdgeSum[LEMax]>=10){  // *** START OF SECOND FOUND ***
					LEdge=LEdgeSMin+(LEMax*10)+5; // << This is what we'll treat as the start of the second
					LEdgeSMin=0; // reset these variables ready for next time
					LEdgeSRange=100;
     c7c:	f4 e6       	ldi	r31, 0x64	; 100
     c7e:	c1 57       	subi	r28, 0x71	; 113
     c80:	df 4f       	sbci	r29, 0xFF	; 255
     c82:	f8 83       	st	Y, r31
     c84:	cf 58       	subi	r28, 0x8F	; 143
     c86:	d0 40       	sbci	r29, 0x00	; 0
					TC=TC+(rand() & 0xFF);
					LESecsInMode=0;			
				}
				if (LEdgeSum[LEMax]>=10){  // *** START OF SECOND FOUND ***
					LEdge=LEdgeSMin+(LEMax*10)+5; // << This is what we'll treat as the start of the second
					LEdgeSMin=0; // reset these variables ready for next time
     c88:	41 2c       	mov	r4, r1
     c8a:	51 2c       	mov	r5, r1
		}
		#pragma endregion
		
		// --------------------------------------------------------------------------------------

		if (!LEdgeSearch) {	
     c8c:	80 91 04 01 	lds	r24, 0x0104
     c90:	81 11       	cpse	r24, r1
     c92:	f0 c0       	rjmp	.+480    	; 0xe74 <__stack+0x575>
     c94:	aa 24       	eor	r10, r10
     c96:	a3 94       	inc	r10
     c98:	b1 2c       	mov	r11, r1
     c9a:	e1 2c       	mov	r14, r1
     c9c:	f1 2c       	mov	r15, r1
     c9e:	71 2c       	mov	r7, r1
     ca0:	61 2c       	mov	r6, r1
     ca2:	c1 2c       	mov	r12, r1
     ca4:	d1 2c       	mov	r13, r1
     ca6:	81 2c       	mov	r8, r1
     ca8:	91 2c       	mov	r9, r1
     caa:	c7 01       	movw	r24, r14
     cac:	8c 01       	movw	r16, r24
     cae:	05 c0       	rjmp	.+10     	; 0xcba <__stack+0x3bb>
     cb0:	2f ef       	ldi	r18, 0xFF	; 255
     cb2:	a2 1a       	sub	r10, r18
     cb4:	b2 0a       	sbc	r11, r18
     cb6:	0f 5f       	subi	r16, 0xFF	; 255
     cb8:	1f 4f       	sbci	r17, 0xFF	; 255
			BitASample=0;
			BitBSample=0;
			BitCSample=0;
			
			for (i=0; i<=999; i++) {
				y++;
     cba:	3f ef       	ldi	r19, 0xFF	; 255
     cbc:	c3 1a       	sub	r12, r19
     cbe:	d3 0a       	sbc	r13, r19
				if (y==8) {
     cc0:	88 e0       	ldi	r24, 0x08	; 8
     cc2:	c8 16       	cp	r12, r24
     cc4:	d1 04       	cpc	r13, r1
     cc6:	09 f0       	breq	.+2      	; 0xcca <__stack+0x3cb>
     cc8:	de c0       	rjmp	.+444    	; 0xe86 <__stack+0x587>
					y=0;
					x++;
     cca:	9f ef       	ldi	r25, 0xFF	; 255
     ccc:	89 1a       	sub	r8, r25
     cce:	99 0a       	sbc	r9, r25
				}

				PinState=CHECK_BIT(buffer[x],y);  // read pin state
     cd0:	f4 01       	movw	r30, r8
     cd2:	eb 5f       	subi	r30, 0xFB	; 251
     cd4:	fe 4f       	sbci	r31, 0xFE	; 254
     cd6:	80 81       	ld	r24, Z
					//TC=TC-i;
					//LEdgeDetect=true;
				//}
							
//				if (PinState) fb.drawPixel(x,y+2); // draw pixel to show raw signal		
				if (PinState) fb.drawPixel(i/10,i%10); // draw pixel to show raw signal
     cd8:	a8 2f       	mov	r26, r24
     cda:	a1 70       	andi	r26, 0x01	; 1
     cdc:	fa 2e       	mov	r15, r26
     cde:	80 ff       	sbrs	r24, 0
     ce0:	3c c0       	rjmp	.+120    	; 0xd5a <__stack+0x45b>
			BitCSample=0;
			
			for (i=0; i<=999; i++) {
				y++;
				if (y==8) {
					y=0;
     ce2:	c2 2c       	mov	r12, r2
     ce4:	d3 2c       	mov	r13, r3
					//TC=TC-i;
					//LEdgeDetect=true;
				//}
							
//				if (PinState) fb.drawPixel(x,y+2); // draw pixel to show raw signal		
				if (PinState) fb.drawPixel(i/10,i%10); // draw pixel to show raw signal
     ce6:	98 01       	movw	r18, r16
     ce8:	ad ec       	ldi	r26, 0xCD	; 205
     cea:	bc ec       	ldi	r27, 0xCC	; 204
     cec:	0e 94 43 08 	call	0x1086	; 0x1086 <__umulhisi3>
     cf0:	96 95       	lsr	r25
     cf2:	87 95       	ror	r24
     cf4:	96 95       	lsr	r25
     cf6:	87 95       	ror	r24
     cf8:	96 95       	lsr	r25
     cfa:	87 95       	ror	r24
     cfc:	ac 01       	movw	r20, r24
     cfe:	44 0f       	add	r20, r20
     d00:	55 1f       	adc	r21, r21
     d02:	9c 01       	movw	r18, r24
     d04:	22 0f       	add	r18, r18
     d06:	33 1f       	adc	r19, r19
     d08:	22 0f       	add	r18, r18
     d0a:	33 1f       	adc	r19, r19
     d0c:	22 0f       	add	r18, r18
     d0e:	33 1f       	adc	r19, r19
     d10:	24 0f       	add	r18, r20
     d12:	35 1f       	adc	r19, r21
     d14:	a8 01       	movw	r20, r16
     d16:	42 1b       	sub	r20, r18
     d18:	53 0b       	sbc	r21, r19
     d1a:	68 2f       	mov	r22, r24
     d1c:	8b e8       	ldi	r24, 0x8B	; 139
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	0e 94 1f 02 	call	0x43e	; 0x43e <_ZN11Framebuffer9drawPixelEhh>
				
					
				if (PinState && i>=100 && i<=199) BitASample++;
     d24:	04 36       	cpi	r16, 0x64	; 100
     d26:	11 05       	cpc	r17, r1
     d28:	28 f0       	brcs	.+10     	; 0xd34 <__stack+0x435>
     d2a:	08 3c       	cpi	r16, 0xC8	; 200
     d2c:	11 05       	cpc	r17, r1
     d2e:	28 f4       	brcc	.+10     	; 0xd3a <__stack+0x43b>
     d30:	63 94       	inc	r6
     d32:	09 c0       	rjmp	.+18     	; 0xd46 <__stack+0x447>
				if (PinState && i>=200 && i<=299) BitBSample++;
     d34:	08 3c       	cpi	r16, 0xC8	; 200
     d36:	11 05       	cpc	r17, r1
     d38:	30 f0       	brcs	.+12     	; 0xd46 <__stack+0x447>
     d3a:	0c 32       	cpi	r16, 0x2C	; 44
     d3c:	b1 e0       	ldi	r27, 0x01	; 1
     d3e:	1b 07       	cpc	r17, r27
     d40:	30 f4       	brcc	.+12     	; 0xd4e <__stack+0x44f>
     d42:	73 94       	inc	r7
     d44:	0c c0       	rjmp	.+24     	; 0xd5e <__stack+0x45f>
				if (PinState && i>=300 && i<=499) BitCSample++;
     d46:	0c 32       	cpi	r16, 0x2C	; 44
     d48:	e1 e0       	ldi	r30, 0x01	; 1
     d4a:	1e 07       	cpc	r17, r30
     d4c:	40 f0       	brcs	.+16     	; 0xd5e <__stack+0x45f>
     d4e:	04 3f       	cpi	r16, 0xF4	; 244
     d50:	f1 e0       	ldi	r31, 0x01	; 1
     d52:	1f 07       	cpc	r17, r31
     d54:	20 f4       	brcc	.+8      	; 0xd5e <__stack+0x45f>
     d56:	e3 94       	inc	r14
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <__stack+0x45f>
			BitCSample=0;
			
			for (i=0; i<=999; i++) {
				y++;
				if (y==8) {
					y=0;
     d5a:	c2 2c       	mov	r12, r2
     d5c:	d3 2c       	mov	r13, r3
					
				if (PinState && i>=100 && i<=199) BitASample++;
				if (PinState && i>=200 && i<=299) BitBSample++;
				if (PinState && i>=300 && i<=499) BitCSample++;
				
				if (i==500) {  // resolve samples into bits
     d5e:	04 3f       	cpi	r16, 0xF4	; 244
     d60:	21 e0       	ldi	r18, 0x01	; 1
     d62:	12 07       	cpc	r17, r18
     d64:	09 f0       	breq	.+2      	; 0xd68 <__stack+0x469>
     d66:	4c c0       	rjmp	.+152    	; 0xe00 <__stack+0x501>
					if (BitASample>=85) BitA[SigSecond]=true;
     d68:	34 e5       	ldi	r19, 0x54	; 84
     d6a:	36 15       	cp	r19, r6
     d6c:	68 f4       	brcc	.+26     	; 0xd88 <__stack+0x489>
     d6e:	ed e3       	ldi	r30, 0x3D	; 61
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	ec 0f       	add	r30, r28
     d74:	fd 1f       	adc	r31, r29
     d76:	c9 56       	subi	r28, 0x69	; 105
     d78:	df 4f       	sbci	r29, 0xFF	; 255
     d7a:	88 81       	ld	r24, Y
     d7c:	c7 59       	subi	r28, 0x97	; 151
     d7e:	d0 40       	sbci	r29, 0x00	; 0
     d80:	e8 0f       	add	r30, r24
     d82:	f1 1d       	adc	r31, r1
     d84:	91 e0       	ldi	r25, 0x01	; 1
     d86:	90 83       	st	Z, r25
					if (BitBSample>=85) BitB[SigSecond]=true;
     d88:	a4 e5       	ldi	r26, 0x54	; 84
     d8a:	a7 15       	cp	r26, r7
     d8c:	68 f4       	brcc	.+26     	; 0xda8 <__stack+0x4a9>
     d8e:	e1 e0       	ldi	r30, 0x01	; 1
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	ec 0f       	add	r30, r28
     d94:	fd 1f       	adc	r31, r29
     d96:	c9 56       	subi	r28, 0x69	; 105
     d98:	df 4f       	sbci	r29, 0xFF	; 255
     d9a:	b8 81       	ld	r27, Y
     d9c:	c7 59       	subi	r28, 0x97	; 151
     d9e:	d0 40       	sbci	r29, 0x00	; 0
     da0:	eb 0f       	add	r30, r27
     da2:	f1 1d       	adc	r31, r1
     da4:	21 e0       	ldi	r18, 0x01	; 1
     da6:	20 83       	st	Z, r18
					if (BitCSample>=170) BitC=true;
     da8:	39 ea       	ldi	r19, 0xA9	; 169
     daa:	3e 15       	cp	r19, r14
     dac:	30 f4       	brcc	.+12     	; 0xdba <__stack+0x4bb>
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	c7 56       	subi	r28, 0x67	; 103
     db2:	df 4f       	sbci	r29, 0xFF	; 255
     db4:	88 83       	st	Y, r24
     db6:	c9 59       	subi	r28, 0x99	; 153
     db8:	d0 40       	sbci	r29, 0x00	; 0
					BitASample=0; // reset samples ready for next second
					BitBSample=0;
					BitCSample=0;
					if (!MMarkFound && BitA[0] && BitB[0] && BitC) { // test for minute marker if not found
     dba:	ca 56       	subi	r28, 0x6A	; 106
     dbc:	df 4f       	sbci	r29, 0xFF	; 255
     dbe:	98 81       	ld	r25, Y
     dc0:	c6 59       	subi	r28, 0x96	; 150
     dc2:	d0 40       	sbci	r29, 0x00	; 0
     dc4:	91 11       	cpse	r25, r1
     dc6:	5b c0       	rjmp	.+182    	; 0xe7e <__stack+0x57f>
     dc8:	8d ad       	ldd	r24, Y+61	; 0x3d
     dca:	88 23       	and	r24, r24
     dcc:	09 f4       	brne	.+2      	; 0xdd0 <__stack+0x4d1>
     dce:	57 c0       	rjmp	.+174    	; 0xe7e <__stack+0x57f>
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	88 23       	and	r24, r24
     dd4:	09 f4       	brne	.+2      	; 0xdd8 <__stack+0x4d9>
     dd6:	53 c0       	rjmp	.+166    	; 0xe7e <__stack+0x57f>
     dd8:	c7 56       	subi	r28, 0x67	; 103
     dda:	df 4f       	sbci	r29, 0xFF	; 255
     ddc:	a8 81       	ld	r26, Y
     dde:	c9 59       	subi	r28, 0x99	; 153
     de0:	d0 40       	sbci	r29, 0x00	; 0
     de2:	aa 23       	and	r26, r26
     de4:	09 f4       	brne	.+2      	; 0xde8 <__stack+0x4e9>
     de6:	4b c0       	rjmp	.+150    	; 0xe7e <__stack+0x57f>
						MMarkFound=true;
						SigSecond=0;
     de8:	c9 56       	subi	r28, 0x69	; 105
     dea:	df 4f       	sbci	r29, 0xFF	; 255
     dec:	18 82       	st	Y, r1
     dee:	c7 59       	subi	r28, 0x97	; 151
     df0:	d0 40       	sbci	r29, 0x00	; 0
					if (BitCSample>=170) BitC=true;
					BitASample=0; // reset samples ready for next second
					BitBSample=0;
					BitCSample=0;
					if (!MMarkFound && BitA[0] && BitB[0] && BitC) { // test for minute marker if not found
						MMarkFound=true;
     df2:	b1 e0       	ldi	r27, 0x01	; 1
     df4:	ca 56       	subi	r28, 0x6A	; 106
     df6:	df 4f       	sbci	r29, 0xFF	; 255
     df8:	b8 83       	st	Y, r27
     dfa:	c6 59       	subi	r28, 0x96	; 150
     dfc:	d0 40       	sbci	r29, 0x00	; 0
     dfe:	3f c0       	rjmp	.+126    	; 0xe7e <__stack+0x57f>
			
			BitASample=0;
			BitBSample=0;
			BitCSample=0;
			
			for (i=0; i<=999; i++) {
     e00:	e8 ee       	ldi	r30, 0xE8	; 232
     e02:	ae 16       	cp	r10, r30
     e04:	e3 e0       	ldi	r30, 0x03	; 3
     e06:	be 06       	cpc	r11, r30
     e08:	08 f4       	brcc	.+2      	; 0xe0c <__stack+0x50d>
     e0a:	52 cf       	rjmp	.-348    	; 0xcb0 <__stack+0x3b1>
     e0c:	1f 2d       	mov	r17, r15
					}
				}
			
			
			}
			fb.drawVLine(9,10,3); // draw bit boundaries in signal display area
     e0e:	23 e0       	ldi	r18, 0x03	; 3
     e10:	4a e0       	ldi	r20, 0x0A	; 10
     e12:	69 e0       	ldi	r22, 0x09	; 9
     e14:	8b e8       	ldi	r24, 0x8B	; 139
     e16:	91 e0       	ldi	r25, 0x01	; 1
     e18:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN11Framebuffer9drawVLineEhhh>
			fb.drawVLine(19,10,3);
     e1c:	23 e0       	ldi	r18, 0x03	; 3
     e1e:	4a e0       	ldi	r20, 0x0A	; 10
     e20:	63 e1       	ldi	r22, 0x13	; 19
     e22:	8b e8       	ldi	r24, 0x8B	; 139
     e24:	91 e0       	ldi	r25, 0x01	; 1
     e26:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN11Framebuffer9drawVLineEhhh>
			fb.drawVLine(29,10,3);
     e2a:	23 e0       	ldi	r18, 0x03	; 3
     e2c:	4a e0       	ldi	r20, 0x0A	; 10
     e2e:	6d e1       	ldi	r22, 0x1D	; 29
     e30:	8b e8       	ldi	r24, 0x8B	; 139
     e32:	91 e0       	ldi	r25, 0x01	; 1
     e34:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN11Framebuffer9drawVLineEhhh>
			fb.drawVLine(49,10,3);	
     e38:	23 e0       	ldi	r18, 0x03	; 3
     e3a:	4a e0       	ldi	r20, 0x0A	; 10
     e3c:	61 e3       	ldi	r22, 0x31	; 49
     e3e:	8b e8       	ldi	r24, 0x8B	; 139
     e40:	91 e0       	ldi	r25, 0x01	; 1
     e42:	0e 94 3b 02 	call	0x476	; 0x476 <_ZN11Framebuffer9drawVLineEhhh>
			
			if (MMarkFound) {
     e46:	ca 56       	subi	r28, 0x6A	; 106
     e48:	df 4f       	sbci	r29, 0xFF	; 255
     e4a:	f8 81       	ld	r31, Y
     e4c:	c6 59       	subi	r28, 0x96	; 150
     e4e:	d0 40       	sbci	r29, 0x00	; 0
     e50:	ff 23       	and	r31, r31
     e52:	81 f0       	breq	.+32     	; 0xe74 <__stack+0x575>
				fb.drawRectangle(0,60,3,63,true); // draw a filled square bottom left corner if minute marker found 
     e54:	ee 24       	eor	r14, r14
     e56:	e3 94       	inc	r14
     e58:	0f e3       	ldi	r16, 0x3F	; 63
     e5a:	23 e0       	ldi	r18, 0x03	; 3
     e5c:	4c e3       	ldi	r20, 0x3C	; 60
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	8b e8       	ldi	r24, 0x8B	; 139
     e62:	91 e0       	ldi	r25, 0x01	; 1
     e64:	0e 94 9e 02 	call	0x53c	; 0x53c <_ZN11Framebuffer13drawRectangleEhhhhh>
				SigSecond=SigSecond+1;
     e68:	21 e0       	ldi	r18, 0x01	; 1
     e6a:	c9 56       	subi	r28, 0x69	; 105
     e6c:	df 4f       	sbci	r29, 0xFF	; 255
     e6e:	28 83       	st	Y, r18
     e70:	c7 59       	subi	r28, 0x97	; 151
     e72:	d0 40       	sbci	r29, 0x00	; 0
		}
		// --------------------------------------------------------------------------------------


		
		fb.show(); // update OLED screen
     e74:	8b e8       	ldi	r24, 0x8B	; 139
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <_ZN11Framebuffer4showEv>
		
		
	}
     e7c:	49 cd       	rjmp	.-1390   	; 0x910 <__stack+0x11>
					TC=TC+(rand() & 0xFF);
					LESecsInMode=0;			
				}
				if (LEdgeSum[LEMax]>=10){  // *** START OF SECOND FOUND ***
					LEdge=LEdgeSMin+(LEMax*10)+5; // << This is what we'll treat as the start of the second
					LEdgeSMin=0; // reset these variables ready for next time
     e7e:	e1 2c       	mov	r14, r1
     e80:	71 2c       	mov	r7, r1
     e82:	61 2c       	mov	r6, r1
     e84:	15 cf       	rjmp	.-470    	; 0xcb0 <__stack+0x3b1>
				if (y==8) {
					y=0;
					x++;
				}

				PinState=CHECK_BIT(buffer[x],y);  // read pin state
     e86:	f4 01       	movw	r30, r8
     e88:	eb 5f       	subi	r30, 0xFB	; 251
     e8a:	fe 4f       	sbci	r31, 0xFE	; 254
     e8c:	80 81       	ld	r24, Z
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0c 2c       	mov	r0, r12
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <__stack+0x599>
     e94:	95 95       	asr	r25
     e96:	87 95       	ror	r24
     e98:	0a 94       	dec	r0
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <__stack+0x595>
					//TC=TC-i;
					//LEdgeDetect=true;
				//}
							
//				if (PinState) fb.drawPixel(x,y+2); // draw pixel to show raw signal		
				if (PinState) fb.drawPixel(i/10,i%10); // draw pixel to show raw signal
     e9c:	b8 2f       	mov	r27, r24
     e9e:	b1 70       	andi	r27, 0x01	; 1
     ea0:	fb 2e       	mov	r15, r27
     ea2:	80 ff       	sbrs	r24, 0
     ea4:	5c cf       	rjmp	.-328    	; 0xd5e <__stack+0x45f>
     ea6:	1f cf       	rjmp	.-450    	; 0xce6 <__stack+0x3e7>

00000ea8 <_GLOBAL__sub_I_fb>:
const uint8_t TILDE = 93;

#pragma endregion

// Global variables
Framebuffer fb;
     ea8:	8b e8       	ldi	r24, 0x8B	; 139
     eaa:	91 e0       	ldi	r25, 0x01	; 1
     eac:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <_ZN11FramebufferC1Ev>
     eb0:	08 95       	ret

00000eb2 <_ZN7SSD130611sendCommandEh>:

    // Turn display back on
    sendCommand(SSD1306_DISPLAYON);
}

void SSD1306::sendCommand(uint8_t command) {
     eb2:	1f 93       	push	r17
     eb4:	cf 93       	push	r28
     eb6:	df 93       	push	r29
     eb8:	ec 01       	movw	r28, r24
     eba:	16 2f       	mov	r17, r22
    i2c.start();
     ebc:	0e 94 0a 03 	call	0x614	; 0x614 <_ZN3I2C5startEv>
    i2c.write(0x00);
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	ce 01       	movw	r24, r28
     ec4:	0e 94 38 03 	call	0x670	; 0x670 <_ZN3I2C5writeEh>
    i2c.write(command);
     ec8:	61 2f       	mov	r22, r17
     eca:	ce 01       	movw	r24, r28
     ecc:	0e 94 38 03 	call	0x670	; 0x670 <_ZN3I2C5writeEh>
    i2c.stop();
     ed0:	ce 01       	movw	r24, r28
     ed2:	0e 94 4d 03 	call	0x69a	; 0x69a <_ZN3I2C4stopEv>
}
     ed6:	df 91       	pop	r29
     ed8:	cf 91       	pop	r28
     eda:	1f 91       	pop	r17
     edc:	08 95       	ret

00000ede <_ZN7SSD1306C1Ev>:
#include "simulator/I2C.h"
#else
#include "I2C.h"
#endif

SSD1306::SSD1306() {
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	ec 01       	movw	r28, r24
     ee4:	0e 94 01 03 	call	0x602	; 0x602 <_ZN3I2CC1Ev>
    i2c.init(SSD1306_DEFAULT_ADDRESS);
     ee8:	68 e7       	ldi	r22, 0x78	; 120
     eea:	ce 01       	movw	r24, r28
     eec:	0e 94 02 03 	call	0x604	; 0x604 <_ZN3I2C4initEh>

    // Turn display off
    sendCommand(SSD1306_DISPLAYOFF);
     ef0:	6e ea       	ldi	r22, 0xAE	; 174
     ef2:	ce 01       	movw	r24, r28
     ef4:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_SETDISPLAYCLOCKDIV);
     ef8:	65 ed       	ldi	r22, 0xD5	; 213
     efa:	ce 01       	movw	r24, r28
     efc:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x80);
     f00:	60 e8       	ldi	r22, 0x80	; 128
     f02:	ce 01       	movw	r24, r28
     f04:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_SETMULTIPLEX);
     f08:	68 ea       	ldi	r22, 0xA8	; 168
     f0a:	ce 01       	movw	r24, r28
     f0c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x3F);
     f10:	6f e3       	ldi	r22, 0x3F	; 63
     f12:	ce 01       	movw	r24, r28
     f14:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>
    
    sendCommand(SSD1306_SETDISPLAYOFFSET);
     f18:	63 ed       	ldi	r22, 0xD3	; 211
     f1a:	ce 01       	movw	r24, r28
     f1c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x00);
     f20:	60 e0       	ldi	r22, 0x00	; 0
     f22:	ce 01       	movw	r24, r28
     f24:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>
    
    sendCommand(SSD1306_SETSTARTLINE | 0x00);
     f28:	60 e4       	ldi	r22, 0x40	; 64
     f2a:	ce 01       	movw	r24, r28
     f2c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>
    
    // We use internal charge pump
    sendCommand(SSD1306_CHARGEPUMP);
     f30:	6d e8       	ldi	r22, 0x8D	; 141
     f32:	ce 01       	movw	r24, r28
     f34:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x14);
     f38:	64 e1       	ldi	r22, 0x14	; 20
     f3a:	ce 01       	movw	r24, r28
     f3c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>
    
    // Horizontal memory mode
    sendCommand(SSD1306_MEMORYMODE);
     f40:	60 e2       	ldi	r22, 0x20	; 32
     f42:	ce 01       	movw	r24, r28
     f44:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x00);
     f48:	60 e0       	ldi	r22, 0x00	; 0
     f4a:	ce 01       	movw	r24, r28
     f4c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>
    
    sendCommand(SSD1306_SEGREMAP | 0x1);
     f50:	61 ea       	ldi	r22, 0xA1	; 161
     f52:	ce 01       	movw	r24, r28
     f54:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_COMSCANDEC);
     f58:	68 ec       	ldi	r22, 0xC8	; 200
     f5a:	ce 01       	movw	r24, r28
     f5c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_SETCOMPINS);
     f60:	6a ed       	ldi	r22, 0xDA	; 218
     f62:	ce 01       	movw	r24, r28
     f64:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x12);
     f68:	62 e1       	ldi	r22, 0x12	; 18
     f6a:	ce 01       	movw	r24, r28
     f6c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>

    // Max contrast
    sendCommand(SSD1306_SETCONTRAST);
     f70:	61 e8       	ldi	r22, 0x81	; 129
     f72:	ce 01       	movw	r24, r28
     f74:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>
    sendCommand(0xCF);
     f78:	6f ec       	ldi	r22, 0xCF	; 207
     f7a:	ce 01       	movw	r24, r28
     f7c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_SETPRECHARGE);
     f80:	69 ed       	ldi	r22, 0xD9	; 217
     f82:	ce 01       	movw	r24, r28
     f84:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>
    sendCommand(0xF1);
     f88:	61 ef       	ldi	r22, 0xF1	; 241
     f8a:	ce 01       	movw	r24, r28
     f8c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_SETVCOMDETECT);
     f90:	6b ed       	ldi	r22, 0xDB	; 219
     f92:	ce 01       	movw	r24, r28
     f94:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x40);
     f98:	60 e4       	ldi	r22, 0x40	; 64
     f9a:	ce 01       	movw	r24, r28
     f9c:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_DISPLAYALLON_RESUME);
     fa0:	64 ea       	ldi	r22, 0xA4	; 164
     fa2:	ce 01       	movw	r24, r28
     fa4:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>

    // Non-inverted display
    sendCommand(SSD1306_NORMALDISPLAY);
     fa8:	66 ea       	ldi	r22, 0xA6	; 166
     faa:	ce 01       	movw	r24, r28
     fac:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>

    // Turn display back on
    sendCommand(SSD1306_DISPLAYON);
     fb0:	6f ea       	ldi	r22, 0xAF	; 175
     fb2:	ce 01       	movw	r24, r28
     fb4:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>
}
     fb8:	df 91       	pop	r29
     fba:	cf 91       	pop	r28
     fbc:	08 95       	ret

00000fbe <_ZN7SSD130615sendFramebufferEPh>:
    } else {
        sendCommand(SSD1306_NORMALDISPLAY);
    }
}

void SSD1306::sendFramebuffer(uint8_t *buffer) {
     fbe:	cf 92       	push	r12
     fc0:	df 92       	push	r13
     fc2:	ef 92       	push	r14
     fc4:	ff 92       	push	r15
     fc6:	0f 93       	push	r16
     fc8:	1f 93       	push	r17
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
     fce:	08 2f       	mov	r16, r24
     fd0:	19 2f       	mov	r17, r25
     fd2:	7b 01       	movw	r14, r22
    sendCommand(SSD1306_COLUMNADDR);
     fd4:	61 e2       	ldi	r22, 0x21	; 33
     fd6:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x00);
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	80 2f       	mov	r24, r16
     fde:	91 2f       	mov	r25, r17
     fe0:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x7F);
     fe4:	6f e7       	ldi	r22, 0x7F	; 127
     fe6:	80 2f       	mov	r24, r16
     fe8:	91 2f       	mov	r25, r17
     fea:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>

    sendCommand(SSD1306_PAGEADDR);
     fee:	62 e2       	ldi	r22, 0x22	; 34
     ff0:	80 2f       	mov	r24, r16
     ff2:	91 2f       	mov	r25, r17
     ff4:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x00);
     ff8:	60 e0       	ldi	r22, 0x00	; 0
     ffa:	80 2f       	mov	r24, r16
     ffc:	91 2f       	mov	r25, r17
     ffe:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>
    sendCommand(0x07);
    1002:	67 e0       	ldi	r22, 0x07	; 7
    1004:	80 2f       	mov	r24, r16
    1006:	91 2f       	mov	r25, r17
    1008:	0e 94 59 07 	call	0xeb2	; 0xeb2 <_ZN7SSD130611sendCommandEh>
    100c:	e7 01       	movw	r28, r14
    100e:	8c ef       	ldi	r24, 0xFC	; 252
    1010:	f8 1a       	sub	r15, r24

    // We have to send the buffer as 16 bytes packets
    // Our buffer is 1024 bytes long, 1024/16 = 64
    // We have to send 64 packets
    for (uint8_t packet = 0; packet < 64; packet++) {
        i2c.start();
    1012:	80 2f       	mov	r24, r16
    1014:	91 2f       	mov	r25, r17
    1016:	0e 94 0a 03 	call	0x614	; 0x614 <_ZN3I2C5startEv>
        i2c.write(0x40);
    101a:	60 e4       	ldi	r22, 0x40	; 64
    101c:	80 2f       	mov	r24, r16
    101e:	91 2f       	mov	r25, r17
    1020:	0e 94 38 03 	call	0x670	; 0x670 <_ZN3I2C5writeEh>
    1024:	6e 01       	movw	r12, r28
    1026:	80 e1       	ldi	r24, 0x10	; 16
    1028:	c8 0e       	add	r12, r24
    102a:	d1 1c       	adc	r13, r1
        for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
            i2c.write(buffer[packet*16+packet_byte]);
    102c:	69 91       	ld	r22, Y+
    102e:	80 2f       	mov	r24, r16
    1030:	91 2f       	mov	r25, r17
    1032:	0e 94 38 03 	call	0x670	; 0x670 <_ZN3I2C5writeEh>
    // Our buffer is 1024 bytes long, 1024/16 = 64
    // We have to send 64 packets
    for (uint8_t packet = 0; packet < 64; packet++) {
        i2c.start();
        i2c.write(0x40);
        for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
    1036:	cc 15       	cp	r28, r12
    1038:	dd 05       	cpc	r29, r13
    103a:	c1 f7       	brne	.-16     	; 0x102c <_ZN7SSD130615sendFramebufferEPh+0x6e>
            i2c.write(buffer[packet*16+packet_byte]);
        }
        i2c.stop();
    103c:	80 2f       	mov	r24, r16
    103e:	91 2f       	mov	r25, r17
    1040:	0e 94 4d 03 	call	0x69a	; 0x69a <_ZN3I2C4stopEv>
    1044:	e6 01       	movw	r28, r12
    sendCommand(0x07);

    // We have to send the buffer as 16 bytes packets
    // Our buffer is 1024 bytes long, 1024/16 = 64
    // We have to send 64 packets
    for (uint8_t packet = 0; packet < 64; packet++) {
    1046:	ce 14       	cp	r12, r14
    1048:	df 04       	cpc	r13, r15
    104a:	19 f7       	brne	.-58     	; 0x1012 <_ZN7SSD130615sendFramebufferEPh+0x54>
        for (uint8_t packet_byte = 0; packet_byte < 16; ++packet_byte) {
            i2c.write(buffer[packet*16+packet_byte]);
        }
        i2c.stop();
    }
    104c:	df 91       	pop	r29
    104e:	cf 91       	pop	r28
    1050:	1f 91       	pop	r17
    1052:	0f 91       	pop	r16
    1054:	ff 90       	pop	r15
    1056:	ef 90       	pop	r14
    1058:	df 90       	pop	r13
    105a:	cf 90       	pop	r12
    105c:	08 95       	ret

0000105e <__udivmodhi4>:
    105e:	aa 1b       	sub	r26, r26
    1060:	bb 1b       	sub	r27, r27
    1062:	51 e1       	ldi	r21, 0x11	; 17
    1064:	07 c0       	rjmp	.+14     	; 0x1074 <__udivmodhi4_ep>

00001066 <__udivmodhi4_loop>:
    1066:	aa 1f       	adc	r26, r26
    1068:	bb 1f       	adc	r27, r27
    106a:	a6 17       	cp	r26, r22
    106c:	b7 07       	cpc	r27, r23
    106e:	10 f0       	brcs	.+4      	; 0x1074 <__udivmodhi4_ep>
    1070:	a6 1b       	sub	r26, r22
    1072:	b7 0b       	sbc	r27, r23

00001074 <__udivmodhi4_ep>:
    1074:	88 1f       	adc	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	5a 95       	dec	r21
    107a:	a9 f7       	brne	.-22     	; 0x1066 <__udivmodhi4_loop>
    107c:	80 95       	com	r24
    107e:	90 95       	com	r25
    1080:	bc 01       	movw	r22, r24
    1082:	cd 01       	movw	r24, r26
    1084:	08 95       	ret

00001086 <__umulhisi3>:
    1086:	a2 9f       	mul	r26, r18
    1088:	b0 01       	movw	r22, r0
    108a:	b3 9f       	mul	r27, r19
    108c:	c0 01       	movw	r24, r0
    108e:	a3 9f       	mul	r26, r19
    1090:	70 0d       	add	r23, r0
    1092:	81 1d       	adc	r24, r1
    1094:	11 24       	eor	r1, r1
    1096:	91 1d       	adc	r25, r1
    1098:	b2 9f       	mul	r27, r18
    109a:	70 0d       	add	r23, r0
    109c:	81 1d       	adc	r24, r1
    109e:	11 24       	eor	r1, r1
    10a0:	91 1d       	adc	r25, r1
    10a2:	08 95       	ret

000010a4 <__tablejump2__>:
    10a4:	ee 0f       	add	r30, r30
    10a6:	ff 1f       	adc	r31, r31
    10a8:	05 90       	lpm	r0, Z+
    10aa:	f4 91       	lpm	r31, Z
    10ac:	e0 2d       	mov	r30, r0
    10ae:	09 94       	ijmp

000010b0 <do_rand>:
    10b0:	8f 92       	push	r8
    10b2:	9f 92       	push	r9
    10b4:	af 92       	push	r10
    10b6:	bf 92       	push	r11
    10b8:	cf 92       	push	r12
    10ba:	df 92       	push	r13
    10bc:	ef 92       	push	r14
    10be:	ff 92       	push	r15
    10c0:	cf 93       	push	r28
    10c2:	df 93       	push	r29
    10c4:	ec 01       	movw	r28, r24
    10c6:	68 81       	ld	r22, Y
    10c8:	79 81       	ldd	r23, Y+1	; 0x01
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	9b 81       	ldd	r25, Y+3	; 0x03
    10ce:	61 15       	cp	r22, r1
    10d0:	71 05       	cpc	r23, r1
    10d2:	81 05       	cpc	r24, r1
    10d4:	91 05       	cpc	r25, r1
    10d6:	21 f4       	brne	.+8      	; 0x10e0 <do_rand+0x30>
    10d8:	64 e2       	ldi	r22, 0x24	; 36
    10da:	79 ed       	ldi	r23, 0xD9	; 217
    10dc:	8b e5       	ldi	r24, 0x5B	; 91
    10de:	97 e0       	ldi	r25, 0x07	; 7
    10e0:	2d e1       	ldi	r18, 0x1D	; 29
    10e2:	33 ef       	ldi	r19, 0xF3	; 243
    10e4:	41 e0       	ldi	r20, 0x01	; 1
    10e6:	50 e0       	ldi	r21, 0x00	; 0
    10e8:	0e 94 b4 08 	call	0x1168	; 0x1168 <__divmodsi4>
    10ec:	49 01       	movw	r8, r18
    10ee:	5a 01       	movw	r10, r20
    10f0:	9b 01       	movw	r18, r22
    10f2:	ac 01       	movw	r20, r24
    10f4:	a7 ea       	ldi	r26, 0xA7	; 167
    10f6:	b1 e4       	ldi	r27, 0x41	; 65
    10f8:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__muluhisi3>
    10fc:	6b 01       	movw	r12, r22
    10fe:	7c 01       	movw	r14, r24
    1100:	ac ee       	ldi	r26, 0xEC	; 236
    1102:	b4 ef       	ldi	r27, 0xF4	; 244
    1104:	a5 01       	movw	r20, r10
    1106:	94 01       	movw	r18, r8
    1108:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <__mulohisi3>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	8c 0d       	add	r24, r12
    1112:	9d 1d       	adc	r25, r13
    1114:	ae 1d       	adc	r26, r14
    1116:	bf 1d       	adc	r27, r15
    1118:	b7 ff       	sbrs	r27, 7
    111a:	03 c0       	rjmp	.+6      	; 0x1122 <do_rand+0x72>
    111c:	01 97       	sbiw	r24, 0x01	; 1
    111e:	a1 09       	sbc	r26, r1
    1120:	b0 48       	sbci	r27, 0x80	; 128
    1122:	88 83       	st	Y, r24
    1124:	99 83       	std	Y+1, r25	; 0x01
    1126:	aa 83       	std	Y+2, r26	; 0x02
    1128:	bb 83       	std	Y+3, r27	; 0x03
    112a:	9f 77       	andi	r25, 0x7F	; 127
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	ff 90       	pop	r15
    1132:	ef 90       	pop	r14
    1134:	df 90       	pop	r13
    1136:	cf 90       	pop	r12
    1138:	bf 90       	pop	r11
    113a:	af 90       	pop	r10
    113c:	9f 90       	pop	r9
    113e:	8f 90       	pop	r8
    1140:	08 95       	ret

00001142 <rand_r>:
    1142:	0e 94 58 08 	call	0x10b0	; 0x10b0 <do_rand>
    1146:	08 95       	ret

00001148 <rand>:
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	0e 94 58 08 	call	0x10b0	; 0x10b0 <do_rand>
    1150:	08 95       	ret

00001152 <srand>:
    1152:	a0 e0       	ldi	r26, 0x00	; 0
    1154:	b0 e0       	ldi	r27, 0x00	; 0
    1156:	80 93 00 01 	sts	0x0100, r24
    115a:	90 93 01 01 	sts	0x0101, r25
    115e:	a0 93 02 01 	sts	0x0102, r26
    1162:	b0 93 03 01 	sts	0x0103, r27
    1166:	08 95       	ret

00001168 <__divmodsi4>:
    1168:	05 2e       	mov	r0, r21
    116a:	97 fb       	bst	r25, 7
    116c:	1e f4       	brtc	.+6      	; 0x1174 <__divmodsi4+0xc>
    116e:	00 94       	com	r0
    1170:	0e 94 cb 08 	call	0x1196	; 0x1196 <__negsi2>
    1174:	57 fd       	sbrc	r21, 7
    1176:	07 d0       	rcall	.+14     	; 0x1186 <__divmodsi4_neg2>
    1178:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__udivmodsi4>
    117c:	07 fc       	sbrc	r0, 7
    117e:	03 d0       	rcall	.+6      	; 0x1186 <__divmodsi4_neg2>
    1180:	4e f4       	brtc	.+18     	; 0x1194 <__divmodsi4_exit>
    1182:	0c 94 cb 08 	jmp	0x1196	; 0x1196 <__negsi2>

00001186 <__divmodsi4_neg2>:
    1186:	50 95       	com	r21
    1188:	40 95       	com	r20
    118a:	30 95       	com	r19
    118c:	21 95       	neg	r18
    118e:	3f 4f       	sbci	r19, 0xFF	; 255
    1190:	4f 4f       	sbci	r20, 0xFF	; 255
    1192:	5f 4f       	sbci	r21, 0xFF	; 255

00001194 <__divmodsi4_exit>:
    1194:	08 95       	ret

00001196 <__negsi2>:
    1196:	90 95       	com	r25
    1198:	80 95       	com	r24
    119a:	70 95       	com	r23
    119c:	61 95       	neg	r22
    119e:	7f 4f       	sbci	r23, 0xFF	; 255
    11a0:	8f 4f       	sbci	r24, 0xFF	; 255
    11a2:	9f 4f       	sbci	r25, 0xFF	; 255
    11a4:	08 95       	ret

000011a6 <__muluhisi3>:
    11a6:	0e 94 43 08 	call	0x1086	; 0x1086 <__umulhisi3>
    11aa:	a5 9f       	mul	r26, r21
    11ac:	90 0d       	add	r25, r0
    11ae:	b4 9f       	mul	r27, r20
    11b0:	90 0d       	add	r25, r0
    11b2:	a4 9f       	mul	r26, r20
    11b4:	80 0d       	add	r24, r0
    11b6:	91 1d       	adc	r25, r1
    11b8:	11 24       	eor	r1, r1
    11ba:	08 95       	ret

000011bc <__mulshisi3>:
    11bc:	b7 ff       	sbrs	r27, 7
    11be:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <__muluhisi3>

000011c2 <__mulohisi3>:
    11c2:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <__muluhisi3>
    11c6:	82 1b       	sub	r24, r18
    11c8:	93 0b       	sbc	r25, r19
    11ca:	08 95       	ret

000011cc <__udivmodsi4>:
    11cc:	a1 e2       	ldi	r26, 0x21	; 33
    11ce:	1a 2e       	mov	r1, r26
    11d0:	aa 1b       	sub	r26, r26
    11d2:	bb 1b       	sub	r27, r27
    11d4:	fd 01       	movw	r30, r26
    11d6:	0d c0       	rjmp	.+26     	; 0x11f2 <__udivmodsi4_ep>

000011d8 <__udivmodsi4_loop>:
    11d8:	aa 1f       	adc	r26, r26
    11da:	bb 1f       	adc	r27, r27
    11dc:	ee 1f       	adc	r30, r30
    11de:	ff 1f       	adc	r31, r31
    11e0:	a2 17       	cp	r26, r18
    11e2:	b3 07       	cpc	r27, r19
    11e4:	e4 07       	cpc	r30, r20
    11e6:	f5 07       	cpc	r31, r21
    11e8:	20 f0       	brcs	.+8      	; 0x11f2 <__udivmodsi4_ep>
    11ea:	a2 1b       	sub	r26, r18
    11ec:	b3 0b       	sbc	r27, r19
    11ee:	e4 0b       	sbc	r30, r20
    11f0:	f5 0b       	sbc	r31, r21

000011f2 <__udivmodsi4_ep>:
    11f2:	66 1f       	adc	r22, r22
    11f4:	77 1f       	adc	r23, r23
    11f6:	88 1f       	adc	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	1a 94       	dec	r1
    11fc:	69 f7       	brne	.-38     	; 0x11d8 <__udivmodsi4_loop>
    11fe:	60 95       	com	r22
    1200:	70 95       	com	r23
    1202:	80 95       	com	r24
    1204:	90 95       	com	r25
    1206:	9b 01       	movw	r18, r22
    1208:	ac 01       	movw	r20, r24
    120a:	bd 01       	movw	r22, r26
    120c:	cf 01       	movw	r24, r30
    120e:	08 95       	ret

00001210 <_exit>:
    1210:	f8 94       	cli

00001212 <__stop_program>:
    1212:	ff cf       	rjmp	.-2      	; 0x1212 <__stop_program>
